CREATE TABLE MARVIN00(
                         N1 NUMBER PRIMARY KEY,
                         N2 NUMBER(2),
                         N3 NUMBER(4),
                         N4 NUMBER(8),
                         N5 NUMBER(12,0),
                         N6 NUMBER(13),
                         N7 NUMBER(30),
                         N8 NUMBER(30,2),
                         N9 NUMERIC(10,2),
                         N10 NUMERIC(10),
                         N11 NUMBER(38,38),
                         N12 NUMBER(5,-2),
                         N13 NUMBER(5,-4),
                         N14 NUMBER(38,100),
                         N15 NUMBER(4,5),
                         N16 NUMBER(6,6),
                         N17 NUMBER(*,100),
                         N18 NUMBER(*,2),
                         N19 NUMBER(*),
                         NBFILE BFILE,
                         VCHAR1 VARCHAR(10),
                         VCHAR2 VARCHAR(3000),
                         VCHAR3 VARCHAR2(10),
                         VCHAR4 VARCHAR2(3000),
                         CHAR1 CHAR(23),
                         CHAR2 CHAR(300),
                         CHAR3 CHARACTER(23),
                         CHAR4 CHARACTER(300),
                         CHAR5 NCHAR(23),
                         CHAR6 NCHAR(300),
                         CHAR7 NCHAR VARYING(10),
                         CHAR8 NCHAR VARYING(300),
                         CHAR9 NVARCHAR2(10),
                         CHAR10 NVARCHAR2(300),
                         DLOB CLOB,
                         CFLOB NCLOB,
                         NDATE DATE,
                         NDECIMAL1 DECIMAL,
                         NDECIMAL2 DECIMAL(10,2),
                         NDECIMAL3 DEC(10,2),
                         NDECIMAL4 DEC,
                         DP1 DOUBLE PRECISION,
                         FP1 FLOAT(2),
                         FP2 FLOAT,
                         FY2 INTEGER,
                         FY4 INT,
                         FY5 SMALLINT,
                         YT INTERVAL YEAR(5) TO MONTH,
                         YU INTERVAL DAY(6) TO SECOND(3),
                         HP00 LONG RAW,
                         HP01 LONG,
                         RW1 RAW(10),
                         RW2 RAW(300),
                         RL REAL,
                         RD1 ROWID,
                         RD2 UROWID(100),
                         TP1 TIMESTAMP,
                         TP2 TIMESTAMP(3),
                         TP3 TIMESTAMP(5),
                         TP4 TIMESTAMP(5) WITH TIME ZONE,
                         XT XMLTYPE
);


CREATE TABLE MARVIN01(
                         N1 NUMBER PRIMARY KEY,
                         N2 NUMBER(2),
                         N3 NUMBER(4) CHECK(N3 IN(1,2 ,3)),
                         N4 NUMBER(8) NOT NULL,
                         N5 NUMBER(12,0),
                         N6 NUMBER(13) UNIQUE,
                         N7 NUMBER(30),
                         N8 NUMBER(30,2),
                         N9 NUMERIC(10,2),
                         N10 NUMERIC(10),
                         NBFILE BFILE,
                         VCHAR1 VARCHAR(10) DEFAULT 'TY',
                         VCHAR2 VARCHAR(3000),
                         VCHAR3 VARCHAR2(10),
                         VCHAR4 VARCHAR2(3000),
                         CHAR1 CHAR(23),
                         CHAR2 CHAR(300),
                         CHAR3 CHARACTER(23),
                         CHAR4 CHARACTER(300),
                         CHAR5 NCHAR(23),
                         CHAR6 NCHAR(300),
                         CHAR7 NCHAR VARYING(10),
                         CHAR8 NCHAR VARYING(300),
                         CHAR9 NVARCHAR2(10),
                         CHAR10 NVARCHAR2(300),
                         DLOB CLOB,
                         CFLOB NCLOB,
                         NDATE DATE,
                         NDECIMAL1 DECIMAL,
                         NDECIMAL2 DECIMAL(10,2),
                         NDECIMAL3 DEC(10,2),
                         NDECIMAL4 DEC,
                         DP1 DOUBLE PRECISION,
                         FP1 FLOAT(2),
                         FP2 FLOAT,
                         FY2 INTEGER,
                         FY4 INT,
                         FY5 SMALLINT,
                         YT INTERVAL YEAR(5) TO MONTH,
                         YU INTERVAL DAY(6) TO SECOND(3),
                         FLK LONG,
                         RW1 RAW(10),
                         RW2 RAW(300),
                         RL REAL,
                         RD1 ROWID,
                         RD2 UROWID(100),
                         TP1 TIMESTAMP,
                         TP2 TIMESTAMP(3),
                         TP3 TIMESTAMP(5),
                         TP4 TIMESTAMP(5) WITH TIME ZONE,
                         XT XMLTYPE,
                         CONSTRAINT FK_NAM1E FOREIGN KEY(N2) REFERENCES MARVIN00(N1),
                         CONSTRAINT UNQIUE UNIQUE (N1, CHAR1)
);

CREATE INDEX IDX_MARVIN01_TY ON MARVIN01(VCHAR3);
CREATE INDEX IDX_MARVIN01_TU ON MARVIN01(N4,VCHAR3);

CREATE TABLE MARVIN02(
                         N1 NUMBER PRIMARY KEY,
                         N2 NUMBER(2),
                         N3 NUMBER(4),
                         N4 NUMBER(8),
                         N5 NUMBER(12,0),
                         N6 NUMBER(13),
                         N7 NUMBER(30),
                         N8 NUMBER(30,2),
                         N9 NUMERIC(10,2),
                         N10 NUMERIC(10),
                         NBFILE BFILE,
                         VCHAR1 VARCHAR(10),
                         VCHAR2 VARCHAR(3000),
                         VCHAR3 VARCHAR2(10),
                         VCHAR4 VARCHAR2(3000),
                         CHAR1 CHAR,
                         CHAR2 CHAR(300),
                         CHAR3 CHARACTER(23),
                         CHAR4 CHARACTER(300),
                         CHAR5 NCHAR(23),
                         CHAR6 NCHAR(300),
                         CHAR7 NCHAR VARYING(10),
                         CHAR8 NCHAR VARYING(300),
                         CHAR9 NVARCHAR2(10),
                         CHAR10 NVARCHAR2(300),
                         DLOB CLOB,
                         CFLOB NCLOB,
                         NDATE DATE,
                         NDECIMAL1 DECIMAL,
                         NDECIMAL2 DECIMAL(10,2),
                         NDECIMAL3 DEC(10,2),
                         NDECIMAL4 DEC,
                         DP1 DOUBLE PRECISION,
                         FP1 FLOAT(2),
                         FP2 FLOAT,
                         FY2 INTEGER,
                         FY4 INT,
                         FY5 SMALLINT,
                         YT INTERVAL YEAR(5) TO MONTH,
                         YU INTERVAL DAY(6) TO SECOND(3),
                         HP LONG RAW  ,
                         RW1 RAW(10),
                         RW2 RAW(300),
                         RL REAL,
                         RD1 ROWID,
                         RD2 UROWID(100),
                         TP1 TIMESTAMP,
                         TP2 TIMESTAMP(3),
                         TP3 TIMESTAMP(5),
                         TP4 TIMESTAMP(5) WITH TIME ZONE,
                         XT XMLTYPE
);

/* constraint */
CREATE TABLE MARVIN03(
                         ID INT PRIMARY KEY,
                         SEX VARCHAR(2) CHECK(SEX IN ('MAN', 'WOMAN')), AGE INT, CONSTRAINT CK_SAGE1 CHECK(AGE >1
        AND AGE<10));


CREATE TABLE MARVIN04(
                         STUID      NUMBER(10)   PRIMARY KEY,
                         STUNAME    VARCHAR2(20) NOT NULL,
                         STUSEX     VARCHAR2(2)  CHECK(STUSEX IN('MAN','WOMAN'))
);

CREATE TABLE MARVIN05 ( STUID NUMBER ( 10, 2 ) PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ) );
CREATE TABLE MARVIN06 ( STUID NUMBER ( 11, 0 ) PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ) );
CREATE TABLE MARVIN07 ( STUID NUMBER ( 13 ) PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ) );
CREATE TABLE MARVIN08 ( STUID NUMBER PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ) );
CREATE TABLE MARVIN09 ( STUID NUMBER(30) PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ) );
CREATE TABLE MARVIN10 ( STUID NUMBER(30,2) PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ) );
CREATE TABLE MARVIN11 ( STUID NUMBER(22,2) PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ) );
CREATE TABLE MARVIN12 ( STUID NUMBER(22,2) PRIMARY KEY, STUNAME VARCHAR2 ( 20 ) NOT NULL, STUSEX VARCHAR2 ( 2 ),FG LONG,HK CLOB);


/* comment */
CREATE TABLE MARVIN13 (
                          ID1            VARCHAR2(50) NOT NULL,
                          ID2            INTEGER   NOT NULL,
                          SPARE_FIELD_1           NUMBER(28,10),
                          SPARE_FIELD_2            NUMBER(28,10),
                          SPARE_FIELD_3            NUMBER(28,10),
                          UPDATE_TIME              TIMESTAMP(3)
);
COMMENT ON TABLE  MARVIN13  IS '表TABLENAME';
COMMENT ON COLUMN MARVIN13.ID1 IS 'ID1';
COMMENT ON COLUMN MARVIN13.ID2  IS 'ID2';
COMMENT ON COLUMN MARVIN13.SPARE_FIELD_1  IS '备用字段1';
COMMENT ON COLUMN MARVIN13.SPARE_FIELD_2  IS '备用字段2';
COMMENT ON COLUMN MARVIN13.SPARE_FIELD_3 IS '备用字段3';
COMMENT ON COLUMN MARVIN13.UPDATE_TIME IS '数据更新时间';


CREATE TABLE MARVIN14 (
                          ID NUMBER PRIMARY KEY,
                          NAME1 VARCHAR2 (10),
                          NAME2 VARCHAR2 (10),
                          NAME3 VARCHAR2 (10),
                          LOC VARCHAR2 (10),
                          OTHER BLOB,
                          ADDRESS CLOB,
                          DT TIMESTAMP(9),
                          D DATE,
                          SEX NUMBER (10)
);

ALTER TABLE MARVIN14 ADD CONSTRAINT CONS_UK1 UNIQUE(NAME1);
ALTER TABLE MARVIN14 ADD CONSTRAINT CONS_UK2 UNIQUE(NAME3,LOC);
ALTER TABLE MARVIN14 ADD CONSTRAINT CONS_UK3 UNIQUE(LOC,NAME2);
CREATE UNIQUE INDEX UNIQ_LOC ON MARVIN14(LOC);
CREATE UNIQUE INDEX UNIQ_LOC_NAME ON MARVIN14(LOC,NAME2);
CREATE INDEX IDX_NAME_COMPLEX ON MARVIN14(NAME2,NAME3);
CREATE INDEX IDX_NAME_SEX_COMPLEX ON MARVIN14(NAME3,SEX);


CREATE TABLE MARVIN15 (
                          ID NUMBER PRIMARY KEY,
                          NAME1 VARCHAR2(10),
                          NAME2 VARCHAR2(10),
                          NAME3 VARCHAR2(10),
                          NAME4 VARCHAR2(10),
                          NAME5 VARCHAR2(10),
                          NAME6 VARCHAR2(10),
                          NAME7 VARCHAR2(10),
                          NAME8 VARCHAR2(10),
                          NAME9 VARCHAR2(10),
                          NAME10 VARCHAR2(10),
                          NAME11 VARCHAR2(10),
                          NAME12 VARCHAR2(10)
);
CREATE UNIQUE INDEX MARVIN15_UNIQUE_NAME12 ON MARVIN15(NAME1,NAME2);
ALTER TABLE MARVIN15 ADD CONSTRAINTS MARVIN15_UNIQUE_CONS UNIQUE(NAME1,NAME2) USING INDEX MARVIN15_UNIQUE_NAME12;
CREATE UNIQUE INDEX MARVIN15_UNIQUE_NAME23 ON MARVIN15(NAME2,NAME3);
CREATE UNIQUE INDEX MARVIN15_UNIQUE_NAME3 ON MARVIN15(NAME3);
CREATE INDEX MARVIN15_UNIQUE_NAME4 ON MARVIN15(NAME4);
CREATE INDEX MARVIN15_UNIQUE_NAME56 ON MARVIN15(NAME5,NAME6);
CREATE BITMAP INDEX MARVIN15_UNIQUE_NAME7 ON MARVIN15(NAME7);
CREATE BITMAP INDEX MARVIN15_UNIQUE_NAME8 ON MARVIN15(NAME8);
CREATE INDEX MARVIN15_UNIQUE_NAME9 ON MARVIN15(SUBSTR(NAME9,1,8));
CREATE INDEX MARVIN15_UNIQUE_NAME10 ON MARVIN15(SUBSTR(NAME10,1,8));
CREATE INDEX MARVIN15_UNIQUE_NAME78 ON MARVIN15(SUBSTR(NAME7,1,8),NAME8);
CREATE INDEX MARVIN15_UNIQUE_NAME89 ON MARVIN15(SUBSTR(NAME8,1,8),NAME9);
CREATE BITMAP INDEX MARVIN15_UNIQUE_NAME10_SUBSTR ON MARVIN15(SUBSTR(NAME10,1,8),NAME11);
CREATE BITMAP INDEX MARVIN15_UNIQUE_NAME9_SUBSTR ON MARVIN15(SUBSTR(NAME9,1,8),NAME10);
CREATE BITMAP INDEX MARVIN15_UNIQUE_NAME9_SUBSTR ON MARVIN15(SUBSTR(NAME9,1,8),NAME10);
CREATE INDEX RESUMETEXTINDEX10 ON MARVIN15(NAME10) INDEXTYPE IS "CTXSYS"."CONTEXT" PARAMETERS (':LANGUAGE ENGLISH :IGNORE THE A AN');

-- RANGE PARTITION
CREATE TABLE ORDER_RANGE_PART (
                          ORDER_ID      NUMBER,
                          ORDER_DATE    DATE,
                          CUSTOMER_ID   NUMBER,
                          ORDER_TOTAL   NUMBER
)
    PARTITION BY RANGE (ORDER_DATE)
(
   PARTITION ORDERS_Q1 VALUES LESS THAN (TO_DATE('01-APR-2022','DD-MON-YYYY')),
   PARTITION ORDERS_Q2 VALUES LESS THAN (TO_DATE('01-JUL-2022','DD-MON-YYYY')),
   PARTITION ORDERS_Q3 VALUES LESS THAN (TO_DATE('01-OCT-2022','DD-MON-YYYY')),
   PARTITION ORDERS_Q4 VALUES LESS THAN (TO_DATE('01-JAN-2023','DD-MON-YYYY'))
);


-- LIST PARTITION
CREATE TABLE EMPLOYEES_LIST_PART (
                             EMPLOYEE_ID    NUMBER,
                             FIRST_NAME     VARCHAR2(50),
                             LAST_NAME      VARCHAR2(50),
                             HIRE_DATE      DATE,
                             SALARY         NUMBER,
                             REGION         VARCHAR2(10)
)
    PARTITION BY LIST (REGION)
(
   PARTITION EAST_COAST VALUES ('NY', 'NJ', 'CT', 'MA', 'RI', 'NH', 'ME', 'VT'),
   PARTITION WEST_COAST VALUES ('CA', 'OR', 'WA', 'AK', 'HI'),
   PARTITION CENTRAL VALUES ('IL', 'WI', 'MN', 'IA', 'MO', 'NE', 'KS', 'ND', 'SD')
);

-- HASH PARTITION
CREATE TABLE SALES_HASH_PART (
                         SALE_ID     NUMBER,
                         SALE_DATE   DATE,
                         PRODUCT_ID  NUMBER,
                         QUANTITY    NUMBER,
                         PRICE       NUMBER
)
    PARTITION BY HASH (SALE_ID)
PARTITIONS 128;

-- RANGE-LIST PARTITION
CREATE TABLE SALES_RANGE_LIST_PART (
                         PRODUCT_ID    NUMBER,
                         SALE_DATE     DATE,
                         SALE_AMOUNT   NUMBER
)
    PARTITION BY RANGE (SALE_DATE)
SUBPARTITION BY LIST (PRODUCT_ID)
(
   PARTITION SALES_Q1_2008 VALUES LESS THAN (TO_DATE('01-APR-2008', 'DD-MON-YYYY'))
   (
      SUBPARTITION SALES_Q1_EAST VALUES (1, 3, 5),
      SUBPARTITION SALES_Q1_WEST VALUES (2, 4, 6)
   ),
   PARTITION SALES_Q2_2008 VALUES LESS THAN (TO_DATE('01-JUL-2008', 'DD-MON-YYYY'))
   (
      SUBPARTITION SALES_Q2_EAST VALUES (1, 4, 6),
      SUBPARTITION SALES_Q2_WEST VALUES (2, 3, 5)
   ),
   PARTITION SALES_Q3_2008 VALUES LESS THAN (TO_DATE('01-OCT-2008', 'DD-MON-YYYY'))
   (
      SUBPARTITION SALES_Q3_EAST VALUES (2, 3, 6),
      SUBPARTITION SALES_Q3_WEST VALUES (1, 4, 5)
   ),
   PARTITION SALES_Q4_2008 VALUES LESS THAN (TO_DATE('01-JAN-2009', 'DD-MON-YYYY'))
   (
      SUBPARTITION SALES_Q4_EAST VALUES (1, 4, 5),
      SUBPARTITION SALES_Q4_WEST VALUES (2, 3, 6)
   ),
   PARTITION SALES_Q1_2009 VALUES LESS THAN (TO_DATE('01-APR-2009', 'DD-MON-YYYY'))
   (
      SUBPARTITION SALES_Q5_EAST VALUES (2, 3, 5),
      SUBPARTITION SALES_Q5_WEST VALUES (1, 4, 6)
   )
);

-- HASH_HASH PARTITION
CREATE TABLE DEPARTMENT_HASH_HASH_PART (
                        DEPARTMENT_ID NUMBER(4) NOT NULL,
                        DEPARTMENT_NAME VARCHAR2(30),
                        COURSE_ID NUMBER(4) NOT NULL)
    PARTITION BY HASH(DEPARTMENT_ID)
     SUBPARTITION BY HASH (COURSE_ID) SUBPARTITIONS 32 PARTITIONS 16;


-- RANGE-HASH PARTITION
CREATE TABLE SALES_RANGE_HASH_INTER_PART (
    PROD_ID       NUMBER(6),
    CUST_ID       NUMBER,
    TIME_ID       DATE,
    CHANNEL_ID    CHAR(1),
    PROMO_ID      NUMBER(6),
    QUANTITY_SOLD NUMBER(3),
    AMOUNT_SOLD   NUMBER(10,2)
)
    PARTITION BY RANGE (TIME_ID) INTERVAL (NUMTOYMINTERVAL(1,'MONTH'))
 SUBPARTITION BY HASH (CUST_ID) SUBPARTITIONS 4
 (PARTITION BEFORE_2000 VALUES LESS THAN (TO_DATE('01-JAN-2000','DD-MON-YYYY'))
  )
PARALLEL;

-- RANGE-LIST PARTITION
CREATE TABLE SALES_RANGE_LIST_INTER_PART (
    PRODUCT_ID       NUMBER(6),
    CUSTOMER_ID      NUMBER,
    CHANNEL_ID       CHAR(1),
    PROMO_ID         NUMBER(6),
    SALES_DATE       DATE,
    QUANTITY_SOLD    INTEGER,
    AMOUNT_SOLD      NUMBER(10,2)
)
    PARTITION BY RANGE (SALES_DATE) INTERVAL (NUMTOYMINTERVAL(1,'MONTH'))
 SUBPARTITION BY LIST (CHANNEL_ID)
   SUBPARTITION TEMPLATE
   ( SUBPARTITION P_CATALOG VALUES ('C')
   , SUBPARTITION P_INTERNET VALUES ('I')
   , SUBPARTITION P_PARTNERS VALUES ('P')
   , SUBPARTITION P_DIRECT_SALES VALUES ('S')
   , SUBPARTITION P_TELE_SALES VALUES ('T')
   )
 (PARTITION BEFORE_2017 VALUES LESS THAN (TO_DATE('01-JAN-2017','DD-MON-YYYY'))
  )
PARALLEL;

-- RANGE-RANGE PARTITION
CREATE TABLE SALES_RANGE_RANGE_INTER_PART (
    PROD_ID       NUMBER(6),
    CUST_ID       NUMBER,
    TIME_ID       DATE,
    CHANNEL_ID    CHAR(1),
    PROMO_ID      NUMBER(6),
    QUANTITY_SOLD NUMBER(3),
    AMOUNT_SOLD   NUMBER(10,2)
)
    PARTITION BY RANGE (TIME_ID) INTERVAL (NUMTODSINTERVAL(1,'DAY'))
SUBPARTITION BY RANGE(AMOUNT_SOLD)
   SUBPARTITION TEMPLATE
   ( SUBPARTITION P_LOW VALUES LESS THAN (1000)
   , SUBPARTITION P_MEDIUM VALUES LESS THAN (4000)
   , SUBPARTITION P_HIGH VALUES LESS THAN (8000)
   , SUBPARTITION P_ULTIMATE VALUES LESS THAN (MAXVALUE)
   )
 (PARTITION BEFORE_2000 VALUES LESS THAN (TO_DATE('01-JAN-2000','DD-MON-YYYY'))
  )
PARALLEL;

-- LIST-HASH PARTITION
CREATE TABLE ACCOUNT_LIST_HASH_PART (
    ID             NUMBER,
    ACCOUNT_NUMBER NUMBER,
    CUSTOMER_ID    NUMBER,
    BALANCE        NUMBER,
    BRANCH_ID      NUMBER,
    REGION         VARCHAR(2),
    STATUS         VARCHAR2(1)
)
    PARTITION BY LIST (REGION)
SUBPARTITION BY HASH (CUSTOMER_ID) SUBPARTITIONS 8
( PARTITION P_NORTHWEST VALUES ('OR', 'WA')
 , PARTITION P_SOUTHWEST VALUES ('AZ', 'UT', 'NM')
 , PARTITION P_NORTHEAST VALUES ('NY', 'VM', 'NJ')
 , PARTITION P_SOUTHEAST VALUES ('FL', 'GA')
 , PARTITION P_NORTHCENTRAL VALUES ('SD', 'WI')
 , PARTITION P_SOUTHCENTRAL VALUES ('OK', 'TX')
);

-- LIST-LIST PARTITION
CREATE TABLE ACCOUNT_LIST_LIST_PART (
    ID             NUMBER,
    ACCOUNT_NUMBER NUMBER,
    CUSTOMER_ID    NUMBER,
    BALANCE        NUMBER,
    BRANCH_ID      NUMBER,
    REGION         VARCHAR(2),
    STATUS         VARCHAR2(1)
)
    PARTITION BY LIST (REGION)
SUBPARTITION BY LIST (STATUS)
( PARTITION P_NORTHWEST VALUES ('OR', 'WA')
  ( SUBPARTITION P_NW_BAD VALUES ('B')
  , SUBPARTITION P_NW_AVERAGE VALUES ('A')
  , SUBPARTITION P_NW_GOOD VALUES ('G')
  )
, PARTITION P_SOUTHWEST VALUES ('AZ', 'UT', 'NM')
  ( SUBPARTITION P_SW_BAD VALUES ('B')
  , SUBPARTITION P_SW_AVERAGE VALUES ('A')
  , SUBPARTITION P_SW_GOOD VALUES ('G')
  )
, PARTITION P_NORTHEAST VALUES ('NY', 'VM', 'NJ')
  ( SUBPARTITION P_NE_BAD VALUES ('B')
  , SUBPARTITION P_NE_AVERAGE VALUES ('A')
  , SUBPARTITION P_NE_GOOD VALUES ('G')
  )
, PARTITION P_SOUTHEAST VALUES ('FL', 'GA')
  ( SUBPARTITION P_SE_BAD VALUES ('B')
  , SUBPARTITION P_SE_AVERAGE VALUES ('A')
  , SUBPARTITION P_SE_GOOD VALUES ('G')
  )
, PARTITION P_NORTHCENTRAL VALUES ('SD', 'WI')
  ( SUBPARTITION P_NC_BAD VALUES ('B')
  , SUBPARTITION P_NC_AVERAGE VALUES ('A')
  , SUBPARTITION P_NC_GOOD VALUES ('G')
  )
, PARTITION P_SOUTHCENTRAL VALUES ('OK', 'TX')
  ( SUBPARTITION P_SC_BAD VALUES ('B')
  , SUBPARTITION P_SC_AVERAGE VALUES ('A')
  , SUBPARTITION P_SC_GOOD VALUES ('G')
  )
);

-- LIST-RANGE PARTITION
CREATE TABLE ACCOUNT_LIST_RANGE_PART (
    ID             NUMBER,
    ACCOUNT_NUMBER NUMBER,
    CUSTOMER_ID    NUMBER,
    BALANCE        NUMBER,
    BRANCH_ID      NUMBER,
    REGION         VARCHAR(2),
    STATUS         VARCHAR2(1)
)
    PARTITION BY LIST (REGION)
SUBPARTITION BY RANGE (BALANCE)
( PARTITION P_NORTHWEST VALUES ('OR', 'WA')
  ( SUBPARTITION P_NW_LOW VALUES LESS THAN (1000)
  , SUBPARTITION P_NW_AVERAGE VALUES LESS THAN (10000)
  , SUBPARTITION P_NW_HIGH VALUES LESS THAN (100000)
  , SUBPARTITION P_NW_EXTRAORDINARY VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_SOUTHWEST VALUES ('AZ', 'UT', 'NM')
  ( SUBPARTITION P_SW_LOW VALUES LESS THAN (1000)
  , SUBPARTITION P_SW_AVERAGE VALUES LESS THAN (10000)
  , SUBPARTITION P_SW_HIGH VALUES LESS THAN (100000)
  , SUBPARTITION P_SW_EXTRAORDINARY VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_NORTHEAST VALUES ('NY', 'VM', 'NJ')
  ( SUBPARTITION P_NE_LOW VALUES LESS THAN (1000)
  , SUBPARTITION P_NE_AVERAGE VALUES LESS THAN (10000)
  , SUBPARTITION P_NE_HIGH VALUES LESS THAN (100000)
  , SUBPARTITION P_NE_EXTRAORDINARY VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_SOUTHEAST VALUES ('FL', 'GA')
  ( SUBPARTITION P_SE_LOW VALUES LESS THAN (1000)
  , SUBPARTITION P_SE_AVERAGE VALUES LESS THAN (10000)
  , SUBPARTITION P_SE_HIGH VALUES LESS THAN (100000)
  , SUBPARTITION P_SE_EXTRAORDINARY VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_NORTHCENTRAL VALUES ('SD', 'WI')
  ( SUBPARTITION P_NC_LOW VALUES LESS THAN (1000)
  , SUBPARTITION P_NC_AVERAGE VALUES LESS THAN (10000)
  , SUBPARTITION P_NC_HIGH VALUES LESS THAN (100000)
  , SUBPARTITION P_NC_EXTRAORDINARY VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_SOUTHCENTRAL VALUES ('OK', 'TX')
  ( SUBPARTITION P_SC_LOW VALUES LESS THAN (1000)
  , SUBPARTITION P_SC_AVERAGE VALUES LESS THAN (10000)
  , SUBPARTITION P_SC_HIGH VALUES LESS THAN (100000)
  , SUBPARTITION P_SC_EXTRAORDINARY VALUES LESS THAN (MAXVALUE)
  )
) ENABLE ROW MOVEMENT;

-- RANG-LIST PARTITION
CREATE TABLE QUARTERLY_RANGE_LIST_PART (
    DEPTNO NUMBER,
    ITEM_NO VARCHAR2(20),
    TXN_DATE DATE,
    TXN_AMOUNT NUMBER,
    STATE VARCHAR2(2)
)
    PARTITION BY RANGE (TXN_DATE)
SUBPARTITION BY LIST (STATE)
      (PARTITION Q1_1999 VALUES LESS THAN (TO_DATE('1-APR-1999','DD-MON-YYYY'))
         (SUBPARTITION Q1_1999_NORTHWEST VALUES ('OR', 'WA'),
          SUBPARTITION Q1_1999_SOUTHWEST VALUES ('AZ', 'UT', 'NM'),
          SUBPARTITION Q1_1999_NORTHEAST VALUES ('NY', 'VM', 'NJ'),
          SUBPARTITION Q1_1999_SOUTHEAST VALUES ('FL', 'GA'),
          SUBPARTITION Q1_1999_NORTHCENTRAL VALUES ('SD', 'WI'),
          SUBPARTITION Q1_1999_SOUTHCENTRAL VALUES ('OK', 'TX')
         ),
       PARTITION Q2_1999 VALUES LESS THAN ( TO_DATE('1-JUL-1999','DD-MON-YYYY'))
         (SUBPARTITION Q2_1999_NORTHWEST VALUES ('OR', 'WA'),
          SUBPARTITION Q2_1999_SOUTHWEST VALUES ('AZ', 'UT', 'NM'),
          SUBPARTITION Q2_1999_NORTHEAST VALUES ('NY', 'VM', 'NJ'),
          SUBPARTITION Q2_1999_SOUTHEAST VALUES ('FL', 'GA'),
          SUBPARTITION Q2_1999_NORTHCENTRAL VALUES ('SD', 'WI'),
          SUBPARTITION Q2_1999_SOUTHCENTRAL VALUES ('OK', 'TX')
         ),
       PARTITION Q3_1999 VALUES LESS THAN (TO_DATE('1-OCT-1999','DD-MON-YYYY'))
         (SUBPARTITION Q3_1999_NORTHWEST VALUES ('OR', 'WA'),
          SUBPARTITION Q3_1999_SOUTHWEST VALUES ('AZ', 'UT', 'NM'),
          SUBPARTITION Q3_1999_NORTHEAST VALUES ('NY', 'VM', 'NJ'),
          SUBPARTITION Q3_1999_SOUTHEAST VALUES ('FL', 'GA'),
          SUBPARTITION Q3_1999_NORTHCENTRAL VALUES ('SD', 'WI'),
          SUBPARTITION Q3_1999_SOUTHCENTRAL VALUES ('OK', 'TX')
         ),
       PARTITION Q4_1999 VALUES LESS THAN ( TO_DATE('1-JAN-2000','DD-MON-YYYY'))
         (SUBPARTITION Q4_1999_NORTHWEST VALUES ('OR', 'WA'),
          SUBPARTITION Q4_1999_SOUTHWEST VALUES ('AZ', 'UT', 'NM'),
          SUBPARTITION Q4_1999_NORTHEAST VALUES ('NY', 'VM', 'NJ'),
          SUBPARTITION Q4_1999_SOUTHEAST VALUES ('FL', 'GA'),
          SUBPARTITION Q4_1999_NORTHCENTRAL VALUES ('SD', 'WI'),
          SUBPARTITION Q4_1999_SOUTHCENTRAL VALUES ('OK', 'TX')
         )
      );

-- RANGE-RANGE PARTITION
CREATE TABLE SHIP_RANGE_RANGE_PART (
    ORDER_ID      NUMBER NOT NULL,
    ORDER_DATE    DATE NOT NULL,
    DELIVERY_DATE DATE NOT NULL,
    CUSTOMER_ID   NUMBER NOT NULL,
    SALES_AMOUNT  NUMBER NOT NULL
)
    PARTITION BY RANGE (ORDER_DATE)
SUBPARTITION BY RANGE (DELIVERY_DATE)
( PARTITION P_2006_JUL VALUES LESS THAN (TO_DATE('01-AUG-2006','DD-MON-YYYY'))
  ( SUBPARTITION P06_JUL_E VALUES LESS THAN (TO_DATE('15-AUG-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_JUL_A VALUES LESS THAN (TO_DATE('01-SEP-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_JUL_L VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_2006_AUG VALUES LESS THAN (TO_DATE('01-SEP-2006','DD-MON-YYYY'))
  ( SUBPARTITION P06_AUG_E VALUES LESS THAN (TO_DATE('15-SEP-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_AUG_A VALUES LESS THAN (TO_DATE('01-OCT-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_AUG_L VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_2006_SEP VALUES LESS THAN (TO_DATE('01-OCT-2006','DD-MON-YYYY'))
  ( SUBPARTITION P06_SEP_E VALUES LESS THAN (TO_DATE('15-OCT-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_SEP_A VALUES LESS THAN (TO_DATE('01-NOV-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_SEP_L VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_2006_OCT VALUES LESS THAN (TO_DATE('01-NOV-2006','DD-MON-YYYY'))
  ( SUBPARTITION P06_OCT_E VALUES LESS THAN (TO_DATE('15-NOV-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_OCT_A VALUES LESS THAN (TO_DATE('01-DEC-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_OCT_L VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_2006_NOV VALUES LESS THAN (TO_DATE('01-DEC-2006','DD-MON-YYYY'))
  ( SUBPARTITION P06_NOV_E VALUES LESS THAN (TO_DATE('15-DEC-2006','DD-MON-YYYY'))
  , SUBPARTITION P06_NOV_A VALUES LESS THAN (TO_DATE('01-JAN-2007','DD-MON-YYYY'))
  , SUBPARTITION P06_NOV_L VALUES LESS THAN (MAXVALUE)
  )
, PARTITION P_2006_DEC VALUES LESS THAN (TO_DATE('01-JAN-2007','DD-MON-YYYY'))
  ( SUBPARTITION P06_DEC_E VALUES LESS THAN (TO_DATE('15-JAN-2007','DD-MON-YYYY'))
  , SUBPARTITION P06_DEC_A VALUES LESS THAN (TO_DATE('01-FEB-2007','DD-MON-YYYY'))
  , SUBPARTITION P06_DEC_L VALUES LESS THAN (MAXVALUE)
  )
);


-- RANGE-HASH PARTITION
CREATE TABLE EMPLOYEES_RANGE_HASH_PART (
    DEPARTMENT_ID NUMBER(4) NOT NULL,
    LAST_NAME VARCHAR2(25),
    JOB_ID VARCHAR2(10)
)
    PARTITION BY RANGE(DEPARTMENT_ID) SUBPARTITION BY HASH(LAST_NAME)
     SUBPARTITION TEMPLATE
         (SUBPARTITION A,
          SUBPARTITION B,
          SUBPARTITION C,
          SUBPARTITION D
         )
    (PARTITION P1 VALUES LESS THAN (1000),
     PARTITION P2 VALUES LESS THAN (2000),
     PARTITION P3 VALUES LESS THAN (MAXVALUE)
    );

-- RANGE-LIST PARTITION
CREATE TABLE STRIPE_RANGE_LIST_PART (
    DEPTNO NUMBER,
    ITEM_NO VARCHAR2(20),
    TXN_DATE DATE,
    TXN_AMOUNT NUMBER,
    STATE VARCHAR2(2)
)
    PARTITION BY RANGE (TXN_DATE)
   SUBPARTITION BY LIST (STATE)
   SUBPARTITION TEMPLATE
      (SUBPARTITION NORTHWEST VALUES ('OR', 'WA'),
       SUBPARTITION SOUTHWEST VALUES ('AZ', 'UT', 'NM'),
       SUBPARTITION NORTHEAST VALUES ('NY', 'VM', 'NJ'),
       SUBPARTITION SOUTHEAST VALUES ('FL', 'GA'),
       SUBPARTITION MIDWEST VALUES ('SD', 'WI'),
       SUBPARTITION SOUTH VALUES ('AL', 'AK'),
       SUBPARTITION OTHERS VALUES (DEFAULT )
      )
  (PARTITION Q1_1999 VALUES LESS THAN ( TO_DATE('01-APR-1999','DD-MON-YYYY')),
   PARTITION Q2_1999 VALUES LESS THAN ( TO_DATE('01-JUL-1999','DD-MON-YYYY')),
   PARTITION Q3_1999 VALUES LESS THAN ( TO_DATE('01-OCT-1999','DD-MON-YYYY')),
   PARTITION Q4_1999 VALUES LESS THAN ( TO_DATE('1-JAN-2000','DD-MON-YYYY'))
  );