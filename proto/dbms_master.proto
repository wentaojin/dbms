syntax = "proto3";
package proto;
option go_package = "proto/pb";

import "google/api/annotations.proto";
import "response.proto";

service Master {
  rpc UpsertDatabase(UpsertDatabaseRequest) returns (UpsertDatabaseResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/database"
      body: "*"
    };
  }
  rpc DeleteDatabase(DeleteDatabaseRequest) returns (DeleteDatabaseResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/database"
      body: "*"
    };
  }
  rpc ShowDatabase(ShowDatabaseRequest) returns (ShowDatabaseResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/database"
      body: "*"
    };
  }
  rpc UpsertDatasource(UpsertDatasourceRequest) returns (UpsertDatasourceResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/datasource"
      body: "*"
    };
  }
  rpc DeleteDatasource(DeleteDatasourceRequest) returns (DeleteDatasourceResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/datasource"
      body: "*"
    };
  }
  rpc ShowDatasource(ShowDatasourceRequest) returns (ShowDatasourceResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/datasource"
      body: "*"
    };
  }
  rpc UpsertStructMigrateTask(UpsertStructMigrateTaskRequest) returns (UpsertStructMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/structMigrateTask"
      body: "*"
    };
  }
  rpc DeleteStructMigrateTask(DeleteStructMigrateTaskRequest) returns (DeleteStructMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/structMigrateTask"
      body: "*"
    };
  }
  rpc ShowStructMigrateTask(ShowStructMigrateTaskRequest) returns (ShowStructMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/structMigrateTask"
      body: "*"
    };
  }
  rpc UpsertDataMigrateTask(UpsertDataMigrateTaskRequest) returns (UpsertDataMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/dataMigrateTask"
      body: "*"
    };
  }
  rpc DeleteDataMigrateTask(DeleteDataMigrateTaskRequest) returns (DeleteDataMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/dataMigrateTask"
      body: "*"
    };
  }
  rpc ShowDataMigrateTask(ShowDataMigrateTaskRequest) returns (ShowDataMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/dataMigrateTask"
      body: "*"
    };
  }
  rpc UpsertSqlMigrateTask(UpsertSqlMigrateTaskRequest) returns (UpsertSqlMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/sqlMigrateTask"
      body: "*"
    };
  }
  rpc DeleteSqlMigrateTask(DeleteSqlMigrateTaskRequest) returns (DeleteSqlMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/sqlMigrateTask"
      body: "*"
    };
  }
  rpc ShowSqlMigrateTask(ShowSqlMigrateTaskRequest) returns (ShowSqlMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/sqlMigrateTask"
      body: "*"
    };
  }
  rpc OperateTask (OperateTaskRequest) returns (OperateTaskResponse) {
    option (google.api.http) = {
      put: "/apis/v1alpha1/task"
      body: "*"
    };
  }
}

/*
 消息结构体
 */
message UpsertDatabaseRequest{
  Database database = 1;
}
message UpsertDatabaseResponse{
  Response response = 1;
}

message DeleteDatabaseRequest{}
message DeleteDatabaseResponse{
  Response response = 1;
}

message ShowDatabaseRequest{}
message ShowDatabaseResponse{
  Response response = 1;
}

message UpsertDatasourceRequest{
  repeated Datasource datasource = 1;
}
message UpsertDatasourceResponse{
  Response response = 1;
}

message DeleteDatasourceRequest{
  repeated string datasourceName = 2;
}
message DeleteDatasourceResponse{
  Response response = 1;
}

message ShowDatasourceRequest{
  string datasourceName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowDatasourceResponse{
  Response response = 1;
}

message UpsertStructMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  SchemaRouteRule schemaRouteRule = 6;
  StructMigrateParam structMigrateParam = 7;
  StructMigrateRule structMigrateRule = 8;
}
message UpsertStructMigrateTaskResponse{
  Response response = 1;
}

message DeleteStructMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteStructMigrateTaskResponse{
  Response response = 1;
}

message ShowStructMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowStructMigrateTaskResponse{
  Response response = 1;
}

message UpsertDataMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  SchemaRouteRule schemaRouteRule = 6;
  StatementMigrateParam statementMigrateParam = 8;
}
message UpsertDataMigrateTaskResponse{
  Response response = 1;
}

message DeleteDataMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteDataMigrateTaskResponse{
  Response response = 1;
}

message ShowDataMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowDataMigrateTaskResponse{
  Response response = 1;
}

message UpsertSqlMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  repeated SqlMigrateRule SqlMigrateRules = 6;
  SqlMigrateParam sqlMigrateParam = 7;
}
message UpsertSqlMigrateTaskResponse{
  Response response = 1;
}

message DeleteSqlMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteSqlMigrateTaskResponse{
  Response response = 1;
}

message ShowSqlMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowSqlMigrateTaskResponse{
  Response response = 1;
}

message OperateTaskRequest {
  string operate = 1;
  string taskName = 2;
  string express = 3;
}
message OperateTaskResponse {
 Response response = 1;
}

/*
  通用结构体
 */
message Database {
  string username = 1;
  string password = 2;
  string host = 3;
  uint64 port = 4;
  string schema = 5;
  uint64 slowThreshold = 6;
}

message Datasource {
  string datasourceName = 1;
  string dbType = 2;
  string username = 3;
  string password = 4;
  string host = 5;
  uint64 port = 6;
  string connectCharset = 7;
  string connectParams = 8;
  string connectStatus = 9;

  string serviceName = 10;
  string pdbName = 11;
  string comment = 12;
}

message SchemaRouteRule{
  string schemaNameS = 1;
  string schemaNameT = 2;
  repeated string includeTableS = 3;
  repeated string excludeTableS = 4;

  repeated TableRouteRule tableRouteRules = 5;
  repeated DataMigrateRule DataMigrateRules = 6;
}

message CaseFieldRule {
  string caseFieldRuleS = 1;
  string caseFieldRuleT = 2;
}

message TableRouteRule {
  string tableNameS = 1;
  string tableNameT = 2;
  map<string,string> columnRouteRules = 3;
}

message StructMigrateParam {
  uint64 migrateThread = 1;
  bool createIfNotExist = 2;
  bool directWrite = 3;
  string outputDir = 4;
}

message StructMigrateRule {
  repeated TaskStructRule taskStructRules = 1;
  repeated SchemaStructRule schemaStructRules = 2;
  repeated TableStructRule tableStructRules = 3;
  repeated ColumnStructRule columnStructRules = 4;
  repeated TableAttrsRule tableAttrsRules = 5;
}

message TaskStructRule {
  string columnTypeS = 1;
  string columnTypeT = 2;
  string TableAttrOption = 3;
  string DefaultValueS = 4;
  string DefaultValueT = 5;
}

message SchemaStructRule {
  string schemaNameS = 1;
  string columnTypeS = 2;
  string columnTypeT = 3;
  string defaultValueS = 4;
  string defaultValueT = 5;
}

message TableStructRule {
  string schemaNameS = 1;
  string tableNameS = 2;
  string columnTypeS = 3;
  string columnTypeT = 4;
  string defaultValueS = 5;
  string defaultValueT = 6;
}

message ColumnStructRule {
  string schemaNameS = 1;
  string tableNameS = 2;
  string columnNameS = 3;
  string columnTypeS = 4;
  string columnTypeT = 5;
  string defaultValueS = 6;
  string defaultValueT = 7;
}

message TableAttrsRule {
  string schemaNameS = 1;
  repeated string tableNamesS = 2;
  string tableAttrsT = 3;
}

message DataMigrateRule {
  string tableNameS = 1;
  bool enableChunkStrategy = 2;
  string whereRange = 3;
  string sqlHintS = 4;
}

message StatementMigrateParam {
  uint64 tableThread = 1;
  uint64 BatchSize = 2;
  uint64 ChunkSize = 3;
  uint64 sqlThreadS = 4;
  string sqlHintS = 5;
  uint64 sqlThreadT = 6;
  string sqlHintT = 7;
  uint64 callTimeout = 8;
  bool enableCheckpoint = 9;
  bool enableConsistentRead = 10;
}

message SqlMigrateRule {
  string sqlQueryS = 1;
  string schemaNameT = 2;
  string tableNameT = 3;
  string sqlHintT = 4;
  map<string,string> columnRouteRules = 5;
}

message SqlMigrateParam {
  uint64 BatchSize = 1;
  uint64 sqlThreadS = 2;
  uint64 sqlThreadT = 3;
  string sqlHintT = 4;
  uint64 callTimeout = 5;
  bool enableConsistentRead = 6;
}