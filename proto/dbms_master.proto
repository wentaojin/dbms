syntax = "proto3";
package proto;
option go_package = "proto/pb";

import "google/api/annotations.proto";
import "response.proto";

service Master {
  rpc UpsertDatabase(UpsertDatabaseRequest) returns (UpsertDatabaseResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/database"
      body: "*"
    };
  }
  rpc DeleteDatabase(DeleteDatabaseRequest) returns (DeleteDatabaseResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/database"
      body: "*"
    };
  }
  rpc ShowDatabase(ShowDatabaseRequest) returns (ShowDatabaseResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/database"
      body: "*"
    };
  }
  rpc UpsertDatasource(UpsertDatasourceRequest) returns (UpsertDatasourceResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/datasource"
      body: "*"
    };
  }
  rpc DeleteDatasource(DeleteDatasourceRequest) returns (DeleteDatasourceResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/datasource"
      body: "*"
    };
  }
  rpc ShowDatasource(ShowDatasourceRequest) returns (ShowDatasourceResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/datasource"
      body: "*"
    };
  }
  rpc UpsertAssessMigrateTask(UpsertAssessMigrateTaskRequest) returns (UpsertAssessMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/assessMigrateTask"
      body: "*"
    };
  }
  rpc DeleteAssessMigrateTask(DeleteAssessMigrateTaskRequest) returns (DeleteAssessMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/assessMigrateTask"
      body: "*"
    };
  }
  rpc ShowAssessMigrateTask(ShowAssessMigrateTaskRequest) returns (ShowAssessMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/assessMigrateTask"
      body: "*"
    };
  }
  rpc UpsertStructMigrateTask(UpsertStructMigrateTaskRequest) returns (UpsertStructMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/structMigrateTask"
      body: "*"
    };
  }
  rpc DeleteStructMigrateTask(DeleteStructMigrateTaskRequest) returns (DeleteStructMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/structMigrateTask"
      body: "*"
    };
  }
  rpc ShowStructMigrateTask(ShowStructMigrateTaskRequest) returns (ShowStructMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/structMigrateTask"
      body: "*"
    };
  }
  rpc UpsertStructCompareTask(UpsertStructCompareTaskRequest) returns (UpsertStructCompareTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/structCompareTask"
      body: "*"
    };
  }
  rpc DeleteStructCompareTask(DeleteStructCompareTaskRequest) returns (DeleteStructCompareTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/structCompareTask"
      body: "*"
    };
  }
  rpc ShowStructCompareTask(ShowStructCompareTaskRequest) returns (ShowStructCompareTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/structCompareTask"
      body: "*"
    };
  }
  rpc UpsertStmtMigrateTask(UpsertStmtMigrateTaskRequest) returns (UpsertStmtMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/dataMigrateTask"
      body: "*"
    };
  }
  rpc DeleteStmtMigrateTask(DeleteStmtMigrateTaskRequest) returns (DeleteStmtMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/dataMigrateTask"
      body: "*"
    };
  }
  rpc ShowStmtMigrateTask(ShowStmtMigrateTaskRequest) returns (ShowStmtMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/dataMigrateTask"
      body: "*"
    };
  }
  rpc UpsertSqlMigrateTask(UpsertSqlMigrateTaskRequest) returns (UpsertSqlMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/sqlMigrateTask"
      body: "*"
    };
  }
  rpc DeleteSqlMigrateTask(DeleteSqlMigrateTaskRequest) returns (DeleteSqlMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/sqlMigrateTask"
      body: "*"
    };
  }
  rpc ShowSqlMigrateTask(ShowSqlMigrateTaskRequest) returns (ShowSqlMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/sqlMigrateTask"
      body: "*"
    };
  }
  rpc UpsertCsvMigrateTask(UpsertCsvMigrateTaskRequest) returns (UpsertCsvMigrateTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/csvMigrateTask"
      body: "*"
    };
  }
  rpc DeleteCsvMigrateTask(DeleteCsvMigrateTaskRequest) returns (DeleteCsvMigrateTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/csvMigrateTask"
      body: "*"
    };
  }
  rpc ShowCsvMigrateTask(ShowCsvMigrateTaskRequest) returns (ShowCsvMigrateTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/csvMigrateTask"
      body: "*"
    };
  }
  rpc UpsertDataCompareTask(UpsertDataCompareTaskRequest) returns (UpsertDataCompareTaskResponse){
    option (google.api.http) = {
      put: "/apis/v1alpha1/dataCompareTask"
      body: "*"
    };
  }
  rpc DeleteDataCompareTask(DeleteDataCompareTaskRequest) returns (DeleteDataCompareTaskResponse){
    option (google.api.http) = {
      delete: "/apis/v1alpha1/dataCompareTask"
      body: "*"
    };
  }
  rpc ShowDataCompareTask(ShowDataCompareTaskRequest) returns (ShowDataCompareTaskResponse){
    option (google.api.http) = {
      post: "/apis/v1alpha1/dataCompareTask"
      body: "*"
    };
  }
  rpc OperateTask (OperateTaskRequest) returns (OperateTaskResponse) {
    option (google.api.http) = {
      put: "/apis/v1alpha1/task"
      body: "*"
    };
  }
}

/*
 消息结构体
 */
message UpsertDatabaseRequest{
  Database database = 1;
}
message UpsertDatabaseResponse{
  Response response = 1;
}

message DeleteDatabaseRequest{}
message DeleteDatabaseResponse{
  Response response = 1;
}

message ShowDatabaseRequest{}
message ShowDatabaseResponse{
  Response response = 1;
}

message UpsertDatasourceRequest{
  repeated Datasource datasource = 1;
}
message UpsertDatasourceResponse{
  Response response = 1;
}

message DeleteDatasourceRequest{
  repeated string datasourceName = 2;
}
message DeleteDatasourceResponse{
  Response response = 1;
}

message ShowDatasourceRequest{
  string datasourceName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowDatasourceResponse{
  Response response = 1;
}

message UpsertAssessMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  AssessMigrateParam assessMigrateParam = 5;
}
message UpsertAssessMigrateTaskResponse{
  Response response = 1;
}

message DeleteAssessMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteAssessMigrateTaskResponse{
  Response response = 1;
}

message ShowAssessMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowAssessMigrateTaskResponse{
  Response response = 1;
}

message UpsertStructMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  SchemaRouteRule schemaRouteRule = 6;
  StructMigrateParam structMigrateParam = 7;
  StructMigrateRule structMigrateRule = 8;
}
message UpsertStructMigrateTaskResponse{
  Response response = 1;
}

message DeleteStructMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteStructMigrateTaskResponse{
  Response response = 1;
}

message ShowStructMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowStructMigrateTaskResponse{
  Response response = 1;
}

message UpsertStructCompareTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  SchemaRouteRule schemaRouteRule = 6;
  StructCompareParam structCompareParam = 7;
  StructCompareRule structCompareRule = 8;
}
message UpsertStructCompareTaskResponse{
  Response response = 1;
}

message DeleteStructCompareTaskRequest{
  repeated string taskName = 1;
}
message DeleteStructCompareTaskResponse{
  Response response = 1;
}

message ShowStructCompareTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowStructCompareTaskResponse{
  Response response = 1;
}

message UpsertStmtMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  SchemaRouteRule schemaRouteRule = 6;
  repeated DataMigrateRule DataMigrateRules = 7;
  StatementMigrateParam statementMigrateParam = 8;
}
message UpsertStmtMigrateTaskResponse{
  Response response = 1;
}

message DeleteStmtMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteStmtMigrateTaskResponse{
  Response response = 1;
}

message ShowStmtMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowStmtMigrateTaskResponse{
  Response response = 1;
}

message UpsertSqlMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  repeated SqlMigrateRule SqlMigrateRules = 6;
  SqlMigrateParam sqlMigrateParam = 7;
}
message UpsertSqlMigrateTaskResponse{
  Response response = 1;
}

message DeleteSqlMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteSqlMigrateTaskResponse{
  Response response = 1;
}

message ShowSqlMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowSqlMigrateTaskResponse{
  Response response = 1;
}

message UpsertCsvMigrateTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  SchemaRouteRule schemaRouteRule = 6;
  repeated DataMigrateRule DataMigrateRules = 7;
  CsvMigrateParam CsvMigrateParam = 8;
}
message UpsertCsvMigrateTaskResponse{
  Response response = 1;
}

message DeleteCsvMigrateTaskRequest{
  repeated string taskName = 1;
}
message DeleteCsvMigrateTaskResponse{
  Response response = 1;
}

message ShowCsvMigrateTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowCsvMigrateTaskResponse{
  Response response = 1;
}

message UpsertDataCompareTaskRequest{
  string taskName = 1;
  string datasourceNameS = 2;
  string datasourceNameT = 3;
  string comment = 4;

  CaseFieldRule caseFieldRule = 5;
  SchemaRouteRule schemaRouteRule = 6;
  repeated DataCompareRule DataCompareRules = 7;
  DataCompareParam DataCompareParam = 8;
}
message UpsertDataCompareTaskResponse{
  Response response = 1;
}

message DeleteDataCompareTaskRequest{
  repeated string taskName = 1;
}
message DeleteDataCompareTaskResponse{
  Response response = 1;
}

message ShowDataCompareTaskRequest{
  string taskName = 1;
  uint64 page = 2;
  uint64 pageSize = 3;
}
message ShowDataCompareTaskResponse{
  Response response = 1;
}

message OperateTaskRequest {
  string operate = 1;
  string taskName = 2;
  string express = 3;
}
message OperateTaskResponse {
 Response response = 1;
}

/*
  通用结构体
 */
message Database {
  string username = 1;
  string password = 2;
  string host = 3;
  uint64 port = 4;
  string schema = 5;
  uint64 slowThreshold = 6;
}

message Datasource {
  string datasourceName = 1;
  string dbType = 2;
  string username = 3;
  string password = 4;
  string host = 5;
  uint64 port = 6;
  string connectCharset = 7;
  string connectParams = 8;
  string connectStatus = 9;

  string serviceName = 10;
  string pdbName = 11;
  string comment = 12;
}

message SchemaRouteRule{
  string schemaNameS = 1;
  string schemaNameT = 2;
  repeated string includeTableS = 3;
  repeated string excludeTableS = 4;

  repeated TableRouteRule tableRouteRules = 5;
}

message CaseFieldRule {
  string caseFieldRuleS = 1;
  string caseFieldRuleT = 2;
}

message TableRouteRule {
  string tableNameS = 1;
  string tableNameT = 2;
  map<string,string> columnRouteRules = 3;
}

message AssessMigrateParam {
  string caseFieldRuleS = 1;
  string schemaNameS = 2;
}

message StructMigrateParam {
  uint64 migrateThread = 1;
  bool createIfNotExist = 2;
  bool enableDirectCreate = 3;
}

message StructMigrateRule {
  repeated TaskStructRule taskStructRules = 1;
  repeated SchemaStructRule schemaStructRules = 2;
  repeated TableStructRule tableStructRules = 3;
  repeated ColumnStructRule columnStructRules = 4;
  repeated TableAttrsRule tableAttrsRules = 5;
}

message StructCompareParam {
  uint64 compareThread = 1;
  bool enableCheckpoint = 2;
}

message StructCompareRule {
  repeated TaskStructRule taskStructRules = 1;
  repeated SchemaStructRule schemaStructRules = 2;
  repeated TableStructRule tableStructRules = 3;
  repeated ColumnStructRule columnStructRules = 4;
}

message TaskStructRule {
  string columnTypeS = 1;
  string columnTypeT = 2;
  string TableAttrOption = 3;
  string DefaultValueS = 4;
  string DefaultValueT = 5;
}

message SchemaStructRule {
  string schemaNameS = 1;
  string columnTypeS = 2;
  string columnTypeT = 3;
  string defaultValueS = 4;
  string defaultValueT = 5;
}

message TableStructRule {
  string schemaNameS = 1;
  string tableNameS = 2;
  string columnTypeS = 3;
  string columnTypeT = 4;
  string defaultValueS = 5;
  string defaultValueT = 6;
}

message ColumnStructRule {
  string schemaNameS = 1;
  string tableNameS = 2;
  string columnNameS = 3;
  string columnTypeS = 4;
  string columnTypeT = 5;
  string defaultValueS = 6;
  string defaultValueT = 7;
}

message TableAttrsRule {
  string schemaNameS = 1;
  repeated string tableNamesS = 2;
  string tableAttrsT = 3;
}

message DataMigrateRule {
  string tableNameS = 1;
  bool enableChunkStrategy = 2;
  string whereRange = 3;
  string sqlHintS = 4;
}

message StatementMigrateParam {
  uint64 tableThread = 1;
  uint64 BatchSize = 2;
  uint64 ChunkSize = 3;
  uint64 sqlThreadS = 4;
  string sqlHintS = 5;
  uint64 sqlThreadT = 6;
  string sqlHintT = 7;
  uint64 callTimeout = 8;
  bool enableCheckpoint = 9;
  bool enableConsistentRead = 10;
}

message CsvMigrateParam{
  uint64 tableThread = 1;
  uint64 BatchSize = 2;
  bool header = 3;
  string diskUsageFactor = 4;
  string separator = 5;
  string terminator = 6;
  string dataCharsetT = 7;
  string delimiter = 8;
  string nullValue = 9;
  bool escapeBackslash = 10;
  uint64 chunkSize = 11;
  string outputDir = 12;
  uint64 sqlThreadS = 13;
  string sqlHintS = 14;
  uint64 callTimeout = 15;
  bool enableCheckpoint = 16;
  bool enableConsistentRead = 17;
}

message DataCompareRule {
  string tableNameS = 1;
  string compareField = 2;
  string compareRange = 3;
  repeated string ignoreFields = 4;
}

message DataCompareParam{
  uint64 tableThread = 1;
  uint64 BatchSize = 2;
  uint64 sqlThread = 3;
  string sqlHintS = 4;
  string sqlHintT = 5;
  uint64 callTimeout = 6;
  bool enableCheckpoint = 7;
  bool enableConsistentRead = 8;
  bool OnlyCompareRow = 9;
}

message SqlMigrateRule {
  string sqlQueryS = 1;
  string schemaNameT = 2;
  string tableNameT = 3;
  string sqlHintT = 4;
  map<string,string> columnRouteRules = 5;
}

message SqlMigrateParam {
  uint64 BatchSize = 1;
  uint64 sqlThreadS = 2;
  uint64 sqlThreadT = 3;
  string sqlHintT = 4;
  uint64 callTimeout = 5;
  bool enableConsistentRead = 6;
}