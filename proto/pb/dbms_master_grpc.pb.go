// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: dbms_master.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master_UpsertDatabase_FullMethodName          = "/proto.Master/UpsertDatabase"
	Master_DeleteDatabase_FullMethodName          = "/proto.Master/DeleteDatabase"
	Master_ShowDatabase_FullMethodName            = "/proto.Master/ShowDatabase"
	Master_UpsertDatasource_FullMethodName        = "/proto.Master/UpsertDatasource"
	Master_DeleteDatasource_FullMethodName        = "/proto.Master/DeleteDatasource"
	Master_ShowDatasource_FullMethodName          = "/proto.Master/ShowDatasource"
	Master_UpsertAssessMigrateTask_FullMethodName = "/proto.Master/UpsertAssessMigrateTask"
	Master_DeleteAssessMigrateTask_FullMethodName = "/proto.Master/DeleteAssessMigrateTask"
	Master_ShowAssessMigrateTask_FullMethodName   = "/proto.Master/ShowAssessMigrateTask"
	Master_UpsertStructMigrateTask_FullMethodName = "/proto.Master/UpsertStructMigrateTask"
	Master_DeleteStructMigrateTask_FullMethodName = "/proto.Master/DeleteStructMigrateTask"
	Master_ShowStructMigrateTask_FullMethodName   = "/proto.Master/ShowStructMigrateTask"
	Master_UpsertStructCompareTask_FullMethodName = "/proto.Master/UpsertStructCompareTask"
	Master_DeleteStructCompareTask_FullMethodName = "/proto.Master/DeleteStructCompareTask"
	Master_ShowStructCompareTask_FullMethodName   = "/proto.Master/ShowStructCompareTask"
	Master_UpsertStmtMigrateTask_FullMethodName   = "/proto.Master/UpsertStmtMigrateTask"
	Master_DeleteStmtMigrateTask_FullMethodName   = "/proto.Master/DeleteStmtMigrateTask"
	Master_ShowStmtMigrateTask_FullMethodName     = "/proto.Master/ShowStmtMigrateTask"
	Master_UpsertSqlMigrateTask_FullMethodName    = "/proto.Master/UpsertSqlMigrateTask"
	Master_DeleteSqlMigrateTask_FullMethodName    = "/proto.Master/DeleteSqlMigrateTask"
	Master_ShowSqlMigrateTask_FullMethodName      = "/proto.Master/ShowSqlMigrateTask"
	Master_UpsertCsvMigrateTask_FullMethodName    = "/proto.Master/UpsertCsvMigrateTask"
	Master_DeleteCsvMigrateTask_FullMethodName    = "/proto.Master/DeleteCsvMigrateTask"
	Master_ShowCsvMigrateTask_FullMethodName      = "/proto.Master/ShowCsvMigrateTask"
	Master_UpsertDataCompareTask_FullMethodName   = "/proto.Master/UpsertDataCompareTask"
	Master_DeleteDataCompareTask_FullMethodName   = "/proto.Master/DeleteDataCompareTask"
	Master_ShowDataCompareTask_FullMethodName     = "/proto.Master/ShowDataCompareTask"
	Master_UpsertDataScanTask_FullMethodName      = "/proto.Master/UpsertDataScanTask"
	Master_DeleteDataScanTask_FullMethodName      = "/proto.Master/DeleteDataScanTask"
	Master_ShowDataScanTask_FullMethodName        = "/proto.Master/ShowDataScanTask"
	Master_UpsertCdcConsumeTask_FullMethodName    = "/proto.Master/UpsertCdcConsumeTask"
	Master_DeleteCdcConsumeTask_FullMethodName    = "/proto.Master/DeleteCdcConsumeTask"
	Master_ShowCdcConsumeTask_FullMethodName      = "/proto.Master/ShowCdcConsumeTask"
	Master_OperateTask_FullMethodName             = "/proto.Master/OperateTask"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	UpsertDatabase(ctx context.Context, in *UpsertDatabaseRequest, opts ...grpc.CallOption) (*UpsertDatabaseResponse, error)
	DeleteDatabase(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*DeleteDatabaseResponse, error)
	ShowDatabase(ctx context.Context, in *ShowDatabaseRequest, opts ...grpc.CallOption) (*ShowDatabaseResponse, error)
	UpsertDatasource(ctx context.Context, in *UpsertDatasourceRequest, opts ...grpc.CallOption) (*UpsertDatasourceResponse, error)
	DeleteDatasource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceResponse, error)
	ShowDatasource(ctx context.Context, in *ShowDatasourceRequest, opts ...grpc.CallOption) (*ShowDatasourceResponse, error)
	UpsertAssessMigrateTask(ctx context.Context, in *UpsertAssessMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertAssessMigrateTaskResponse, error)
	DeleteAssessMigrateTask(ctx context.Context, in *DeleteAssessMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteAssessMigrateTaskResponse, error)
	ShowAssessMigrateTask(ctx context.Context, in *ShowAssessMigrateTaskRequest, opts ...grpc.CallOption) (*ShowAssessMigrateTaskResponse, error)
	UpsertStructMigrateTask(ctx context.Context, in *UpsertStructMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertStructMigrateTaskResponse, error)
	DeleteStructMigrateTask(ctx context.Context, in *DeleteStructMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteStructMigrateTaskResponse, error)
	ShowStructMigrateTask(ctx context.Context, in *ShowStructMigrateTaskRequest, opts ...grpc.CallOption) (*ShowStructMigrateTaskResponse, error)
	UpsertStructCompareTask(ctx context.Context, in *UpsertStructCompareTaskRequest, opts ...grpc.CallOption) (*UpsertStructCompareTaskResponse, error)
	DeleteStructCompareTask(ctx context.Context, in *DeleteStructCompareTaskRequest, opts ...grpc.CallOption) (*DeleteStructCompareTaskResponse, error)
	ShowStructCompareTask(ctx context.Context, in *ShowStructCompareTaskRequest, opts ...grpc.CallOption) (*ShowStructCompareTaskResponse, error)
	UpsertStmtMigrateTask(ctx context.Context, in *UpsertStmtMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertStmtMigrateTaskResponse, error)
	DeleteStmtMigrateTask(ctx context.Context, in *DeleteStmtMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteStmtMigrateTaskResponse, error)
	ShowStmtMigrateTask(ctx context.Context, in *ShowStmtMigrateTaskRequest, opts ...grpc.CallOption) (*ShowStmtMigrateTaskResponse, error)
	UpsertSqlMigrateTask(ctx context.Context, in *UpsertSqlMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertSqlMigrateTaskResponse, error)
	DeleteSqlMigrateTask(ctx context.Context, in *DeleteSqlMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteSqlMigrateTaskResponse, error)
	ShowSqlMigrateTask(ctx context.Context, in *ShowSqlMigrateTaskRequest, opts ...grpc.CallOption) (*ShowSqlMigrateTaskResponse, error)
	UpsertCsvMigrateTask(ctx context.Context, in *UpsertCsvMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertCsvMigrateTaskResponse, error)
	DeleteCsvMigrateTask(ctx context.Context, in *DeleteCsvMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteCsvMigrateTaskResponse, error)
	ShowCsvMigrateTask(ctx context.Context, in *ShowCsvMigrateTaskRequest, opts ...grpc.CallOption) (*ShowCsvMigrateTaskResponse, error)
	UpsertDataCompareTask(ctx context.Context, in *UpsertDataCompareTaskRequest, opts ...grpc.CallOption) (*UpsertDataCompareTaskResponse, error)
	DeleteDataCompareTask(ctx context.Context, in *DeleteDataCompareTaskRequest, opts ...grpc.CallOption) (*DeleteDataCompareTaskResponse, error)
	ShowDataCompareTask(ctx context.Context, in *ShowDataCompareTaskRequest, opts ...grpc.CallOption) (*ShowDataCompareTaskResponse, error)
	UpsertDataScanTask(ctx context.Context, in *UpsertDataScanTaskRequest, opts ...grpc.CallOption) (*UpsertDataScanTaskResponse, error)
	DeleteDataScanTask(ctx context.Context, in *DeleteDataScanTaskRequest, opts ...grpc.CallOption) (*DeleteDataScanTaskResponse, error)
	ShowDataScanTask(ctx context.Context, in *ShowDataScanTaskRequest, opts ...grpc.CallOption) (*ShowDataScanTaskResponse, error)
	UpsertCdcConsumeTask(ctx context.Context, in *UpsertCdcConsumeTaskRequest, opts ...grpc.CallOption) (*UpsertCdcConsumeTaskResponse, error)
	DeleteCdcConsumeTask(ctx context.Context, in *DeleteCdcConsumeTaskRequest, opts ...grpc.CallOption) (*DeleteCdcConsumeTaskResponse, error)
	ShowCdcConsumeTask(ctx context.Context, in *ShowCdcConsumeTaskRequest, opts ...grpc.CallOption) (*ShowCdcConsumeTaskResponse, error)
	OperateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*OperateTaskResponse, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) UpsertDatabase(ctx context.Context, in *UpsertDatabaseRequest, opts ...grpc.CallOption) (*UpsertDatabaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertDatabaseResponse)
	err := c.cc.Invoke(ctx, Master_UpsertDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteDatabase(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*DeleteDatabaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatabaseResponse)
	err := c.cc.Invoke(ctx, Master_DeleteDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowDatabase(ctx context.Context, in *ShowDatabaseRequest, opts ...grpc.CallOption) (*ShowDatabaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowDatabaseResponse)
	err := c.cc.Invoke(ctx, Master_ShowDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertDatasource(ctx context.Context, in *UpsertDatasourceRequest, opts ...grpc.CallOption) (*UpsertDatasourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertDatasourceResponse)
	err := c.cc.Invoke(ctx, Master_UpsertDatasource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteDatasource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatasourceResponse)
	err := c.cc.Invoke(ctx, Master_DeleteDatasource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowDatasource(ctx context.Context, in *ShowDatasourceRequest, opts ...grpc.CallOption) (*ShowDatasourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowDatasourceResponse)
	err := c.cc.Invoke(ctx, Master_ShowDatasource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertAssessMigrateTask(ctx context.Context, in *UpsertAssessMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertAssessMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertAssessMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertAssessMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteAssessMigrateTask(ctx context.Context, in *DeleteAssessMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteAssessMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAssessMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteAssessMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowAssessMigrateTask(ctx context.Context, in *ShowAssessMigrateTaskRequest, opts ...grpc.CallOption) (*ShowAssessMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowAssessMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowAssessMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertStructMigrateTask(ctx context.Context, in *UpsertStructMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertStructMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertStructMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertStructMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteStructMigrateTask(ctx context.Context, in *DeleteStructMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteStructMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStructMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteStructMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowStructMigrateTask(ctx context.Context, in *ShowStructMigrateTaskRequest, opts ...grpc.CallOption) (*ShowStructMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowStructMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowStructMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertStructCompareTask(ctx context.Context, in *UpsertStructCompareTaskRequest, opts ...grpc.CallOption) (*UpsertStructCompareTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertStructCompareTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertStructCompareTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteStructCompareTask(ctx context.Context, in *DeleteStructCompareTaskRequest, opts ...grpc.CallOption) (*DeleteStructCompareTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStructCompareTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteStructCompareTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowStructCompareTask(ctx context.Context, in *ShowStructCompareTaskRequest, opts ...grpc.CallOption) (*ShowStructCompareTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowStructCompareTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowStructCompareTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertStmtMigrateTask(ctx context.Context, in *UpsertStmtMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertStmtMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertStmtMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertStmtMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteStmtMigrateTask(ctx context.Context, in *DeleteStmtMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteStmtMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStmtMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteStmtMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowStmtMigrateTask(ctx context.Context, in *ShowStmtMigrateTaskRequest, opts ...grpc.CallOption) (*ShowStmtMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowStmtMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowStmtMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertSqlMigrateTask(ctx context.Context, in *UpsertSqlMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertSqlMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertSqlMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertSqlMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteSqlMigrateTask(ctx context.Context, in *DeleteSqlMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteSqlMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSqlMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteSqlMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowSqlMigrateTask(ctx context.Context, in *ShowSqlMigrateTaskRequest, opts ...grpc.CallOption) (*ShowSqlMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowSqlMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowSqlMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertCsvMigrateTask(ctx context.Context, in *UpsertCsvMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertCsvMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertCsvMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertCsvMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteCsvMigrateTask(ctx context.Context, in *DeleteCsvMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteCsvMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCsvMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteCsvMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowCsvMigrateTask(ctx context.Context, in *ShowCsvMigrateTaskRequest, opts ...grpc.CallOption) (*ShowCsvMigrateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowCsvMigrateTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowCsvMigrateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertDataCompareTask(ctx context.Context, in *UpsertDataCompareTaskRequest, opts ...grpc.CallOption) (*UpsertDataCompareTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertDataCompareTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertDataCompareTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteDataCompareTask(ctx context.Context, in *DeleteDataCompareTaskRequest, opts ...grpc.CallOption) (*DeleteDataCompareTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataCompareTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteDataCompareTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowDataCompareTask(ctx context.Context, in *ShowDataCompareTaskRequest, opts ...grpc.CallOption) (*ShowDataCompareTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowDataCompareTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowDataCompareTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertDataScanTask(ctx context.Context, in *UpsertDataScanTaskRequest, opts ...grpc.CallOption) (*UpsertDataScanTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertDataScanTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertDataScanTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteDataScanTask(ctx context.Context, in *DeleteDataScanTaskRequest, opts ...grpc.CallOption) (*DeleteDataScanTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataScanTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteDataScanTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowDataScanTask(ctx context.Context, in *ShowDataScanTaskRequest, opts ...grpc.CallOption) (*ShowDataScanTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowDataScanTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowDataScanTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertCdcConsumeTask(ctx context.Context, in *UpsertCdcConsumeTaskRequest, opts ...grpc.CallOption) (*UpsertCdcConsumeTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertCdcConsumeTaskResponse)
	err := c.cc.Invoke(ctx, Master_UpsertCdcConsumeTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteCdcConsumeTask(ctx context.Context, in *DeleteCdcConsumeTaskRequest, opts ...grpc.CallOption) (*DeleteCdcConsumeTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCdcConsumeTaskResponse)
	err := c.cc.Invoke(ctx, Master_DeleteCdcConsumeTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowCdcConsumeTask(ctx context.Context, in *ShowCdcConsumeTaskRequest, opts ...grpc.CallOption) (*ShowCdcConsumeTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowCdcConsumeTaskResponse)
	err := c.cc.Invoke(ctx, Master_ShowCdcConsumeTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) OperateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*OperateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperateTaskResponse)
	err := c.cc.Invoke(ctx, Master_OperateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility.
type MasterServer interface {
	UpsertDatabase(context.Context, *UpsertDatabaseRequest) (*UpsertDatabaseResponse, error)
	DeleteDatabase(context.Context, *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error)
	ShowDatabase(context.Context, *ShowDatabaseRequest) (*ShowDatabaseResponse, error)
	UpsertDatasource(context.Context, *UpsertDatasourceRequest) (*UpsertDatasourceResponse, error)
	DeleteDatasource(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceResponse, error)
	ShowDatasource(context.Context, *ShowDatasourceRequest) (*ShowDatasourceResponse, error)
	UpsertAssessMigrateTask(context.Context, *UpsertAssessMigrateTaskRequest) (*UpsertAssessMigrateTaskResponse, error)
	DeleteAssessMigrateTask(context.Context, *DeleteAssessMigrateTaskRequest) (*DeleteAssessMigrateTaskResponse, error)
	ShowAssessMigrateTask(context.Context, *ShowAssessMigrateTaskRequest) (*ShowAssessMigrateTaskResponse, error)
	UpsertStructMigrateTask(context.Context, *UpsertStructMigrateTaskRequest) (*UpsertStructMigrateTaskResponse, error)
	DeleteStructMigrateTask(context.Context, *DeleteStructMigrateTaskRequest) (*DeleteStructMigrateTaskResponse, error)
	ShowStructMigrateTask(context.Context, *ShowStructMigrateTaskRequest) (*ShowStructMigrateTaskResponse, error)
	UpsertStructCompareTask(context.Context, *UpsertStructCompareTaskRequest) (*UpsertStructCompareTaskResponse, error)
	DeleteStructCompareTask(context.Context, *DeleteStructCompareTaskRequest) (*DeleteStructCompareTaskResponse, error)
	ShowStructCompareTask(context.Context, *ShowStructCompareTaskRequest) (*ShowStructCompareTaskResponse, error)
	UpsertStmtMigrateTask(context.Context, *UpsertStmtMigrateTaskRequest) (*UpsertStmtMigrateTaskResponse, error)
	DeleteStmtMigrateTask(context.Context, *DeleteStmtMigrateTaskRequest) (*DeleteStmtMigrateTaskResponse, error)
	ShowStmtMigrateTask(context.Context, *ShowStmtMigrateTaskRequest) (*ShowStmtMigrateTaskResponse, error)
	UpsertSqlMigrateTask(context.Context, *UpsertSqlMigrateTaskRequest) (*UpsertSqlMigrateTaskResponse, error)
	DeleteSqlMigrateTask(context.Context, *DeleteSqlMigrateTaskRequest) (*DeleteSqlMigrateTaskResponse, error)
	ShowSqlMigrateTask(context.Context, *ShowSqlMigrateTaskRequest) (*ShowSqlMigrateTaskResponse, error)
	UpsertCsvMigrateTask(context.Context, *UpsertCsvMigrateTaskRequest) (*UpsertCsvMigrateTaskResponse, error)
	DeleteCsvMigrateTask(context.Context, *DeleteCsvMigrateTaskRequest) (*DeleteCsvMigrateTaskResponse, error)
	ShowCsvMigrateTask(context.Context, *ShowCsvMigrateTaskRequest) (*ShowCsvMigrateTaskResponse, error)
	UpsertDataCompareTask(context.Context, *UpsertDataCompareTaskRequest) (*UpsertDataCompareTaskResponse, error)
	DeleteDataCompareTask(context.Context, *DeleteDataCompareTaskRequest) (*DeleteDataCompareTaskResponse, error)
	ShowDataCompareTask(context.Context, *ShowDataCompareTaskRequest) (*ShowDataCompareTaskResponse, error)
	UpsertDataScanTask(context.Context, *UpsertDataScanTaskRequest) (*UpsertDataScanTaskResponse, error)
	DeleteDataScanTask(context.Context, *DeleteDataScanTaskRequest) (*DeleteDataScanTaskResponse, error)
	ShowDataScanTask(context.Context, *ShowDataScanTaskRequest) (*ShowDataScanTaskResponse, error)
	UpsertCdcConsumeTask(context.Context, *UpsertCdcConsumeTaskRequest) (*UpsertCdcConsumeTaskResponse, error)
	DeleteCdcConsumeTask(context.Context, *DeleteCdcConsumeTaskRequest) (*DeleteCdcConsumeTaskResponse, error)
	ShowCdcConsumeTask(context.Context, *ShowCdcConsumeTaskRequest) (*ShowCdcConsumeTaskResponse, error)
	OperateTask(context.Context, *OperateTaskRequest) (*OperateTaskResponse, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterServer struct{}

func (UnimplementedMasterServer) UpsertDatabase(context.Context, *UpsertDatabaseRequest) (*UpsertDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDatabase not implemented")
}
func (UnimplementedMasterServer) DeleteDatabase(context.Context, *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabase not implemented")
}
func (UnimplementedMasterServer) ShowDatabase(context.Context, *ShowDatabaseRequest) (*ShowDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDatabase not implemented")
}
func (UnimplementedMasterServer) UpsertDatasource(context.Context, *UpsertDatasourceRequest) (*UpsertDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDatasource not implemented")
}
func (UnimplementedMasterServer) DeleteDatasource(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasource not implemented")
}
func (UnimplementedMasterServer) ShowDatasource(context.Context, *ShowDatasourceRequest) (*ShowDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDatasource not implemented")
}
func (UnimplementedMasterServer) UpsertAssessMigrateTask(context.Context, *UpsertAssessMigrateTaskRequest) (*UpsertAssessMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAssessMigrateTask not implemented")
}
func (UnimplementedMasterServer) DeleteAssessMigrateTask(context.Context, *DeleteAssessMigrateTaskRequest) (*DeleteAssessMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssessMigrateTask not implemented")
}
func (UnimplementedMasterServer) ShowAssessMigrateTask(context.Context, *ShowAssessMigrateTaskRequest) (*ShowAssessMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAssessMigrateTask not implemented")
}
func (UnimplementedMasterServer) UpsertStructMigrateTask(context.Context, *UpsertStructMigrateTaskRequest) (*UpsertStructMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStructMigrateTask not implemented")
}
func (UnimplementedMasterServer) DeleteStructMigrateTask(context.Context, *DeleteStructMigrateTaskRequest) (*DeleteStructMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStructMigrateTask not implemented")
}
func (UnimplementedMasterServer) ShowStructMigrateTask(context.Context, *ShowStructMigrateTaskRequest) (*ShowStructMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowStructMigrateTask not implemented")
}
func (UnimplementedMasterServer) UpsertStructCompareTask(context.Context, *UpsertStructCompareTaskRequest) (*UpsertStructCompareTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStructCompareTask not implemented")
}
func (UnimplementedMasterServer) DeleteStructCompareTask(context.Context, *DeleteStructCompareTaskRequest) (*DeleteStructCompareTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStructCompareTask not implemented")
}
func (UnimplementedMasterServer) ShowStructCompareTask(context.Context, *ShowStructCompareTaskRequest) (*ShowStructCompareTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowStructCompareTask not implemented")
}
func (UnimplementedMasterServer) UpsertStmtMigrateTask(context.Context, *UpsertStmtMigrateTaskRequest) (*UpsertStmtMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStmtMigrateTask not implemented")
}
func (UnimplementedMasterServer) DeleteStmtMigrateTask(context.Context, *DeleteStmtMigrateTaskRequest) (*DeleteStmtMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStmtMigrateTask not implemented")
}
func (UnimplementedMasterServer) ShowStmtMigrateTask(context.Context, *ShowStmtMigrateTaskRequest) (*ShowStmtMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowStmtMigrateTask not implemented")
}
func (UnimplementedMasterServer) UpsertSqlMigrateTask(context.Context, *UpsertSqlMigrateTaskRequest) (*UpsertSqlMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSqlMigrateTask not implemented")
}
func (UnimplementedMasterServer) DeleteSqlMigrateTask(context.Context, *DeleteSqlMigrateTaskRequest) (*DeleteSqlMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSqlMigrateTask not implemented")
}
func (UnimplementedMasterServer) ShowSqlMigrateTask(context.Context, *ShowSqlMigrateTaskRequest) (*ShowSqlMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSqlMigrateTask not implemented")
}
func (UnimplementedMasterServer) UpsertCsvMigrateTask(context.Context, *UpsertCsvMigrateTaskRequest) (*UpsertCsvMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCsvMigrateTask not implemented")
}
func (UnimplementedMasterServer) DeleteCsvMigrateTask(context.Context, *DeleteCsvMigrateTaskRequest) (*DeleteCsvMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCsvMigrateTask not implemented")
}
func (UnimplementedMasterServer) ShowCsvMigrateTask(context.Context, *ShowCsvMigrateTaskRequest) (*ShowCsvMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCsvMigrateTask not implemented")
}
func (UnimplementedMasterServer) UpsertDataCompareTask(context.Context, *UpsertDataCompareTaskRequest) (*UpsertDataCompareTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDataCompareTask not implemented")
}
func (UnimplementedMasterServer) DeleteDataCompareTask(context.Context, *DeleteDataCompareTaskRequest) (*DeleteDataCompareTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataCompareTask not implemented")
}
func (UnimplementedMasterServer) ShowDataCompareTask(context.Context, *ShowDataCompareTaskRequest) (*ShowDataCompareTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDataCompareTask not implemented")
}
func (UnimplementedMasterServer) UpsertDataScanTask(context.Context, *UpsertDataScanTaskRequest) (*UpsertDataScanTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDataScanTask not implemented")
}
func (UnimplementedMasterServer) DeleteDataScanTask(context.Context, *DeleteDataScanTaskRequest) (*DeleteDataScanTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataScanTask not implemented")
}
func (UnimplementedMasterServer) ShowDataScanTask(context.Context, *ShowDataScanTaskRequest) (*ShowDataScanTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDataScanTask not implemented")
}
func (UnimplementedMasterServer) UpsertCdcConsumeTask(context.Context, *UpsertCdcConsumeTaskRequest) (*UpsertCdcConsumeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCdcConsumeTask not implemented")
}
func (UnimplementedMasterServer) DeleteCdcConsumeTask(context.Context, *DeleteCdcConsumeTaskRequest) (*DeleteCdcConsumeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCdcConsumeTask not implemented")
}
func (UnimplementedMasterServer) ShowCdcConsumeTask(context.Context, *ShowCdcConsumeTaskRequest) (*ShowCdcConsumeTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCdcConsumeTask not implemented")
}
func (UnimplementedMasterServer) OperateTask(context.Context, *OperateTaskRequest) (*OperateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateTask not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}
func (UnimplementedMasterServer) testEmbeddedByValue()                {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	// If the following call pancis, it indicates UnimplementedMasterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_UpsertDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertDatabase(ctx, req.(*UpsertDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteDatabase(ctx, req.(*DeleteDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowDatabase(ctx, req.(*ShowDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertDatasource(ctx, req.(*UpsertDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteDatasource(ctx, req.(*DeleteDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowDatasource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowDatasource(ctx, req.(*ShowDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertAssessMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAssessMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertAssessMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertAssessMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertAssessMigrateTask(ctx, req.(*UpsertAssessMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteAssessMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssessMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteAssessMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteAssessMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteAssessMigrateTask(ctx, req.(*DeleteAssessMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowAssessMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAssessMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowAssessMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowAssessMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowAssessMigrateTask(ctx, req.(*ShowAssessMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertStructMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStructMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertStructMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertStructMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertStructMigrateTask(ctx, req.(*UpsertStructMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteStructMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStructMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteStructMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteStructMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteStructMigrateTask(ctx, req.(*DeleteStructMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowStructMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowStructMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowStructMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowStructMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowStructMigrateTask(ctx, req.(*ShowStructMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertStructCompareTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStructCompareTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertStructCompareTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertStructCompareTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertStructCompareTask(ctx, req.(*UpsertStructCompareTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteStructCompareTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStructCompareTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteStructCompareTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteStructCompareTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteStructCompareTask(ctx, req.(*DeleteStructCompareTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowStructCompareTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowStructCompareTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowStructCompareTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowStructCompareTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowStructCompareTask(ctx, req.(*ShowStructCompareTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertStmtMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStmtMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertStmtMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertStmtMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertStmtMigrateTask(ctx, req.(*UpsertStmtMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteStmtMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStmtMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteStmtMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteStmtMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteStmtMigrateTask(ctx, req.(*DeleteStmtMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowStmtMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowStmtMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowStmtMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowStmtMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowStmtMigrateTask(ctx, req.(*ShowStmtMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertSqlMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSqlMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertSqlMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertSqlMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertSqlMigrateTask(ctx, req.(*UpsertSqlMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteSqlMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSqlMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteSqlMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteSqlMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteSqlMigrateTask(ctx, req.(*DeleteSqlMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowSqlMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowSqlMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowSqlMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowSqlMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowSqlMigrateTask(ctx, req.(*ShowSqlMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertCsvMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCsvMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertCsvMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertCsvMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertCsvMigrateTask(ctx, req.(*UpsertCsvMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteCsvMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCsvMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteCsvMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteCsvMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteCsvMigrateTask(ctx, req.(*DeleteCsvMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowCsvMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCsvMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowCsvMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowCsvMigrateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowCsvMigrateTask(ctx, req.(*ShowCsvMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertDataCompareTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDataCompareTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertDataCompareTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertDataCompareTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertDataCompareTask(ctx, req.(*UpsertDataCompareTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteDataCompareTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataCompareTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteDataCompareTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteDataCompareTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteDataCompareTask(ctx, req.(*DeleteDataCompareTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowDataCompareTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDataCompareTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowDataCompareTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowDataCompareTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowDataCompareTask(ctx, req.(*ShowDataCompareTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertDataScanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDataScanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertDataScanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertDataScanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertDataScanTask(ctx, req.(*UpsertDataScanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteDataScanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataScanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteDataScanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteDataScanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteDataScanTask(ctx, req.(*DeleteDataScanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowDataScanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDataScanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowDataScanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowDataScanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowDataScanTask(ctx, req.(*ShowDataScanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertCdcConsumeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCdcConsumeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertCdcConsumeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_UpsertCdcConsumeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertCdcConsumeTask(ctx, req.(*UpsertCdcConsumeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteCdcConsumeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCdcConsumeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteCdcConsumeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DeleteCdcConsumeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteCdcConsumeTask(ctx, req.(*DeleteCdcConsumeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowCdcConsumeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCdcConsumeTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowCdcConsumeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_ShowCdcConsumeTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowCdcConsumeTask(ctx, req.(*ShowCdcConsumeTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_OperateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).OperateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_OperateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).OperateTask(ctx, req.(*OperateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertDatabase",
			Handler:    _Master_UpsertDatabase_Handler,
		},
		{
			MethodName: "DeleteDatabase",
			Handler:    _Master_DeleteDatabase_Handler,
		},
		{
			MethodName: "ShowDatabase",
			Handler:    _Master_ShowDatabase_Handler,
		},
		{
			MethodName: "UpsertDatasource",
			Handler:    _Master_UpsertDatasource_Handler,
		},
		{
			MethodName: "DeleteDatasource",
			Handler:    _Master_DeleteDatasource_Handler,
		},
		{
			MethodName: "ShowDatasource",
			Handler:    _Master_ShowDatasource_Handler,
		},
		{
			MethodName: "UpsertAssessMigrateTask",
			Handler:    _Master_UpsertAssessMigrateTask_Handler,
		},
		{
			MethodName: "DeleteAssessMigrateTask",
			Handler:    _Master_DeleteAssessMigrateTask_Handler,
		},
		{
			MethodName: "ShowAssessMigrateTask",
			Handler:    _Master_ShowAssessMigrateTask_Handler,
		},
		{
			MethodName: "UpsertStructMigrateTask",
			Handler:    _Master_UpsertStructMigrateTask_Handler,
		},
		{
			MethodName: "DeleteStructMigrateTask",
			Handler:    _Master_DeleteStructMigrateTask_Handler,
		},
		{
			MethodName: "ShowStructMigrateTask",
			Handler:    _Master_ShowStructMigrateTask_Handler,
		},
		{
			MethodName: "UpsertStructCompareTask",
			Handler:    _Master_UpsertStructCompareTask_Handler,
		},
		{
			MethodName: "DeleteStructCompareTask",
			Handler:    _Master_DeleteStructCompareTask_Handler,
		},
		{
			MethodName: "ShowStructCompareTask",
			Handler:    _Master_ShowStructCompareTask_Handler,
		},
		{
			MethodName: "UpsertStmtMigrateTask",
			Handler:    _Master_UpsertStmtMigrateTask_Handler,
		},
		{
			MethodName: "DeleteStmtMigrateTask",
			Handler:    _Master_DeleteStmtMigrateTask_Handler,
		},
		{
			MethodName: "ShowStmtMigrateTask",
			Handler:    _Master_ShowStmtMigrateTask_Handler,
		},
		{
			MethodName: "UpsertSqlMigrateTask",
			Handler:    _Master_UpsertSqlMigrateTask_Handler,
		},
		{
			MethodName: "DeleteSqlMigrateTask",
			Handler:    _Master_DeleteSqlMigrateTask_Handler,
		},
		{
			MethodName: "ShowSqlMigrateTask",
			Handler:    _Master_ShowSqlMigrateTask_Handler,
		},
		{
			MethodName: "UpsertCsvMigrateTask",
			Handler:    _Master_UpsertCsvMigrateTask_Handler,
		},
		{
			MethodName: "DeleteCsvMigrateTask",
			Handler:    _Master_DeleteCsvMigrateTask_Handler,
		},
		{
			MethodName: "ShowCsvMigrateTask",
			Handler:    _Master_ShowCsvMigrateTask_Handler,
		},
		{
			MethodName: "UpsertDataCompareTask",
			Handler:    _Master_UpsertDataCompareTask_Handler,
		},
		{
			MethodName: "DeleteDataCompareTask",
			Handler:    _Master_DeleteDataCompareTask_Handler,
		},
		{
			MethodName: "ShowDataCompareTask",
			Handler:    _Master_ShowDataCompareTask_Handler,
		},
		{
			MethodName: "UpsertDataScanTask",
			Handler:    _Master_UpsertDataScanTask_Handler,
		},
		{
			MethodName: "DeleteDataScanTask",
			Handler:    _Master_DeleteDataScanTask_Handler,
		},
		{
			MethodName: "ShowDataScanTask",
			Handler:    _Master_ShowDataScanTask_Handler,
		},
		{
			MethodName: "UpsertCdcConsumeTask",
			Handler:    _Master_UpsertCdcConsumeTask_Handler,
		},
		{
			MethodName: "DeleteCdcConsumeTask",
			Handler:    _Master_DeleteCdcConsumeTask_Handler,
		},
		{
			MethodName: "ShowCdcConsumeTask",
			Handler:    _Master_ShowCdcConsumeTask_Handler,
		},
		{
			MethodName: "OperateTask",
			Handler:    _Master_OperateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbms_master.proto",
}
