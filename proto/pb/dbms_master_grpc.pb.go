// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: dbms_master.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	UpsertDatabase(ctx context.Context, in *UpsertDatabaseRequest, opts ...grpc.CallOption) (*UpsertDatabaseResponse, error)
	DeleteDatabase(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*DeleteDatabaseResponse, error)
	ShowDatabase(ctx context.Context, in *ShowDatabaseRequest, opts ...grpc.CallOption) (*ShowDatabaseResponse, error)
	UpsertDatasource(ctx context.Context, in *UpsertDatasourceRequest, opts ...grpc.CallOption) (*UpsertDatasourceResponse, error)
	DeleteDatasource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceResponse, error)
	ShowDatasource(ctx context.Context, in *ShowDatasourceRequest, opts ...grpc.CallOption) (*ShowDatasourceResponse, error)
	UpsertRule(ctx context.Context, in *UpsertRuleRequest, opts ...grpc.CallOption) (*UpsertRuleResponse, error)
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	ShowRule(ctx context.Context, in *ShowRuleRequest, opts ...grpc.CallOption) (*ShowRuleResponse, error)
	UpsertStructMigrateTask(ctx context.Context, in *UpsertStructMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertStructMigrateTaskResponse, error)
	DeleteStructMigrateTask(ctx context.Context, in *DeleteStructMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteStructMigrateTaskResponse, error)
	ShowStructMigrateTask(ctx context.Context, in *ShowStructMigrateTaskRequest, opts ...grpc.CallOption) (*ShowStructMigrateTaskResponse, error)
	OperateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*OperateTaskResponse, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) UpsertDatabase(ctx context.Context, in *UpsertDatabaseRequest, opts ...grpc.CallOption) (*UpsertDatabaseResponse, error) {
	out := new(UpsertDatabaseResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/UpsertDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteDatabase(ctx context.Context, in *DeleteDatabaseRequest, opts ...grpc.CallOption) (*DeleteDatabaseResponse, error) {
	out := new(DeleteDatabaseResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/DeleteDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowDatabase(ctx context.Context, in *ShowDatabaseRequest, opts ...grpc.CallOption) (*ShowDatabaseResponse, error) {
	out := new(ShowDatabaseResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/ShowDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertDatasource(ctx context.Context, in *UpsertDatasourceRequest, opts ...grpc.CallOption) (*UpsertDatasourceResponse, error) {
	out := new(UpsertDatasourceResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/UpsertDatasource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteDatasource(ctx context.Context, in *DeleteDatasourceRequest, opts ...grpc.CallOption) (*DeleteDatasourceResponse, error) {
	out := new(DeleteDatasourceResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/DeleteDatasource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowDatasource(ctx context.Context, in *ShowDatasourceRequest, opts ...grpc.CallOption) (*ShowDatasourceResponse, error) {
	out := new(ShowDatasourceResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/ShowDatasource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertRule(ctx context.Context, in *UpsertRuleRequest, opts ...grpc.CallOption) (*UpsertRuleResponse, error) {
	out := new(UpsertRuleResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/UpsertRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowRule(ctx context.Context, in *ShowRuleRequest, opts ...grpc.CallOption) (*ShowRuleResponse, error) {
	out := new(ShowRuleResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/ShowRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) UpsertStructMigrateTask(ctx context.Context, in *UpsertStructMigrateTaskRequest, opts ...grpc.CallOption) (*UpsertStructMigrateTaskResponse, error) {
	out := new(UpsertStructMigrateTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/UpsertStructMigrateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) DeleteStructMigrateTask(ctx context.Context, in *DeleteStructMigrateTaskRequest, opts ...grpc.CallOption) (*DeleteStructMigrateTaskResponse, error) {
	out := new(DeleteStructMigrateTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/DeleteStructMigrateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ShowStructMigrateTask(ctx context.Context, in *ShowStructMigrateTaskRequest, opts ...grpc.CallOption) (*ShowStructMigrateTaskResponse, error) {
	out := new(ShowStructMigrateTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/ShowStructMigrateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) OperateTask(ctx context.Context, in *OperateTaskRequest, opts ...grpc.CallOption) (*OperateTaskResponse, error) {
	out := new(OperateTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Master/OperateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	UpsertDatabase(context.Context, *UpsertDatabaseRequest) (*UpsertDatabaseResponse, error)
	DeleteDatabase(context.Context, *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error)
	ShowDatabase(context.Context, *ShowDatabaseRequest) (*ShowDatabaseResponse, error)
	UpsertDatasource(context.Context, *UpsertDatasourceRequest) (*UpsertDatasourceResponse, error)
	DeleteDatasource(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceResponse, error)
	ShowDatasource(context.Context, *ShowDatasourceRequest) (*ShowDatasourceResponse, error)
	UpsertRule(context.Context, *UpsertRuleRequest) (*UpsertRuleResponse, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	ShowRule(context.Context, *ShowRuleRequest) (*ShowRuleResponse, error)
	UpsertStructMigrateTask(context.Context, *UpsertStructMigrateTaskRequest) (*UpsertStructMigrateTaskResponse, error)
	DeleteStructMigrateTask(context.Context, *DeleteStructMigrateTaskRequest) (*DeleteStructMigrateTaskResponse, error)
	ShowStructMigrateTask(context.Context, *ShowStructMigrateTaskRequest) (*ShowStructMigrateTaskResponse, error)
	OperateTask(context.Context, *OperateTaskRequest) (*OperateTaskResponse, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) UpsertDatabase(context.Context, *UpsertDatabaseRequest) (*UpsertDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDatabase not implemented")
}
func (UnimplementedMasterServer) DeleteDatabase(context.Context, *DeleteDatabaseRequest) (*DeleteDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabase not implemented")
}
func (UnimplementedMasterServer) ShowDatabase(context.Context, *ShowDatabaseRequest) (*ShowDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDatabase not implemented")
}
func (UnimplementedMasterServer) UpsertDatasource(context.Context, *UpsertDatasourceRequest) (*UpsertDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDatasource not implemented")
}
func (UnimplementedMasterServer) DeleteDatasource(context.Context, *DeleteDatasourceRequest) (*DeleteDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatasource not implemented")
}
func (UnimplementedMasterServer) ShowDatasource(context.Context, *ShowDatasourceRequest) (*ShowDatasourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDatasource not implemented")
}
func (UnimplementedMasterServer) UpsertRule(context.Context, *UpsertRuleRequest) (*UpsertRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRule not implemented")
}
func (UnimplementedMasterServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedMasterServer) ShowRule(context.Context, *ShowRuleRequest) (*ShowRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowRule not implemented")
}
func (UnimplementedMasterServer) UpsertStructMigrateTask(context.Context, *UpsertStructMigrateTaskRequest) (*UpsertStructMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStructMigrateTask not implemented")
}
func (UnimplementedMasterServer) DeleteStructMigrateTask(context.Context, *DeleteStructMigrateTaskRequest) (*DeleteStructMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStructMigrateTask not implemented")
}
func (UnimplementedMasterServer) ShowStructMigrateTask(context.Context, *ShowStructMigrateTaskRequest) (*ShowStructMigrateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowStructMigrateTask not implemented")
}
func (UnimplementedMasterServer) OperateTask(context.Context, *OperateTaskRequest) (*OperateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateTask not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_UpsertDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/UpsertDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertDatabase(ctx, req.(*UpsertDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/DeleteDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteDatabase(ctx, req.(*DeleteDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/ShowDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowDatabase(ctx, req.(*ShowDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/UpsertDatasource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertDatasource(ctx, req.(*UpsertDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/DeleteDatasource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteDatasource(ctx, req.(*DeleteDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowDatasource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowDatasource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/ShowDatasource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowDatasource(ctx, req.(*ShowDatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/UpsertRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertRule(ctx, req.(*UpsertRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/ShowRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowRule(ctx, req.(*ShowRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_UpsertStructMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStructMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).UpsertStructMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/UpsertStructMigrateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).UpsertStructMigrateTask(ctx, req.(*UpsertStructMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_DeleteStructMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStructMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DeleteStructMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/DeleteStructMigrateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DeleteStructMigrateTask(ctx, req.(*DeleteStructMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ShowStructMigrateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowStructMigrateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ShowStructMigrateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/ShowStructMigrateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ShowStructMigrateTask(ctx, req.(*ShowStructMigrateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_OperateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).OperateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Master/OperateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).OperateTask(ctx, req.(*OperateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertDatabase",
			Handler:    _Master_UpsertDatabase_Handler,
		},
		{
			MethodName: "DeleteDatabase",
			Handler:    _Master_DeleteDatabase_Handler,
		},
		{
			MethodName: "ShowDatabase",
			Handler:    _Master_ShowDatabase_Handler,
		},
		{
			MethodName: "UpsertDatasource",
			Handler:    _Master_UpsertDatasource_Handler,
		},
		{
			MethodName: "DeleteDatasource",
			Handler:    _Master_DeleteDatasource_Handler,
		},
		{
			MethodName: "ShowDatasource",
			Handler:    _Master_ShowDatasource_Handler,
		},
		{
			MethodName: "UpsertRule",
			Handler:    _Master_UpsertRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _Master_DeleteRule_Handler,
		},
		{
			MethodName: "ShowRule",
			Handler:    _Master_ShowRule_Handler,
		},
		{
			MethodName: "UpsertStructMigrateTask",
			Handler:    _Master_UpsertStructMigrateTask_Handler,
		},
		{
			MethodName: "DeleteStructMigrateTask",
			Handler:    _Master_DeleteStructMigrateTask_Handler,
		},
		{
			MethodName: "ShowStructMigrateTask",
			Handler:    _Master_ShowStructMigrateTask_Handler,
		},
		{
			MethodName: "OperateTask",
			Handler:    _Master_OperateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbms_master.proto",
}
