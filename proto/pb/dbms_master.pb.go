// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.4
// source: dbms_master.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息结构体
type UpsertDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database *Database `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *UpsertDatabaseRequest) Reset() {
	*x = UpsertDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatabaseRequest) ProtoMessage() {}

func (x *UpsertDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpsertDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertDatabaseRequest) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

type UpsertDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertDatabaseResponse) Reset() {
	*x = UpsertDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatabaseResponse) ProtoMessage() {}

func (x *UpsertDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatabaseResponse.ProtoReflect.Descriptor instead.
func (*UpsertDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertDatabaseResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDatabaseRequest) Reset() {
	*x = DeleteDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseRequest) ProtoMessage() {}

func (x *DeleteDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{2}
}

type DeleteDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteDatabaseResponse) Reset() {
	*x = DeleteDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseResponse) ProtoMessage() {}

func (x *DeleteDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDatabaseResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowDatabaseRequest) Reset() {
	*x = ShowDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatabaseRequest) ProtoMessage() {}

func (x *ShowDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ShowDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{4}
}

type ShowDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowDatabaseResponse) Reset() {
	*x = ShowDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatabaseResponse) ProtoMessage() {}

func (x *ShowDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatabaseResponse.ProtoReflect.Descriptor instead.
func (*ShowDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{5}
}

func (x *ShowDatabaseResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertDatasourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasource []*Datasource `protobuf:"bytes,1,rep,name=datasource,proto3" json:"datasource,omitempty"`
}

func (x *UpsertDatasourceRequest) Reset() {
	*x = UpsertDatasourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatasourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatasourceRequest) ProtoMessage() {}

func (x *UpsertDatasourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatasourceRequest.ProtoReflect.Descriptor instead.
func (*UpsertDatasourceRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertDatasourceRequest) GetDatasource() []*Datasource {
	if x != nil {
		return x.Datasource
	}
	return nil
}

type UpsertDatasourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertDatasourceResponse) Reset() {
	*x = UpsertDatasourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatasourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatasourceResponse) ProtoMessage() {}

func (x *UpsertDatasourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatasourceResponse.ProtoReflect.Descriptor instead.
func (*UpsertDatasourceResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{7}
}

func (x *UpsertDatasourceResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteDatasourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasourceName []string `protobuf:"bytes,2,rep,name=datasourceName,proto3" json:"datasourceName,omitempty"`
}

func (x *DeleteDatasourceRequest) Reset() {
	*x = DeleteDatasourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasourceRequest) ProtoMessage() {}

func (x *DeleteDatasourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasourceRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDatasourceRequest) GetDatasourceName() []string {
	if x != nil {
		return x.DatasourceName
	}
	return nil
}

type DeleteDatasourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteDatasourceResponse) Reset() {
	*x = DeleteDatasourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasourceResponse) ProtoMessage() {}

func (x *DeleteDatasourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasourceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDatasourceResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDatasourceResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowDatasourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasourceName string `protobuf:"bytes,1,opt,name=datasourceName,proto3" json:"datasourceName,omitempty"`
	Page           uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowDatasourceRequest) Reset() {
	*x = ShowDatasourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatasourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatasourceRequest) ProtoMessage() {}

func (x *ShowDatasourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatasourceRequest.ProtoReflect.Descriptor instead.
func (*ShowDatasourceRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{10}
}

func (x *ShowDatasourceRequest) GetDatasourceName() string {
	if x != nil {
		return x.DatasourceName
	}
	return ""
}

func (x *ShowDatasourceRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowDatasourceRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowDatasourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowDatasourceResponse) Reset() {
	*x = ShowDatasourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatasourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatasourceResponse) ProtoMessage() {}

func (x *ShowDatasourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatasourceResponse.ProtoReflect.Descriptor instead.
func (*ShowDatasourceResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{11}
}

func (x *ShowDatasourceResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertStructMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName           string              `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS    string              `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT    string              `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment            string              `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule      *CaseFieldRule      `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	StructMigrateParam *StructMigrateParam `protobuf:"bytes,7,opt,name=structMigrateParam,proto3" json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `protobuf:"bytes,8,opt,name=structMigrateRule,proto3" json:"structMigrateRule,omitempty"`
}

func (x *UpsertStructMigrateTaskRequest) Reset() {
	*x = UpsertStructMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStructMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStructMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertStructMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStructMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertStructMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertStructMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertStructMigrateTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertStructMigrateTaskRequest) GetStructMigrateParam() *StructMigrateParam {
	if x != nil {
		return x.StructMigrateParam
	}
	return nil
}

func (x *UpsertStructMigrateTaskRequest) GetStructMigrateRule() *StructMigrateRule {
	if x != nil {
		return x.StructMigrateRule
	}
	return nil
}

type UpsertStructMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertStructMigrateTaskResponse) Reset() {
	*x = UpsertStructMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStructMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStructMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertStructMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStructMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertStructMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{13}
}

func (x *UpsertStructMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteStructMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteStructMigrateTaskRequest) Reset() {
	*x = DeleteStructMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStructMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStructMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteStructMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStructMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteStructMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteStructMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteStructMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteStructMigrateTaskResponse) Reset() {
	*x = DeleteStructMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStructMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStructMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteStructMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStructMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteStructMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteStructMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowStructMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowStructMigrateTaskRequest) Reset() {
	*x = ShowStructMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStructMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStructMigrateTaskRequest) ProtoMessage() {}

func (x *ShowStructMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStructMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowStructMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{16}
}

func (x *ShowStructMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowStructMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowStructMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowStructMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowStructMigrateTaskResponse) Reset() {
	*x = ShowStructMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStructMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStructMigrateTaskResponse) ProtoMessage() {}

func (x *ShowStructMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStructMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowStructMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{17}
}

func (x *ShowStructMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertDataMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName         string            `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS  string            `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT  string            `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment          string            `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule    *CaseFieldRule    `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule  *SchemaRouteRule  `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	DataMigrateParam *DataMigrateParam `protobuf:"bytes,8,opt,name=dataMigrateParam,proto3" json:"dataMigrateParam,omitempty"`
}

func (x *UpsertDataMigrateTaskRequest) Reset() {
	*x = UpsertDataMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDataMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDataMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertDataMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDataMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertDataMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertDataMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertDataMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertDataMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertDataMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertDataMigrateTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertDataMigrateTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertDataMigrateTaskRequest) GetDataMigrateParam() *DataMigrateParam {
	if x != nil {
		return x.DataMigrateParam
	}
	return nil
}

type UpsertDataMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertDataMigrateTaskResponse) Reset() {
	*x = UpsertDataMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDataMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDataMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertDataMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDataMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertDataMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{19}
}

func (x *UpsertDataMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteDataMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteDataMigrateTaskRequest) Reset() {
	*x = DeleteDataMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteDataMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteDataMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteDataMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteDataMigrateTaskResponse) Reset() {
	*x = DeleteDataMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteDataMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteDataMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowDataMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowDataMigrateTaskRequest) Reset() {
	*x = ShowDataMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDataMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDataMigrateTaskRequest) ProtoMessage() {}

func (x *ShowDataMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDataMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowDataMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{22}
}

func (x *ShowDataMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowDataMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowDataMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowDataMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowDataMigrateTaskResponse) Reset() {
	*x = ShowDataMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDataMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDataMigrateTaskResponse) ProtoMessage() {}

func (x *ShowDataMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDataMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowDataMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{23}
}

func (x *ShowDataMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertSqlMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName        string            `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS string            `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT string            `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment         string            `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule   *CaseFieldRule    `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SqlMigrateRules []*SqlMigrateRule `protobuf:"bytes,6,rep,name=SqlMigrateRules,proto3" json:"SqlMigrateRules,omitempty"`
	SqlMigrateParam *SqlMigrateParam  `protobuf:"bytes,7,opt,name=sqlMigrateParam,proto3" json:"sqlMigrateParam,omitempty"`
}

func (x *UpsertSqlMigrateTaskRequest) Reset() {
	*x = UpsertSqlMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSqlMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSqlMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertSqlMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSqlMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertSqlMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{24}
}

func (x *UpsertSqlMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertSqlMigrateTaskRequest) GetSqlMigrateRules() []*SqlMigrateRule {
	if x != nil {
		return x.SqlMigrateRules
	}
	return nil
}

func (x *UpsertSqlMigrateTaskRequest) GetSqlMigrateParam() *SqlMigrateParam {
	if x != nil {
		return x.SqlMigrateParam
	}
	return nil
}

type UpsertSqlMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertSqlMigrateTaskResponse) Reset() {
	*x = UpsertSqlMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSqlMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSqlMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertSqlMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSqlMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertSqlMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{25}
}

func (x *UpsertSqlMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteSqlMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteSqlMigrateTaskRequest) Reset() {
	*x = DeleteSqlMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSqlMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSqlMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteSqlMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSqlMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteSqlMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteSqlMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteSqlMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteSqlMigrateTaskResponse) Reset() {
	*x = DeleteSqlMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSqlMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSqlMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteSqlMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSqlMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteSqlMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteSqlMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowSqlMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowSqlMigrateTaskRequest) Reset() {
	*x = ShowSqlMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSqlMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSqlMigrateTaskRequest) ProtoMessage() {}

func (x *ShowSqlMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSqlMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowSqlMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{28}
}

func (x *ShowSqlMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowSqlMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowSqlMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowSqlMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowSqlMigrateTaskResponse) Reset() {
	*x = ShowSqlMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSqlMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSqlMigrateTaskResponse) ProtoMessage() {}

func (x *ShowSqlMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSqlMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowSqlMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{29}
}

func (x *ShowSqlMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type OperateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operate  string `protobuf:"bytes,1,opt,name=operate,proto3" json:"operate,omitempty"`
	TaskName string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Express  string `protobuf:"bytes,3,opt,name=express,proto3" json:"express,omitempty"`
}

func (x *OperateTaskRequest) Reset() {
	*x = OperateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateTaskRequest) ProtoMessage() {}

func (x *OperateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateTaskRequest.ProtoReflect.Descriptor instead.
func (*OperateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{30}
}

func (x *OperateTaskRequest) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *OperateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *OperateTaskRequest) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

type OperateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *OperateTaskResponse) Reset() {
	*x = OperateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateTaskResponse) ProtoMessage() {}

func (x *OperateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateTaskResponse.ProtoReflect.Descriptor instead.
func (*OperateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{31}
}

func (x *OperateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// 通用结构体
type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username      string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Host          string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port          uint64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Schema        string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	SlowThreshold uint64 `protobuf:"varint,6,opt,name=slowThreshold,proto3" json:"slowThreshold,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{32}
}

func (x *Database) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Database) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Database) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Database) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Database) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Database) GetSlowThreshold() uint64 {
	if x != nil {
		return x.SlowThreshold
	}
	return 0
}

type Datasource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasourceName string `protobuf:"bytes,1,opt,name=datasourceName,proto3" json:"datasourceName,omitempty"`
	DbType         string `protobuf:"bytes,2,opt,name=dbType,proto3" json:"dbType,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password       string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Host           string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Port           uint64 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	ConnectCharset string `protobuf:"bytes,7,opt,name=connectCharset,proto3" json:"connectCharset,omitempty"`
	ConnectParams  string `protobuf:"bytes,8,opt,name=connectParams,proto3" json:"connectParams,omitempty"`
	ConnectStatus  string `protobuf:"bytes,9,opt,name=connectStatus,proto3" json:"connectStatus,omitempty"`
	ServiceName    string `protobuf:"bytes,10,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	PdbName        string `protobuf:"bytes,11,opt,name=pdbName,proto3" json:"pdbName,omitempty"`
	Comment        string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Datasource) Reset() {
	*x = Datasource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datasource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datasource) ProtoMessage() {}

func (x *Datasource) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datasource.ProtoReflect.Descriptor instead.
func (*Datasource) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{33}
}

func (x *Datasource) GetDatasourceName() string {
	if x != nil {
		return x.DatasourceName
	}
	return ""
}

func (x *Datasource) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *Datasource) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Datasource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Datasource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Datasource) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Datasource) GetConnectCharset() string {
	if x != nil {
		return x.ConnectCharset
	}
	return ""
}

func (x *Datasource) GetConnectParams() string {
	if x != nil {
		return x.ConnectParams
	}
	return ""
}

func (x *Datasource) GetConnectStatus() string {
	if x != nil {
		return x.ConnectStatus
	}
	return ""
}

func (x *Datasource) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Datasource) GetPdbName() string {
	if x != nil {
		return x.PdbName
	}
	return ""
}

func (x *Datasource) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SchemaRouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS      string             `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	SchemaNameT      string             `protobuf:"bytes,2,opt,name=schemaNameT,proto3" json:"schemaNameT,omitempty"`
	IncludeTableS    []string           `protobuf:"bytes,3,rep,name=includeTableS,proto3" json:"includeTableS,omitempty"`
	ExcludeTableS    []string           `protobuf:"bytes,4,rep,name=excludeTableS,proto3" json:"excludeTableS,omitempty"`
	TableRouteRules  []*TableRouteRule  `protobuf:"bytes,5,rep,name=tableRouteRules,proto3" json:"tableRouteRules,omitempty"`
	DataMigrateRules []*DataMigrateRule `protobuf:"bytes,6,rep,name=DataMigrateRules,proto3" json:"DataMigrateRules,omitempty"`
}

func (x *SchemaRouteRule) Reset() {
	*x = SchemaRouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaRouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRouteRule) ProtoMessage() {}

func (x *SchemaRouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRouteRule.ProtoReflect.Descriptor instead.
func (*SchemaRouteRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{34}
}

func (x *SchemaRouteRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *SchemaRouteRule) GetSchemaNameT() string {
	if x != nil {
		return x.SchemaNameT
	}
	return ""
}

func (x *SchemaRouteRule) GetIncludeTableS() []string {
	if x != nil {
		return x.IncludeTableS
	}
	return nil
}

func (x *SchemaRouteRule) GetExcludeTableS() []string {
	if x != nil {
		return x.ExcludeTableS
	}
	return nil
}

func (x *SchemaRouteRule) GetTableRouteRules() []*TableRouteRule {
	if x != nil {
		return x.TableRouteRules
	}
	return nil
}

func (x *SchemaRouteRule) GetDataMigrateRules() []*DataMigrateRule {
	if x != nil {
		return x.DataMigrateRules
	}
	return nil
}

type CaseFieldRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseFieldRuleS string `protobuf:"bytes,1,opt,name=caseFieldRuleS,proto3" json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT string `protobuf:"bytes,2,opt,name=caseFieldRuleT,proto3" json:"caseFieldRuleT,omitempty"`
}

func (x *CaseFieldRule) Reset() {
	*x = CaseFieldRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseFieldRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseFieldRule) ProtoMessage() {}

func (x *CaseFieldRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseFieldRule.ProtoReflect.Descriptor instead.
func (*CaseFieldRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{35}
}

func (x *CaseFieldRule) GetCaseFieldRuleS() string {
	if x != nil {
		return x.CaseFieldRuleS
	}
	return ""
}

func (x *CaseFieldRule) GetCaseFieldRuleT() string {
	if x != nil {
		return x.CaseFieldRuleT
	}
	return ""
}

type TableRouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNameS       string            `protobuf:"bytes,1,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	TableNameT       string            `protobuf:"bytes,2,opt,name=tableNameT,proto3" json:"tableNameT,omitempty"`
	ColumnRouteRules map[string]string `protobuf:"bytes,3,rep,name=columnRouteRules,proto3" json:"columnRouteRules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TableRouteRule) Reset() {
	*x = TableRouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRouteRule) ProtoMessage() {}

func (x *TableRouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRouteRule.ProtoReflect.Descriptor instead.
func (*TableRouteRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{36}
}

func (x *TableRouteRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *TableRouteRule) GetTableNameT() string {
	if x != nil {
		return x.TableNameT
	}
	return ""
}

func (x *TableRouteRule) GetColumnRouteRules() map[string]string {
	if x != nil {
		return x.ColumnRouteRules
	}
	return nil
}

type StructMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MigrateThread    uint64 `protobuf:"varint,1,opt,name=migrateThread,proto3" json:"migrateThread,omitempty"`
	CreateIfNotExist bool   `protobuf:"varint,2,opt,name=createIfNotExist,proto3" json:"createIfNotExist,omitempty"`
	DirectWrite      bool   `protobuf:"varint,3,opt,name=directWrite,proto3" json:"directWrite,omitempty"`
	OutputDir        string `protobuf:"bytes,4,opt,name=outputDir,proto3" json:"outputDir,omitempty"`
}

func (x *StructMigrateParam) Reset() {
	*x = StructMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructMigrateParam) ProtoMessage() {}

func (x *StructMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructMigrateParam.ProtoReflect.Descriptor instead.
func (*StructMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{37}
}

func (x *StructMigrateParam) GetMigrateThread() uint64 {
	if x != nil {
		return x.MigrateThread
	}
	return 0
}

func (x *StructMigrateParam) GetCreateIfNotExist() bool {
	if x != nil {
		return x.CreateIfNotExist
	}
	return false
}

func (x *StructMigrateParam) GetDirectWrite() bool {
	if x != nil {
		return x.DirectWrite
	}
	return false
}

func (x *StructMigrateParam) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

type StructMigrateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskStructRules   []*TaskStructRule   `protobuf:"bytes,1,rep,name=taskStructRules,proto3" json:"taskStructRules,omitempty"`
	SchemaStructRules []*SchemaStructRule `protobuf:"bytes,2,rep,name=schemaStructRules,proto3" json:"schemaStructRules,omitempty"`
	TableStructRules  []*TableStructRule  `protobuf:"bytes,3,rep,name=tableStructRules,proto3" json:"tableStructRules,omitempty"`
	ColumnStructRules []*ColumnStructRule `protobuf:"bytes,4,rep,name=columnStructRules,proto3" json:"columnStructRules,omitempty"`
	TableAttrsRules   []*TableAttrsRule   `protobuf:"bytes,5,rep,name=tableAttrsRules,proto3" json:"tableAttrsRules,omitempty"`
}

func (x *StructMigrateRule) Reset() {
	*x = StructMigrateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructMigrateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructMigrateRule) ProtoMessage() {}

func (x *StructMigrateRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructMigrateRule.ProtoReflect.Descriptor instead.
func (*StructMigrateRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{38}
}

func (x *StructMigrateRule) GetTaskStructRules() []*TaskStructRule {
	if x != nil {
		return x.TaskStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetSchemaStructRules() []*SchemaStructRule {
	if x != nil {
		return x.SchemaStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetTableStructRules() []*TableStructRule {
	if x != nil {
		return x.TableStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetColumnStructRules() []*ColumnStructRule {
	if x != nil {
		return x.ColumnStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetTableAttrsRules() []*TableAttrsRule {
	if x != nil {
		return x.TableAttrsRules
	}
	return nil
}

type TaskStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnTypeS     string `protobuf:"bytes,1,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT     string `protobuf:"bytes,2,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	TableAttrOption string `protobuf:"bytes,3,opt,name=TableAttrOption,proto3" json:"TableAttrOption,omitempty"`
	DefaultValueS   string `protobuf:"bytes,4,opt,name=DefaultValueS,proto3" json:"DefaultValueS,omitempty"`
	DefaultValueT   string `protobuf:"bytes,5,opt,name=DefaultValueT,proto3" json:"DefaultValueT,omitempty"`
}

func (x *TaskStructRule) Reset() {
	*x = TaskStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStructRule) ProtoMessage() {}

func (x *TaskStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStructRule.ProtoReflect.Descriptor instead.
func (*TaskStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{39}
}

func (x *TaskStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *TaskStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *TaskStructRule) GetTableAttrOption() string {
	if x != nil {
		return x.TableAttrOption
	}
	return ""
}

func (x *TaskStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *TaskStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type SchemaStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS   string `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	ColumnTypeS   string `protobuf:"bytes,2,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT   string `protobuf:"bytes,3,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	DefaultValueS string `protobuf:"bytes,4,opt,name=defaultValueS,proto3" json:"defaultValueS,omitempty"`
	DefaultValueT string `protobuf:"bytes,5,opt,name=defaultValueT,proto3" json:"defaultValueT,omitempty"`
}

func (x *SchemaStructRule) Reset() {
	*x = SchemaStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaStructRule) ProtoMessage() {}

func (x *SchemaStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaStructRule.ProtoReflect.Descriptor instead.
func (*SchemaStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{40}
}

func (x *SchemaStructRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *SchemaStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *SchemaStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *SchemaStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *SchemaStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type TableStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS   string `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	TableNameS    string `protobuf:"bytes,2,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	ColumnTypeS   string `protobuf:"bytes,3,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT   string `protobuf:"bytes,4,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	DefaultValueS string `protobuf:"bytes,5,opt,name=defaultValueS,proto3" json:"defaultValueS,omitempty"`
	DefaultValueT string `protobuf:"bytes,6,opt,name=defaultValueT,proto3" json:"defaultValueT,omitempty"`
}

func (x *TableStructRule) Reset() {
	*x = TableStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStructRule) ProtoMessage() {}

func (x *TableStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStructRule.ProtoReflect.Descriptor instead.
func (*TableStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{41}
}

func (x *TableStructRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *TableStructRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *TableStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *TableStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *TableStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *TableStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type ColumnStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS   string `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	TableNameS    string `protobuf:"bytes,2,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	ColumnNameS   string `protobuf:"bytes,3,opt,name=columnNameS,proto3" json:"columnNameS,omitempty"`
	ColumnTypeS   string `protobuf:"bytes,4,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT   string `protobuf:"bytes,5,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	DefaultValueS string `protobuf:"bytes,6,opt,name=defaultValueS,proto3" json:"defaultValueS,omitempty"`
	DefaultValueT string `protobuf:"bytes,7,opt,name=defaultValueT,proto3" json:"defaultValueT,omitempty"`
}

func (x *ColumnStructRule) Reset() {
	*x = ColumnStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnStructRule) ProtoMessage() {}

func (x *ColumnStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnStructRule.ProtoReflect.Descriptor instead.
func (*ColumnStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{42}
}

func (x *ColumnStructRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *ColumnStructRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *ColumnStructRule) GetColumnNameS() string {
	if x != nil {
		return x.ColumnNameS
	}
	return ""
}

func (x *ColumnStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *ColumnStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *ColumnStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *ColumnStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type TableAttrsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS string   `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	TableNamesS []string `protobuf:"bytes,2,rep,name=tableNamesS,proto3" json:"tableNamesS,omitempty"`
	TableAttrsT string   `protobuf:"bytes,3,opt,name=tableAttrsT,proto3" json:"tableAttrsT,omitempty"`
}

func (x *TableAttrsRule) Reset() {
	*x = TableAttrsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableAttrsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableAttrsRule) ProtoMessage() {}

func (x *TableAttrsRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableAttrsRule.ProtoReflect.Descriptor instead.
func (*TableAttrsRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{43}
}

func (x *TableAttrsRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *TableAttrsRule) GetTableNamesS() []string {
	if x != nil {
		return x.TableNamesS
	}
	return nil
}

func (x *TableAttrsRule) GetTableAttrsT() string {
	if x != nil {
		return x.TableAttrsT
	}
	return ""
}

type DataMigrateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNameS          string `protobuf:"bytes,1,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	EnableChunkStrategy bool   `protobuf:"varint,2,opt,name=enableChunkStrategy,proto3" json:"enableChunkStrategy,omitempty"`
	WhereRange          string `protobuf:"bytes,3,opt,name=whereRange,proto3" json:"whereRange,omitempty"`
	SqlHintS            string `protobuf:"bytes,4,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
}

func (x *DataMigrateRule) Reset() {
	*x = DataMigrateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMigrateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMigrateRule) ProtoMessage() {}

func (x *DataMigrateRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMigrateRule.ProtoReflect.Descriptor instead.
func (*DataMigrateRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{44}
}

func (x *DataMigrateRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *DataMigrateRule) GetEnableChunkStrategy() bool {
	if x != nil {
		return x.EnableChunkStrategy
	}
	return false
}

func (x *DataMigrateRule) GetWhereRange() string {
	if x != nil {
		return x.WhereRange
	}
	return ""
}

func (x *DataMigrateRule) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

type DataMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableThread          uint64 `protobuf:"varint,1,opt,name=tableThread,proto3" json:"tableThread,omitempty"`
	BatchSize            uint64 `protobuf:"varint,2,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	ChunkSize            uint64 `protobuf:"varint,3,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	SqlThreadS           uint64 `protobuf:"varint,4,opt,name=sqlThreadS,proto3" json:"sqlThreadS,omitempty"`
	SqlHintS             string `protobuf:"bytes,5,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
	SqlThreadT           uint64 `protobuf:"varint,6,opt,name=sqlThreadT,proto3" json:"sqlThreadT,omitempty"`
	SqlHintT             string `protobuf:"bytes,7,opt,name=sqlHintT,proto3" json:"sqlHintT,omitempty"`
	CallTimeout          uint64 `protobuf:"varint,8,opt,name=callTimeout,proto3" json:"callTimeout,omitempty"`
	EnableCheckpoint     bool   `protobuf:"varint,9,opt,name=enableCheckpoint,proto3" json:"enableCheckpoint,omitempty"`
	EnableConsistentRead bool   `protobuf:"varint,10,opt,name=enableConsistentRead,proto3" json:"enableConsistentRead,omitempty"`
}

func (x *DataMigrateParam) Reset() {
	*x = DataMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMigrateParam) ProtoMessage() {}

func (x *DataMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMigrateParam.ProtoReflect.Descriptor instead.
func (*DataMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{45}
}

func (x *DataMigrateParam) GetTableThread() uint64 {
	if x != nil {
		return x.TableThread
	}
	return 0
}

func (x *DataMigrateParam) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *DataMigrateParam) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *DataMigrateParam) GetSqlThreadS() uint64 {
	if x != nil {
		return x.SqlThreadS
	}
	return 0
}

func (x *DataMigrateParam) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

func (x *DataMigrateParam) GetSqlThreadT() uint64 {
	if x != nil {
		return x.SqlThreadT
	}
	return 0
}

func (x *DataMigrateParam) GetSqlHintT() string {
	if x != nil {
		return x.SqlHintT
	}
	return ""
}

func (x *DataMigrateParam) GetCallTimeout() uint64 {
	if x != nil {
		return x.CallTimeout
	}
	return 0
}

func (x *DataMigrateParam) GetEnableCheckpoint() bool {
	if x != nil {
		return x.EnableCheckpoint
	}
	return false
}

func (x *DataMigrateParam) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

type SqlMigrateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlQueryS        string            `protobuf:"bytes,1,opt,name=sqlQueryS,proto3" json:"sqlQueryS,omitempty"`
	SchemaNameT      string            `protobuf:"bytes,2,opt,name=schemaNameT,proto3" json:"schemaNameT,omitempty"`
	TableNameT       string            `protobuf:"bytes,3,opt,name=tableNameT,proto3" json:"tableNameT,omitempty"`
	SqlHintT         string            `protobuf:"bytes,4,opt,name=sqlHintT,proto3" json:"sqlHintT,omitempty"`
	ColumnRouteRules map[string]string `protobuf:"bytes,5,rep,name=columnRouteRules,proto3" json:"columnRouteRules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SqlMigrateRule) Reset() {
	*x = SqlMigrateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMigrateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMigrateRule) ProtoMessage() {}

func (x *SqlMigrateRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMigrateRule.ProtoReflect.Descriptor instead.
func (*SqlMigrateRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{46}
}

func (x *SqlMigrateRule) GetSqlQueryS() string {
	if x != nil {
		return x.SqlQueryS
	}
	return ""
}

func (x *SqlMigrateRule) GetSchemaNameT() string {
	if x != nil {
		return x.SchemaNameT
	}
	return ""
}

func (x *SqlMigrateRule) GetTableNameT() string {
	if x != nil {
		return x.TableNameT
	}
	return ""
}

func (x *SqlMigrateRule) GetSqlHintT() string {
	if x != nil {
		return x.SqlHintT
	}
	return ""
}

func (x *SqlMigrateRule) GetColumnRouteRules() map[string]string {
	if x != nil {
		return x.ColumnRouteRules
	}
	return nil
}

type SqlMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize            uint64 `protobuf:"varint,1,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	SqlThreadS           uint64 `protobuf:"varint,2,opt,name=sqlThreadS,proto3" json:"sqlThreadS,omitempty"`
	SqlThreadT           uint64 `protobuf:"varint,3,opt,name=sqlThreadT,proto3" json:"sqlThreadT,omitempty"`
	SqlHintT             string `protobuf:"bytes,4,opt,name=sqlHintT,proto3" json:"sqlHintT,omitempty"`
	CallTimeout          uint64 `protobuf:"varint,5,opt,name=callTimeout,proto3" json:"callTimeout,omitempty"`
	EnableConsistentRead bool   `protobuf:"varint,6,opt,name=enableConsistentRead,proto3" json:"enableConsistentRead,omitempty"`
}

func (x *SqlMigrateParam) Reset() {
	*x = SqlMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMigrateParam) ProtoMessage() {}

func (x *SqlMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMigrateParam.ProtoReflect.Descriptor instead.
func (*SqlMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{47}
}

func (x *SqlMigrateParam) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *SqlMigrateParam) GetSqlThreadS() uint64 {
	if x != nil {
		return x.SqlThreadS
	}
	return 0
}

func (x *SqlMigrateParam) GetSqlThreadT() uint64 {
	if x != nil {
		return x.SqlThreadT
	}
	return 0
}

func (x *SqlMigrateParam) GetSqlHintT() string {
	if x != nil {
		return x.SqlHintT
	}
	return ""
}

func (x *SqlMigrateParam) GetCallTimeout() uint64 {
	if x != nil {
		return x.CallTimeout
	}
	return 0
}

func (x *SqlMigrateParam) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

var File_dbms_master_proto protoreflect.FileDescriptor

var file_dbms_master_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x62, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x45,
	0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x14,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4c, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x47, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x45, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x03, 0x0a,
	0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x12,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x1c, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x4c, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1b, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6,
	0x02, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4b, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71,
	0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x4b, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x19,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x64, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x64,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa6,
	0x02, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x57, 0x0a, 0x10, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x22, 0xe7, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x42, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a,
	0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x22, 0xe3, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x22, 0x86, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x22,
	0x76, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x53, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x73, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x54, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x30, 0x0a, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x22, 0xea, 0x02, 0x0a, 0x10, 0x44, 0x61,
	0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x71,
	0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48,
	0x69, 0x6e, 0x74, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48,
	0x69, 0x6e, 0x74, 0x54, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x71,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c,
	0x48, 0x69, 0x6e, 0x74, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c,
	0x48, 0x69, 0x6e, 0x74, 0x54, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x43,
	0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74,
	0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74,
	0x54, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x32, 0xb6, 0x10, 0x0a, 0x06, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x71, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x79, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0e, 0x53,
	0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x95, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x1a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a,
	0x12, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x2a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a,
	0x42, 0x0a, 0x5a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dbms_master_proto_rawDescOnce sync.Once
	file_dbms_master_proto_rawDescData = file_dbms_master_proto_rawDesc
)

func file_dbms_master_proto_rawDescGZIP() []byte {
	file_dbms_master_proto_rawDescOnce.Do(func() {
		file_dbms_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_dbms_master_proto_rawDescData)
	})
	return file_dbms_master_proto_rawDescData
}

var file_dbms_master_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_dbms_master_proto_goTypes = []interface{}{
	(*UpsertDatabaseRequest)(nil),           // 0: proto.UpsertDatabaseRequest
	(*UpsertDatabaseResponse)(nil),          // 1: proto.UpsertDatabaseResponse
	(*DeleteDatabaseRequest)(nil),           // 2: proto.DeleteDatabaseRequest
	(*DeleteDatabaseResponse)(nil),          // 3: proto.DeleteDatabaseResponse
	(*ShowDatabaseRequest)(nil),             // 4: proto.ShowDatabaseRequest
	(*ShowDatabaseResponse)(nil),            // 5: proto.ShowDatabaseResponse
	(*UpsertDatasourceRequest)(nil),         // 6: proto.UpsertDatasourceRequest
	(*UpsertDatasourceResponse)(nil),        // 7: proto.UpsertDatasourceResponse
	(*DeleteDatasourceRequest)(nil),         // 8: proto.DeleteDatasourceRequest
	(*DeleteDatasourceResponse)(nil),        // 9: proto.DeleteDatasourceResponse
	(*ShowDatasourceRequest)(nil),           // 10: proto.ShowDatasourceRequest
	(*ShowDatasourceResponse)(nil),          // 11: proto.ShowDatasourceResponse
	(*UpsertStructMigrateTaskRequest)(nil),  // 12: proto.UpsertStructMigrateTaskRequest
	(*UpsertStructMigrateTaskResponse)(nil), // 13: proto.UpsertStructMigrateTaskResponse
	(*DeleteStructMigrateTaskRequest)(nil),  // 14: proto.DeleteStructMigrateTaskRequest
	(*DeleteStructMigrateTaskResponse)(nil), // 15: proto.DeleteStructMigrateTaskResponse
	(*ShowStructMigrateTaskRequest)(nil),    // 16: proto.ShowStructMigrateTaskRequest
	(*ShowStructMigrateTaskResponse)(nil),   // 17: proto.ShowStructMigrateTaskResponse
	(*UpsertDataMigrateTaskRequest)(nil),    // 18: proto.UpsertDataMigrateTaskRequest
	(*UpsertDataMigrateTaskResponse)(nil),   // 19: proto.UpsertDataMigrateTaskResponse
	(*DeleteDataMigrateTaskRequest)(nil),    // 20: proto.DeleteDataMigrateTaskRequest
	(*DeleteDataMigrateTaskResponse)(nil),   // 21: proto.DeleteDataMigrateTaskResponse
	(*ShowDataMigrateTaskRequest)(nil),      // 22: proto.ShowDataMigrateTaskRequest
	(*ShowDataMigrateTaskResponse)(nil),     // 23: proto.ShowDataMigrateTaskResponse
	(*UpsertSqlMigrateTaskRequest)(nil),     // 24: proto.UpsertSqlMigrateTaskRequest
	(*UpsertSqlMigrateTaskResponse)(nil),    // 25: proto.UpsertSqlMigrateTaskResponse
	(*DeleteSqlMigrateTaskRequest)(nil),     // 26: proto.DeleteSqlMigrateTaskRequest
	(*DeleteSqlMigrateTaskResponse)(nil),    // 27: proto.DeleteSqlMigrateTaskResponse
	(*ShowSqlMigrateTaskRequest)(nil),       // 28: proto.ShowSqlMigrateTaskRequest
	(*ShowSqlMigrateTaskResponse)(nil),      // 29: proto.ShowSqlMigrateTaskResponse
	(*OperateTaskRequest)(nil),              // 30: proto.OperateTaskRequest
	(*OperateTaskResponse)(nil),             // 31: proto.OperateTaskResponse
	(*Database)(nil),                        // 32: proto.Database
	(*Datasource)(nil),                      // 33: proto.Datasource
	(*SchemaRouteRule)(nil),                 // 34: proto.SchemaRouteRule
	(*CaseFieldRule)(nil),                   // 35: proto.CaseFieldRule
	(*TableRouteRule)(nil),                  // 36: proto.TableRouteRule
	(*StructMigrateParam)(nil),              // 37: proto.StructMigrateParam
	(*StructMigrateRule)(nil),               // 38: proto.StructMigrateRule
	(*TaskStructRule)(nil),                  // 39: proto.TaskStructRule
	(*SchemaStructRule)(nil),                // 40: proto.SchemaStructRule
	(*TableStructRule)(nil),                 // 41: proto.TableStructRule
	(*ColumnStructRule)(nil),                // 42: proto.ColumnStructRule
	(*TableAttrsRule)(nil),                  // 43: proto.TableAttrsRule
	(*DataMigrateRule)(nil),                 // 44: proto.DataMigrateRule
	(*DataMigrateParam)(nil),                // 45: proto.DataMigrateParam
	(*SqlMigrateRule)(nil),                  // 46: proto.SqlMigrateRule
	(*SqlMigrateParam)(nil),                 // 47: proto.SqlMigrateParam
	nil,                                     // 48: proto.TableRouteRule.ColumnRouteRulesEntry
	nil,                                     // 49: proto.SqlMigrateRule.ColumnRouteRulesEntry
	(*Response)(nil),                        // 50: proto.Response
}
var file_dbms_master_proto_depIdxs = []int32{
	32, // 0: proto.UpsertDatabaseRequest.database:type_name -> proto.Database
	50, // 1: proto.UpsertDatabaseResponse.response:type_name -> proto.Response
	50, // 2: proto.DeleteDatabaseResponse.response:type_name -> proto.Response
	50, // 3: proto.ShowDatabaseResponse.response:type_name -> proto.Response
	33, // 4: proto.UpsertDatasourceRequest.datasource:type_name -> proto.Datasource
	50, // 5: proto.UpsertDatasourceResponse.response:type_name -> proto.Response
	50, // 6: proto.DeleteDatasourceResponse.response:type_name -> proto.Response
	50, // 7: proto.ShowDatasourceResponse.response:type_name -> proto.Response
	35, // 8: proto.UpsertStructMigrateTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	34, // 9: proto.UpsertStructMigrateTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	37, // 10: proto.UpsertStructMigrateTaskRequest.structMigrateParam:type_name -> proto.StructMigrateParam
	38, // 11: proto.UpsertStructMigrateTaskRequest.structMigrateRule:type_name -> proto.StructMigrateRule
	50, // 12: proto.UpsertStructMigrateTaskResponse.response:type_name -> proto.Response
	50, // 13: proto.DeleteStructMigrateTaskResponse.response:type_name -> proto.Response
	50, // 14: proto.ShowStructMigrateTaskResponse.response:type_name -> proto.Response
	35, // 15: proto.UpsertDataMigrateTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	34, // 16: proto.UpsertDataMigrateTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	45, // 17: proto.UpsertDataMigrateTaskRequest.dataMigrateParam:type_name -> proto.DataMigrateParam
	50, // 18: proto.UpsertDataMigrateTaskResponse.response:type_name -> proto.Response
	50, // 19: proto.DeleteDataMigrateTaskResponse.response:type_name -> proto.Response
	50, // 20: proto.ShowDataMigrateTaskResponse.response:type_name -> proto.Response
	35, // 21: proto.UpsertSqlMigrateTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	46, // 22: proto.UpsertSqlMigrateTaskRequest.SqlMigrateRules:type_name -> proto.SqlMigrateRule
	47, // 23: proto.UpsertSqlMigrateTaskRequest.sqlMigrateParam:type_name -> proto.SqlMigrateParam
	50, // 24: proto.UpsertSqlMigrateTaskResponse.response:type_name -> proto.Response
	50, // 25: proto.DeleteSqlMigrateTaskResponse.response:type_name -> proto.Response
	50, // 26: proto.ShowSqlMigrateTaskResponse.response:type_name -> proto.Response
	50, // 27: proto.OperateTaskResponse.response:type_name -> proto.Response
	36, // 28: proto.SchemaRouteRule.tableRouteRules:type_name -> proto.TableRouteRule
	44, // 29: proto.SchemaRouteRule.DataMigrateRules:type_name -> proto.DataMigrateRule
	48, // 30: proto.TableRouteRule.columnRouteRules:type_name -> proto.TableRouteRule.ColumnRouteRulesEntry
	39, // 31: proto.StructMigrateRule.taskStructRules:type_name -> proto.TaskStructRule
	40, // 32: proto.StructMigrateRule.schemaStructRules:type_name -> proto.SchemaStructRule
	41, // 33: proto.StructMigrateRule.tableStructRules:type_name -> proto.TableStructRule
	42, // 34: proto.StructMigrateRule.columnStructRules:type_name -> proto.ColumnStructRule
	43, // 35: proto.StructMigrateRule.tableAttrsRules:type_name -> proto.TableAttrsRule
	49, // 36: proto.SqlMigrateRule.columnRouteRules:type_name -> proto.SqlMigrateRule.ColumnRouteRulesEntry
	0,  // 37: proto.Master.UpsertDatabase:input_type -> proto.UpsertDatabaseRequest
	2,  // 38: proto.Master.DeleteDatabase:input_type -> proto.DeleteDatabaseRequest
	4,  // 39: proto.Master.ShowDatabase:input_type -> proto.ShowDatabaseRequest
	6,  // 40: proto.Master.UpsertDatasource:input_type -> proto.UpsertDatasourceRequest
	8,  // 41: proto.Master.DeleteDatasource:input_type -> proto.DeleteDatasourceRequest
	10, // 42: proto.Master.ShowDatasource:input_type -> proto.ShowDatasourceRequest
	12, // 43: proto.Master.UpsertStructMigrateTask:input_type -> proto.UpsertStructMigrateTaskRequest
	14, // 44: proto.Master.DeleteStructMigrateTask:input_type -> proto.DeleteStructMigrateTaskRequest
	16, // 45: proto.Master.ShowStructMigrateTask:input_type -> proto.ShowStructMigrateTaskRequest
	18, // 46: proto.Master.UpsertDataMigrateTask:input_type -> proto.UpsertDataMigrateTaskRequest
	20, // 47: proto.Master.DeleteDataMigrateTask:input_type -> proto.DeleteDataMigrateTaskRequest
	22, // 48: proto.Master.ShowDataMigrateTask:input_type -> proto.ShowDataMigrateTaskRequest
	24, // 49: proto.Master.UpsertSqlMigrateTask:input_type -> proto.UpsertSqlMigrateTaskRequest
	26, // 50: proto.Master.DeleteSqlMigrateTask:input_type -> proto.DeleteSqlMigrateTaskRequest
	28, // 51: proto.Master.ShowSqlMigrateTask:input_type -> proto.ShowSqlMigrateTaskRequest
	30, // 52: proto.Master.OperateTask:input_type -> proto.OperateTaskRequest
	1,  // 53: proto.Master.UpsertDatabase:output_type -> proto.UpsertDatabaseResponse
	3,  // 54: proto.Master.DeleteDatabase:output_type -> proto.DeleteDatabaseResponse
	5,  // 55: proto.Master.ShowDatabase:output_type -> proto.ShowDatabaseResponse
	7,  // 56: proto.Master.UpsertDatasource:output_type -> proto.UpsertDatasourceResponse
	9,  // 57: proto.Master.DeleteDatasource:output_type -> proto.DeleteDatasourceResponse
	11, // 58: proto.Master.ShowDatasource:output_type -> proto.ShowDatasourceResponse
	13, // 59: proto.Master.UpsertStructMigrateTask:output_type -> proto.UpsertStructMigrateTaskResponse
	15, // 60: proto.Master.DeleteStructMigrateTask:output_type -> proto.DeleteStructMigrateTaskResponse
	17, // 61: proto.Master.ShowStructMigrateTask:output_type -> proto.ShowStructMigrateTaskResponse
	19, // 62: proto.Master.UpsertDataMigrateTask:output_type -> proto.UpsertDataMigrateTaskResponse
	21, // 63: proto.Master.DeleteDataMigrateTask:output_type -> proto.DeleteDataMigrateTaskResponse
	23, // 64: proto.Master.ShowDataMigrateTask:output_type -> proto.ShowDataMigrateTaskResponse
	25, // 65: proto.Master.UpsertSqlMigrateTask:output_type -> proto.UpsertSqlMigrateTaskResponse
	27, // 66: proto.Master.DeleteSqlMigrateTask:output_type -> proto.DeleteSqlMigrateTaskResponse
	29, // 67: proto.Master.ShowSqlMigrateTask:output_type -> proto.ShowSqlMigrateTaskResponse
	31, // 68: proto.Master.OperateTask:output_type -> proto.OperateTaskResponse
	53, // [53:69] is the sub-list for method output_type
	37, // [37:53] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_dbms_master_proto_init() }
func file_dbms_master_proto_init() {
	if File_dbms_master_proto != nil {
		return
	}
	file_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dbms_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatasourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatasourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatasourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatasourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStructMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStructMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStructMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStructMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStructMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStructMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDataMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDataMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDataMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDataMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSqlMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSqlMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSqlMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSqlMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSqlMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSqlMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datasource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaRouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseFieldRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructMigrateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableAttrsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMigrateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMigrateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dbms_master_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dbms_master_proto_goTypes,
		DependencyIndexes: file_dbms_master_proto_depIdxs,
		MessageInfos:      file_dbms_master_proto_msgTypes,
	}.Build()
	File_dbms_master_proto = out.File
	file_dbms_master_proto_rawDesc = nil
	file_dbms_master_proto_goTypes = nil
	file_dbms_master_proto_depIdxs = nil
}
