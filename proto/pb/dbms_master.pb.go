// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: dbms_master.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息结构体
type UpsertDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database *Database `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *UpsertDatabaseRequest) Reset() {
	*x = UpsertDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatabaseRequest) ProtoMessage() {}

func (x *UpsertDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatabaseRequest.ProtoReflect.Descriptor instead.
func (*UpsertDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertDatabaseRequest) GetDatabase() *Database {
	if x != nil {
		return x.Database
	}
	return nil
}

type UpsertDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertDatabaseResponse) Reset() {
	*x = UpsertDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatabaseResponse) ProtoMessage() {}

func (x *UpsertDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatabaseResponse.ProtoReflect.Descriptor instead.
func (*UpsertDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertDatabaseResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDatabaseRequest) Reset() {
	*x = DeleteDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseRequest) ProtoMessage() {}

func (x *DeleteDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{2}
}

type DeleteDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteDatabaseResponse) Reset() {
	*x = DeleteDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatabaseResponse) ProtoMessage() {}

func (x *DeleteDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatabaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteDatabaseResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowDatabaseRequest) Reset() {
	*x = ShowDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatabaseRequest) ProtoMessage() {}

func (x *ShowDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ShowDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{4}
}

type ShowDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowDatabaseResponse) Reset() {
	*x = ShowDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatabaseResponse) ProtoMessage() {}

func (x *ShowDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatabaseResponse.ProtoReflect.Descriptor instead.
func (*ShowDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{5}
}

func (x *ShowDatabaseResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertDatasourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasource []*Datasource `protobuf:"bytes,1,rep,name=datasource,proto3" json:"datasource,omitempty"`
}

func (x *UpsertDatasourceRequest) Reset() {
	*x = UpsertDatasourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatasourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatasourceRequest) ProtoMessage() {}

func (x *UpsertDatasourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatasourceRequest.ProtoReflect.Descriptor instead.
func (*UpsertDatasourceRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertDatasourceRequest) GetDatasource() []*Datasource {
	if x != nil {
		return x.Datasource
	}
	return nil
}

type UpsertDatasourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertDatasourceResponse) Reset() {
	*x = UpsertDatasourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDatasourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDatasourceResponse) ProtoMessage() {}

func (x *UpsertDatasourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDatasourceResponse.ProtoReflect.Descriptor instead.
func (*UpsertDatasourceResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{7}
}

func (x *UpsertDatasourceResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteDatasourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasourceName []string `protobuf:"bytes,2,rep,name=datasourceName,proto3" json:"datasourceName,omitempty"`
}

func (x *DeleteDatasourceRequest) Reset() {
	*x = DeleteDatasourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasourceRequest) ProtoMessage() {}

func (x *DeleteDatasourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasourceRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDatasourceRequest) GetDatasourceName() []string {
	if x != nil {
		return x.DatasourceName
	}
	return nil
}

type DeleteDatasourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteDatasourceResponse) Reset() {
	*x = DeleteDatasourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasourceResponse) ProtoMessage() {}

func (x *DeleteDatasourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasourceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDatasourceResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDatasourceResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowDatasourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasourceName string `protobuf:"bytes,1,opt,name=datasourceName,proto3" json:"datasourceName,omitempty"`
	Page           uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowDatasourceRequest) Reset() {
	*x = ShowDatasourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatasourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatasourceRequest) ProtoMessage() {}

func (x *ShowDatasourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatasourceRequest.ProtoReflect.Descriptor instead.
func (*ShowDatasourceRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{10}
}

func (x *ShowDatasourceRequest) GetDatasourceName() string {
	if x != nil {
		return x.DatasourceName
	}
	return ""
}

func (x *ShowDatasourceRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowDatasourceRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowDatasourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowDatasourceResponse) Reset() {
	*x = ShowDatasourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDatasourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDatasourceResponse) ProtoMessage() {}

func (x *ShowDatasourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDatasourceResponse.ProtoReflect.Descriptor instead.
func (*ShowDatasourceResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{11}
}

func (x *ShowDatasourceResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertAssessMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName           string              `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS    string              `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT    string              `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment            string              `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	AssessMigrateParam *AssessMigrateParam `protobuf:"bytes,5,opt,name=assessMigrateParam,proto3" json:"assessMigrateParam,omitempty"`
}

func (x *UpsertAssessMigrateTaskRequest) Reset() {
	*x = UpsertAssessMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAssessMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAssessMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertAssessMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAssessMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertAssessMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertAssessMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertAssessMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertAssessMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertAssessMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertAssessMigrateTaskRequest) GetAssessMigrateParam() *AssessMigrateParam {
	if x != nil {
		return x.AssessMigrateParam
	}
	return nil
}

type UpsertAssessMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertAssessMigrateTaskResponse) Reset() {
	*x = UpsertAssessMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertAssessMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertAssessMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertAssessMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertAssessMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertAssessMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{13}
}

func (x *UpsertAssessMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteAssessMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteAssessMigrateTaskRequest) Reset() {
	*x = DeleteAssessMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssessMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteAssessMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssessMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAssessMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteAssessMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteAssessMigrateTaskResponse) Reset() {
	*x = DeleteAssessMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAssessMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssessMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteAssessMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssessMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteAssessMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteAssessMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowAssessMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowAssessMigrateTaskRequest) Reset() {
	*x = ShowAssessMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAssessMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAssessMigrateTaskRequest) ProtoMessage() {}

func (x *ShowAssessMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAssessMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowAssessMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{16}
}

func (x *ShowAssessMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowAssessMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowAssessMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowAssessMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowAssessMigrateTaskResponse) Reset() {
	*x = ShowAssessMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowAssessMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowAssessMigrateTaskResponse) ProtoMessage() {}

func (x *ShowAssessMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowAssessMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowAssessMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{17}
}

func (x *ShowAssessMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertStructMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName           string              `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS    string              `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT    string              `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment            string              `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule      *CaseFieldRule      `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	StructMigrateParam *StructMigrateParam `protobuf:"bytes,7,opt,name=structMigrateParam,proto3" json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `protobuf:"bytes,8,opt,name=structMigrateRule,proto3" json:"structMigrateRule,omitempty"`
}

func (x *UpsertStructMigrateTaskRequest) Reset() {
	*x = UpsertStructMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStructMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStructMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertStructMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStructMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertStructMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertStructMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertStructMigrateTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertStructMigrateTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertStructMigrateTaskRequest) GetStructMigrateParam() *StructMigrateParam {
	if x != nil {
		return x.StructMigrateParam
	}
	return nil
}

func (x *UpsertStructMigrateTaskRequest) GetStructMigrateRule() *StructMigrateRule {
	if x != nil {
		return x.StructMigrateRule
	}
	return nil
}

type UpsertStructMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertStructMigrateTaskResponse) Reset() {
	*x = UpsertStructMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStructMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStructMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertStructMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStructMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertStructMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{19}
}

func (x *UpsertStructMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteStructMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteStructMigrateTaskRequest) Reset() {
	*x = DeleteStructMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStructMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStructMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteStructMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStructMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteStructMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteStructMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteStructMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteStructMigrateTaskResponse) Reset() {
	*x = DeleteStructMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStructMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStructMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteStructMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStructMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteStructMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteStructMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowStructMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowStructMigrateTaskRequest) Reset() {
	*x = ShowStructMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStructMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStructMigrateTaskRequest) ProtoMessage() {}

func (x *ShowStructMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStructMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowStructMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{22}
}

func (x *ShowStructMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowStructMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowStructMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowStructMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowStructMigrateTaskResponse) Reset() {
	*x = ShowStructMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStructMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStructMigrateTaskResponse) ProtoMessage() {}

func (x *ShowStructMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStructMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowStructMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{23}
}

func (x *ShowStructMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertStructCompareTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName           string              `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS    string              `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT    string              `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment            string              `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule      *CaseFieldRule      `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	StructCompareParam *StructCompareParam `protobuf:"bytes,7,opt,name=structCompareParam,proto3" json:"structCompareParam,omitempty"`
	StructCompareRule  *StructCompareRule  `protobuf:"bytes,8,opt,name=structCompareRule,proto3" json:"structCompareRule,omitempty"`
}

func (x *UpsertStructCompareTaskRequest) Reset() {
	*x = UpsertStructCompareTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStructCompareTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStructCompareTaskRequest) ProtoMessage() {}

func (x *UpsertStructCompareTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStructCompareTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertStructCompareTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{24}
}

func (x *UpsertStructCompareTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertStructCompareTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertStructCompareTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertStructCompareTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertStructCompareTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertStructCompareTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertStructCompareTaskRequest) GetStructCompareParam() *StructCompareParam {
	if x != nil {
		return x.StructCompareParam
	}
	return nil
}

func (x *UpsertStructCompareTaskRequest) GetStructCompareRule() *StructCompareRule {
	if x != nil {
		return x.StructCompareRule
	}
	return nil
}

type UpsertStructCompareTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertStructCompareTaskResponse) Reset() {
	*x = UpsertStructCompareTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStructCompareTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStructCompareTaskResponse) ProtoMessage() {}

func (x *UpsertStructCompareTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStructCompareTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertStructCompareTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{25}
}

func (x *UpsertStructCompareTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteStructCompareTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteStructCompareTaskRequest) Reset() {
	*x = DeleteStructCompareTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStructCompareTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStructCompareTaskRequest) ProtoMessage() {}

func (x *DeleteStructCompareTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStructCompareTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteStructCompareTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteStructCompareTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteStructCompareTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteStructCompareTaskResponse) Reset() {
	*x = DeleteStructCompareTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStructCompareTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStructCompareTaskResponse) ProtoMessage() {}

func (x *DeleteStructCompareTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStructCompareTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteStructCompareTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteStructCompareTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowStructCompareTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowStructCompareTaskRequest) Reset() {
	*x = ShowStructCompareTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStructCompareTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStructCompareTaskRequest) ProtoMessage() {}

func (x *ShowStructCompareTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStructCompareTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowStructCompareTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{28}
}

func (x *ShowStructCompareTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowStructCompareTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowStructCompareTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowStructCompareTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowStructCompareTaskResponse) Reset() {
	*x = ShowStructCompareTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStructCompareTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStructCompareTaskResponse) ProtoMessage() {}

func (x *ShowStructCompareTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStructCompareTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowStructCompareTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{29}
}

func (x *ShowStructCompareTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertStmtMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName              string                 `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS       string                 `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT       string                 `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment               string                 `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule         *CaseFieldRule         `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule       *SchemaRouteRule       `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	DataMigrateRules      []*DataMigrateRule     `protobuf:"bytes,7,rep,name=DataMigrateRules,proto3" json:"DataMigrateRules,omitempty"`
	StatementMigrateParam *StatementMigrateParam `protobuf:"bytes,8,opt,name=statementMigrateParam,proto3" json:"statementMigrateParam,omitempty"`
}

func (x *UpsertStmtMigrateTaskRequest) Reset() {
	*x = UpsertStmtMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStmtMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStmtMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertStmtMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStmtMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertStmtMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{30}
}

func (x *UpsertStmtMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertStmtMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertStmtMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertStmtMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertStmtMigrateTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertStmtMigrateTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertStmtMigrateTaskRequest) GetDataMigrateRules() []*DataMigrateRule {
	if x != nil {
		return x.DataMigrateRules
	}
	return nil
}

func (x *UpsertStmtMigrateTaskRequest) GetStatementMigrateParam() *StatementMigrateParam {
	if x != nil {
		return x.StatementMigrateParam
	}
	return nil
}

type UpsertStmtMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertStmtMigrateTaskResponse) Reset() {
	*x = UpsertStmtMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStmtMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStmtMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertStmtMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStmtMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertStmtMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{31}
}

func (x *UpsertStmtMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteStmtMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteStmtMigrateTaskRequest) Reset() {
	*x = DeleteStmtMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStmtMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStmtMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteStmtMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStmtMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteStmtMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteStmtMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteStmtMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteStmtMigrateTaskResponse) Reset() {
	*x = DeleteStmtMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStmtMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStmtMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteStmtMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStmtMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteStmtMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteStmtMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowStmtMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowStmtMigrateTaskRequest) Reset() {
	*x = ShowStmtMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStmtMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStmtMigrateTaskRequest) ProtoMessage() {}

func (x *ShowStmtMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStmtMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowStmtMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{34}
}

func (x *ShowStmtMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowStmtMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowStmtMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowStmtMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowStmtMigrateTaskResponse) Reset() {
	*x = ShowStmtMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowStmtMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStmtMigrateTaskResponse) ProtoMessage() {}

func (x *ShowStmtMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStmtMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowStmtMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{35}
}

func (x *ShowStmtMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertSqlMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName        string            `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS string            `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT string            `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment         string            `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule   *CaseFieldRule    `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SqlMigrateRules []*SqlMigrateRule `protobuf:"bytes,6,rep,name=SqlMigrateRules,proto3" json:"SqlMigrateRules,omitempty"`
	SqlMigrateParam *SqlMigrateParam  `protobuf:"bytes,7,opt,name=sqlMigrateParam,proto3" json:"sqlMigrateParam,omitempty"`
}

func (x *UpsertSqlMigrateTaskRequest) Reset() {
	*x = UpsertSqlMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSqlMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSqlMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertSqlMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSqlMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertSqlMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{36}
}

func (x *UpsertSqlMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertSqlMigrateTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertSqlMigrateTaskRequest) GetSqlMigrateRules() []*SqlMigrateRule {
	if x != nil {
		return x.SqlMigrateRules
	}
	return nil
}

func (x *UpsertSqlMigrateTaskRequest) GetSqlMigrateParam() *SqlMigrateParam {
	if x != nil {
		return x.SqlMigrateParam
	}
	return nil
}

type UpsertSqlMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertSqlMigrateTaskResponse) Reset() {
	*x = UpsertSqlMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSqlMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSqlMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertSqlMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSqlMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertSqlMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{37}
}

func (x *UpsertSqlMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteSqlMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteSqlMigrateTaskRequest) Reset() {
	*x = DeleteSqlMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSqlMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSqlMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteSqlMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSqlMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteSqlMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{38}
}

func (x *DeleteSqlMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteSqlMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteSqlMigrateTaskResponse) Reset() {
	*x = DeleteSqlMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSqlMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSqlMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteSqlMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSqlMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteSqlMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteSqlMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowSqlMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowSqlMigrateTaskRequest) Reset() {
	*x = ShowSqlMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSqlMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSqlMigrateTaskRequest) ProtoMessage() {}

func (x *ShowSqlMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSqlMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowSqlMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{40}
}

func (x *ShowSqlMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowSqlMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowSqlMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowSqlMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowSqlMigrateTaskResponse) Reset() {
	*x = ShowSqlMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowSqlMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowSqlMigrateTaskResponse) ProtoMessage() {}

func (x *ShowSqlMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowSqlMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowSqlMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{41}
}

func (x *ShowSqlMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertCsvMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName         string             `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS  string             `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT  string             `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment          string             `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule    *CaseFieldRule     `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	DataMigrateRules []*DataMigrateRule `protobuf:"bytes,7,rep,name=DataMigrateRules,proto3" json:"DataMigrateRules,omitempty"`
	CsvMigrateParam  *CsvMigrateParam   `protobuf:"bytes,8,opt,name=CsvMigrateParam,proto3" json:"CsvMigrateParam,omitempty"`
}

func (x *UpsertCsvMigrateTaskRequest) Reset() {
	*x = UpsertCsvMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCsvMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCsvMigrateTaskRequest) ProtoMessage() {}

func (x *UpsertCsvMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCsvMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertCsvMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{42}
}

func (x *UpsertCsvMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertCsvMigrateTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertCsvMigrateTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertCsvMigrateTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertCsvMigrateTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertCsvMigrateTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertCsvMigrateTaskRequest) GetDataMigrateRules() []*DataMigrateRule {
	if x != nil {
		return x.DataMigrateRules
	}
	return nil
}

func (x *UpsertCsvMigrateTaskRequest) GetCsvMigrateParam() *CsvMigrateParam {
	if x != nil {
		return x.CsvMigrateParam
	}
	return nil
}

type UpsertCsvMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertCsvMigrateTaskResponse) Reset() {
	*x = UpsertCsvMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCsvMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCsvMigrateTaskResponse) ProtoMessage() {}

func (x *UpsertCsvMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCsvMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertCsvMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{43}
}

func (x *UpsertCsvMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteCsvMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteCsvMigrateTaskRequest) Reset() {
	*x = DeleteCsvMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCsvMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCsvMigrateTaskRequest) ProtoMessage() {}

func (x *DeleteCsvMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCsvMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteCsvMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteCsvMigrateTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteCsvMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteCsvMigrateTaskResponse) Reset() {
	*x = DeleteCsvMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCsvMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCsvMigrateTaskResponse) ProtoMessage() {}

func (x *DeleteCsvMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCsvMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteCsvMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteCsvMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowCsvMigrateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowCsvMigrateTaskRequest) Reset() {
	*x = ShowCsvMigrateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCsvMigrateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCsvMigrateTaskRequest) ProtoMessage() {}

func (x *ShowCsvMigrateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCsvMigrateTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowCsvMigrateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{46}
}

func (x *ShowCsvMigrateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowCsvMigrateTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowCsvMigrateTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowCsvMigrateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowCsvMigrateTaskResponse) Reset() {
	*x = ShowCsvMigrateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowCsvMigrateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowCsvMigrateTaskResponse) ProtoMessage() {}

func (x *ShowCsvMigrateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowCsvMigrateTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowCsvMigrateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{47}
}

func (x *ShowCsvMigrateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertDataCompareTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName         string             `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS  string             `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT  string             `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment          string             `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule    *CaseFieldRule     `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	DataCompareRules []*DataCompareRule `protobuf:"bytes,7,rep,name=DataCompareRules,proto3" json:"DataCompareRules,omitempty"`
	DataCompareParam *DataCompareParam  `protobuf:"bytes,8,opt,name=DataCompareParam,proto3" json:"DataCompareParam,omitempty"`
}

func (x *UpsertDataCompareTaskRequest) Reset() {
	*x = UpsertDataCompareTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDataCompareTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDataCompareTaskRequest) ProtoMessage() {}

func (x *UpsertDataCompareTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDataCompareTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertDataCompareTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{48}
}

func (x *UpsertDataCompareTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertDataCompareTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertDataCompareTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertDataCompareTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertDataCompareTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertDataCompareTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertDataCompareTaskRequest) GetDataCompareRules() []*DataCompareRule {
	if x != nil {
		return x.DataCompareRules
	}
	return nil
}

func (x *UpsertDataCompareTaskRequest) GetDataCompareParam() *DataCompareParam {
	if x != nil {
		return x.DataCompareParam
	}
	return nil
}

type UpsertDataCompareTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertDataCompareTaskResponse) Reset() {
	*x = UpsertDataCompareTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDataCompareTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDataCompareTaskResponse) ProtoMessage() {}

func (x *UpsertDataCompareTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDataCompareTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertDataCompareTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{49}
}

func (x *UpsertDataCompareTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteDataCompareTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteDataCompareTaskRequest) Reset() {
	*x = DeleteDataCompareTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataCompareTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataCompareTaskRequest) ProtoMessage() {}

func (x *DeleteDataCompareTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataCompareTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataCompareTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteDataCompareTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteDataCompareTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteDataCompareTaskResponse) Reset() {
	*x = DeleteDataCompareTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataCompareTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataCompareTaskResponse) ProtoMessage() {}

func (x *DeleteDataCompareTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataCompareTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataCompareTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteDataCompareTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowDataCompareTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowDataCompareTaskRequest) Reset() {
	*x = ShowDataCompareTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDataCompareTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDataCompareTaskRequest) ProtoMessage() {}

func (x *ShowDataCompareTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDataCompareTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowDataCompareTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{52}
}

func (x *ShowDataCompareTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowDataCompareTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowDataCompareTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowDataCompareTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowDataCompareTaskResponse) Reset() {
	*x = ShowDataCompareTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDataCompareTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDataCompareTaskResponse) ProtoMessage() {}

func (x *ShowDataCompareTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDataCompareTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowDataCompareTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{53}
}

func (x *ShowDataCompareTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type UpsertDataScanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName        string           `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	DatasourceNameS string           `protobuf:"bytes,2,opt,name=datasourceNameS,proto3" json:"datasourceNameS,omitempty"`
	DatasourceNameT string           `protobuf:"bytes,3,opt,name=datasourceNameT,proto3" json:"datasourceNameT,omitempty"`
	Comment         string           `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CaseFieldRule   *CaseFieldRule   `protobuf:"bytes,5,opt,name=caseFieldRule,proto3" json:"caseFieldRule,omitempty"`
	SchemaRouteRule *SchemaRouteRule `protobuf:"bytes,6,opt,name=schemaRouteRule,proto3" json:"schemaRouteRule,omitempty"`
	DataScanRules   []*DataScanRule  `protobuf:"bytes,7,rep,name=DataScanRules,proto3" json:"DataScanRules,omitempty"`
	DataScanParam   *DataScanParam   `protobuf:"bytes,8,opt,name=DataScanParam,proto3" json:"DataScanParam,omitempty"`
}

func (x *UpsertDataScanTaskRequest) Reset() {
	*x = UpsertDataScanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDataScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDataScanTaskRequest) ProtoMessage() {}

func (x *UpsertDataScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDataScanTaskRequest.ProtoReflect.Descriptor instead.
func (*UpsertDataScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{54}
}

func (x *UpsertDataScanTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *UpsertDataScanTaskRequest) GetDatasourceNameS() string {
	if x != nil {
		return x.DatasourceNameS
	}
	return ""
}

func (x *UpsertDataScanTaskRequest) GetDatasourceNameT() string {
	if x != nil {
		return x.DatasourceNameT
	}
	return ""
}

func (x *UpsertDataScanTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpsertDataScanTaskRequest) GetCaseFieldRule() *CaseFieldRule {
	if x != nil {
		return x.CaseFieldRule
	}
	return nil
}

func (x *UpsertDataScanTaskRequest) GetSchemaRouteRule() *SchemaRouteRule {
	if x != nil {
		return x.SchemaRouteRule
	}
	return nil
}

func (x *UpsertDataScanTaskRequest) GetDataScanRules() []*DataScanRule {
	if x != nil {
		return x.DataScanRules
	}
	return nil
}

func (x *UpsertDataScanTaskRequest) GetDataScanParam() *DataScanParam {
	if x != nil {
		return x.DataScanParam
	}
	return nil
}

type UpsertDataScanTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *UpsertDataScanTaskResponse) Reset() {
	*x = UpsertDataScanTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDataScanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDataScanTaskResponse) ProtoMessage() {}

func (x *UpsertDataScanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDataScanTaskResponse.ProtoReflect.Descriptor instead.
func (*UpsertDataScanTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{55}
}

func (x *UpsertDataScanTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type DeleteDataScanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName []string `protobuf:"bytes,1,rep,name=taskName,proto3" json:"taskName,omitempty"`
}

func (x *DeleteDataScanTaskRequest) Reset() {
	*x = DeleteDataScanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataScanTaskRequest) ProtoMessage() {}

func (x *DeleteDataScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataScanTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteDataScanTaskRequest) GetTaskName() []string {
	if x != nil {
		return x.TaskName
	}
	return nil
}

type DeleteDataScanTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteDataScanTaskResponse) Reset() {
	*x = DeleteDataScanTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataScanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataScanTaskResponse) ProtoMessage() {}

func (x *DeleteDataScanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataScanTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataScanTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{57}
}

func (x *DeleteDataScanTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ShowDataScanTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Page     uint64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize uint64 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ShowDataScanTaskRequest) Reset() {
	*x = ShowDataScanTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDataScanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDataScanTaskRequest) ProtoMessage() {}

func (x *ShowDataScanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDataScanTaskRequest.ProtoReflect.Descriptor instead.
func (*ShowDataScanTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{58}
}

func (x *ShowDataScanTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *ShowDataScanTaskRequest) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ShowDataScanTaskRequest) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ShowDataScanTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ShowDataScanTaskResponse) Reset() {
	*x = ShowDataScanTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowDataScanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowDataScanTaskResponse) ProtoMessage() {}

func (x *ShowDataScanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowDataScanTaskResponse.ProtoReflect.Descriptor instead.
func (*ShowDataScanTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{59}
}

func (x *ShowDataScanTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type OperateTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operate  string `protobuf:"bytes,1,opt,name=operate,proto3" json:"operate,omitempty"`
	TaskName string `protobuf:"bytes,2,opt,name=taskName,proto3" json:"taskName,omitempty"`
	Express  string `protobuf:"bytes,3,opt,name=express,proto3" json:"express,omitempty"`
}

func (x *OperateTaskRequest) Reset() {
	*x = OperateTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateTaskRequest) ProtoMessage() {}

func (x *OperateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateTaskRequest.ProtoReflect.Descriptor instead.
func (*OperateTaskRequest) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{60}
}

func (x *OperateTaskRequest) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *OperateTaskRequest) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *OperateTaskRequest) GetExpress() string {
	if x != nil {
		return x.Express
	}
	return ""
}

type OperateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *OperateTaskResponse) Reset() {
	*x = OperateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateTaskResponse) ProtoMessage() {}

func (x *OperateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateTaskResponse.ProtoReflect.Descriptor instead.
func (*OperateTaskResponse) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{61}
}

func (x *OperateTaskResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// 通用结构体
type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username      string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Host          string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port          uint64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Schema        string `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	SlowThreshold uint64 `protobuf:"varint,6,opt,name=slowThreshold,proto3" json:"slowThreshold,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{62}
}

func (x *Database) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Database) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Database) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Database) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Database) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Database) GetSlowThreshold() uint64 {
	if x != nil {
		return x.SlowThreshold
	}
	return 0
}

type Datasource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasourceName string `protobuf:"bytes,1,opt,name=datasourceName,proto3" json:"datasourceName,omitempty"`
	DbType         string `protobuf:"bytes,2,opt,name=dbType,proto3" json:"dbType,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password       string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Host           string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Port           uint64 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	ConnectCharset string `protobuf:"bytes,7,opt,name=connectCharset,proto3" json:"connectCharset,omitempty"`
	ConnectParams  string `protobuf:"bytes,8,opt,name=connectParams,proto3" json:"connectParams,omitempty"`
	ConnectStatus  string `protobuf:"bytes,9,opt,name=connectStatus,proto3" json:"connectStatus,omitempty"`
	ServiceName    string `protobuf:"bytes,10,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	PdbName        string `protobuf:"bytes,11,opt,name=pdbName,proto3" json:"pdbName,omitempty"`
	Comment        string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *Datasource) Reset() {
	*x = Datasource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datasource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datasource) ProtoMessage() {}

func (x *Datasource) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datasource.ProtoReflect.Descriptor instead.
func (*Datasource) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{63}
}

func (x *Datasource) GetDatasourceName() string {
	if x != nil {
		return x.DatasourceName
	}
	return ""
}

func (x *Datasource) GetDbType() string {
	if x != nil {
		return x.DbType
	}
	return ""
}

func (x *Datasource) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Datasource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Datasource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Datasource) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Datasource) GetConnectCharset() string {
	if x != nil {
		return x.ConnectCharset
	}
	return ""
}

func (x *Datasource) GetConnectParams() string {
	if x != nil {
		return x.ConnectParams
	}
	return ""
}

func (x *Datasource) GetConnectStatus() string {
	if x != nil {
		return x.ConnectStatus
	}
	return ""
}

func (x *Datasource) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Datasource) GetPdbName() string {
	if x != nil {
		return x.PdbName
	}
	return ""
}

func (x *Datasource) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SchemaRouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS     string            `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	SchemaNameT     string            `protobuf:"bytes,2,opt,name=schemaNameT,proto3" json:"schemaNameT,omitempty"`
	IncludeTableS   []string          `protobuf:"bytes,3,rep,name=includeTableS,proto3" json:"includeTableS,omitempty"`
	ExcludeTableS   []string          `protobuf:"bytes,4,rep,name=excludeTableS,proto3" json:"excludeTableS,omitempty"`
	TableRouteRules []*TableRouteRule `protobuf:"bytes,5,rep,name=tableRouteRules,proto3" json:"tableRouteRules,omitempty"`
}

func (x *SchemaRouteRule) Reset() {
	*x = SchemaRouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaRouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaRouteRule) ProtoMessage() {}

func (x *SchemaRouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaRouteRule.ProtoReflect.Descriptor instead.
func (*SchemaRouteRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{64}
}

func (x *SchemaRouteRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *SchemaRouteRule) GetSchemaNameT() string {
	if x != nil {
		return x.SchemaNameT
	}
	return ""
}

func (x *SchemaRouteRule) GetIncludeTableS() []string {
	if x != nil {
		return x.IncludeTableS
	}
	return nil
}

func (x *SchemaRouteRule) GetExcludeTableS() []string {
	if x != nil {
		return x.ExcludeTableS
	}
	return nil
}

func (x *SchemaRouteRule) GetTableRouteRules() []*TableRouteRule {
	if x != nil {
		return x.TableRouteRules
	}
	return nil
}

type CaseFieldRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseFieldRuleS string `protobuf:"bytes,1,opt,name=caseFieldRuleS,proto3" json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT string `protobuf:"bytes,2,opt,name=caseFieldRuleT,proto3" json:"caseFieldRuleT,omitempty"`
}

func (x *CaseFieldRule) Reset() {
	*x = CaseFieldRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseFieldRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseFieldRule) ProtoMessage() {}

func (x *CaseFieldRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseFieldRule.ProtoReflect.Descriptor instead.
func (*CaseFieldRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{65}
}

func (x *CaseFieldRule) GetCaseFieldRuleS() string {
	if x != nil {
		return x.CaseFieldRuleS
	}
	return ""
}

func (x *CaseFieldRule) GetCaseFieldRuleT() string {
	if x != nil {
		return x.CaseFieldRuleT
	}
	return ""
}

type TableRouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNameS       string            `protobuf:"bytes,1,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	TableNameT       string            `protobuf:"bytes,2,opt,name=tableNameT,proto3" json:"tableNameT,omitempty"`
	ColumnRouteRules map[string]string `protobuf:"bytes,3,rep,name=columnRouteRules,proto3" json:"columnRouteRules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TableRouteRule) Reset() {
	*x = TableRouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRouteRule) ProtoMessage() {}

func (x *TableRouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRouteRule.ProtoReflect.Descriptor instead.
func (*TableRouteRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{66}
}

func (x *TableRouteRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *TableRouteRule) GetTableNameT() string {
	if x != nil {
		return x.TableNameT
	}
	return ""
}

func (x *TableRouteRule) GetColumnRouteRules() map[string]string {
	if x != nil {
		return x.ColumnRouteRules
	}
	return nil
}

type AssessMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseFieldRuleS string `protobuf:"bytes,1,opt,name=caseFieldRuleS,proto3" json:"caseFieldRuleS,omitempty"`
	SchemaNameS    string `protobuf:"bytes,2,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
}

func (x *AssessMigrateParam) Reset() {
	*x = AssessMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssessMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssessMigrateParam) ProtoMessage() {}

func (x *AssessMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssessMigrateParam.ProtoReflect.Descriptor instead.
func (*AssessMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{67}
}

func (x *AssessMigrateParam) GetCaseFieldRuleS() string {
	if x != nil {
		return x.CaseFieldRuleS
	}
	return ""
}

func (x *AssessMigrateParam) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

type StructMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MigrateThread      uint64 `protobuf:"varint,1,opt,name=migrateThread,proto3" json:"migrateThread,omitempty"`
	CreateIfNotExist   bool   `protobuf:"varint,2,opt,name=createIfNotExist,proto3" json:"createIfNotExist,omitempty"`
	EnableDirectCreate bool   `protobuf:"varint,3,opt,name=enableDirectCreate,proto3" json:"enableDirectCreate,omitempty"`
	EnableCheckpoint   bool   `protobuf:"varint,4,opt,name=enableCheckpoint,proto3" json:"enableCheckpoint,omitempty"`
}

func (x *StructMigrateParam) Reset() {
	*x = StructMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructMigrateParam) ProtoMessage() {}

func (x *StructMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructMigrateParam.ProtoReflect.Descriptor instead.
func (*StructMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{68}
}

func (x *StructMigrateParam) GetMigrateThread() uint64 {
	if x != nil {
		return x.MigrateThread
	}
	return 0
}

func (x *StructMigrateParam) GetCreateIfNotExist() bool {
	if x != nil {
		return x.CreateIfNotExist
	}
	return false
}

func (x *StructMigrateParam) GetEnableDirectCreate() bool {
	if x != nil {
		return x.EnableDirectCreate
	}
	return false
}

func (x *StructMigrateParam) GetEnableCheckpoint() bool {
	if x != nil {
		return x.EnableCheckpoint
	}
	return false
}

type StructMigrateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskStructRules   []*TaskStructRule   `protobuf:"bytes,1,rep,name=taskStructRules,proto3" json:"taskStructRules,omitempty"`
	SchemaStructRules []*SchemaStructRule `protobuf:"bytes,2,rep,name=schemaStructRules,proto3" json:"schemaStructRules,omitempty"`
	TableStructRules  []*TableStructRule  `protobuf:"bytes,3,rep,name=tableStructRules,proto3" json:"tableStructRules,omitempty"`
	ColumnStructRules []*ColumnStructRule `protobuf:"bytes,4,rep,name=columnStructRules,proto3" json:"columnStructRules,omitempty"`
	TableAttrsRules   []*TableAttrsRule   `protobuf:"bytes,5,rep,name=tableAttrsRules,proto3" json:"tableAttrsRules,omitempty"`
}

func (x *StructMigrateRule) Reset() {
	*x = StructMigrateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructMigrateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructMigrateRule) ProtoMessage() {}

func (x *StructMigrateRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructMigrateRule.ProtoReflect.Descriptor instead.
func (*StructMigrateRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{69}
}

func (x *StructMigrateRule) GetTaskStructRules() []*TaskStructRule {
	if x != nil {
		return x.TaskStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetSchemaStructRules() []*SchemaStructRule {
	if x != nil {
		return x.SchemaStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetTableStructRules() []*TableStructRule {
	if x != nil {
		return x.TableStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetColumnStructRules() []*ColumnStructRule {
	if x != nil {
		return x.ColumnStructRules
	}
	return nil
}

func (x *StructMigrateRule) GetTableAttrsRules() []*TableAttrsRule {
	if x != nil {
		return x.TableAttrsRules
	}
	return nil
}

type StructCompareParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompareThread    uint64 `protobuf:"varint,1,opt,name=compareThread,proto3" json:"compareThread,omitempty"`
	EnableCheckpoint bool   `protobuf:"varint,2,opt,name=enableCheckpoint,proto3" json:"enableCheckpoint,omitempty"`
}

func (x *StructCompareParam) Reset() {
	*x = StructCompareParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructCompareParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructCompareParam) ProtoMessage() {}

func (x *StructCompareParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructCompareParam.ProtoReflect.Descriptor instead.
func (*StructCompareParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{70}
}

func (x *StructCompareParam) GetCompareThread() uint64 {
	if x != nil {
		return x.CompareThread
	}
	return 0
}

func (x *StructCompareParam) GetEnableCheckpoint() bool {
	if x != nil {
		return x.EnableCheckpoint
	}
	return false
}

type StructCompareRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskStructRules   []*TaskStructRule   `protobuf:"bytes,1,rep,name=taskStructRules,proto3" json:"taskStructRules,omitempty"`
	SchemaStructRules []*SchemaStructRule `protobuf:"bytes,2,rep,name=schemaStructRules,proto3" json:"schemaStructRules,omitempty"`
	TableStructRules  []*TableStructRule  `protobuf:"bytes,3,rep,name=tableStructRules,proto3" json:"tableStructRules,omitempty"`
	ColumnStructRules []*ColumnStructRule `protobuf:"bytes,4,rep,name=columnStructRules,proto3" json:"columnStructRules,omitempty"`
}

func (x *StructCompareRule) Reset() {
	*x = StructCompareRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructCompareRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructCompareRule) ProtoMessage() {}

func (x *StructCompareRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructCompareRule.ProtoReflect.Descriptor instead.
func (*StructCompareRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{71}
}

func (x *StructCompareRule) GetTaskStructRules() []*TaskStructRule {
	if x != nil {
		return x.TaskStructRules
	}
	return nil
}

func (x *StructCompareRule) GetSchemaStructRules() []*SchemaStructRule {
	if x != nil {
		return x.SchemaStructRules
	}
	return nil
}

func (x *StructCompareRule) GetTableStructRules() []*TableStructRule {
	if x != nil {
		return x.TableStructRules
	}
	return nil
}

func (x *StructCompareRule) GetColumnStructRules() []*ColumnStructRule {
	if x != nil {
		return x.ColumnStructRules
	}
	return nil
}

type TaskStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnTypeS     string `protobuf:"bytes,1,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT     string `protobuf:"bytes,2,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	TableAttrOption string `protobuf:"bytes,3,opt,name=TableAttrOption,proto3" json:"TableAttrOption,omitempty"`
	DefaultValueS   string `protobuf:"bytes,4,opt,name=DefaultValueS,proto3" json:"DefaultValueS,omitempty"`
	DefaultValueT   string `protobuf:"bytes,5,opt,name=DefaultValueT,proto3" json:"DefaultValueT,omitempty"`
}

func (x *TaskStructRule) Reset() {
	*x = TaskStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStructRule) ProtoMessage() {}

func (x *TaskStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStructRule.ProtoReflect.Descriptor instead.
func (*TaskStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{72}
}

func (x *TaskStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *TaskStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *TaskStructRule) GetTableAttrOption() string {
	if x != nil {
		return x.TableAttrOption
	}
	return ""
}

func (x *TaskStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *TaskStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type SchemaStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS   string `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	ColumnTypeS   string `protobuf:"bytes,2,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT   string `protobuf:"bytes,3,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	DefaultValueS string `protobuf:"bytes,4,opt,name=defaultValueS,proto3" json:"defaultValueS,omitempty"`
	DefaultValueT string `protobuf:"bytes,5,opt,name=defaultValueT,proto3" json:"defaultValueT,omitempty"`
}

func (x *SchemaStructRule) Reset() {
	*x = SchemaStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaStructRule) ProtoMessage() {}

func (x *SchemaStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaStructRule.ProtoReflect.Descriptor instead.
func (*SchemaStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{73}
}

func (x *SchemaStructRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *SchemaStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *SchemaStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *SchemaStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *SchemaStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type TableStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS   string `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	TableNameS    string `protobuf:"bytes,2,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	ColumnTypeS   string `protobuf:"bytes,3,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT   string `protobuf:"bytes,4,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	DefaultValueS string `protobuf:"bytes,5,opt,name=defaultValueS,proto3" json:"defaultValueS,omitempty"`
	DefaultValueT string `protobuf:"bytes,6,opt,name=defaultValueT,proto3" json:"defaultValueT,omitempty"`
}

func (x *TableStructRule) Reset() {
	*x = TableStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStructRule) ProtoMessage() {}

func (x *TableStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStructRule.ProtoReflect.Descriptor instead.
func (*TableStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{74}
}

func (x *TableStructRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *TableStructRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *TableStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *TableStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *TableStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *TableStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type ColumnStructRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS   string `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	TableNameS    string `protobuf:"bytes,2,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	ColumnNameS   string `protobuf:"bytes,3,opt,name=columnNameS,proto3" json:"columnNameS,omitempty"`
	ColumnTypeS   string `protobuf:"bytes,4,opt,name=columnTypeS,proto3" json:"columnTypeS,omitempty"`
	ColumnTypeT   string `protobuf:"bytes,5,opt,name=columnTypeT,proto3" json:"columnTypeT,omitempty"`
	DefaultValueS string `protobuf:"bytes,6,opt,name=defaultValueS,proto3" json:"defaultValueS,omitempty"`
	DefaultValueT string `protobuf:"bytes,7,opt,name=defaultValueT,proto3" json:"defaultValueT,omitempty"`
}

func (x *ColumnStructRule) Reset() {
	*x = ColumnStructRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnStructRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnStructRule) ProtoMessage() {}

func (x *ColumnStructRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnStructRule.ProtoReflect.Descriptor instead.
func (*ColumnStructRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{75}
}

func (x *ColumnStructRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *ColumnStructRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *ColumnStructRule) GetColumnNameS() string {
	if x != nil {
		return x.ColumnNameS
	}
	return ""
}

func (x *ColumnStructRule) GetColumnTypeS() string {
	if x != nil {
		return x.ColumnTypeS
	}
	return ""
}

func (x *ColumnStructRule) GetColumnTypeT() string {
	if x != nil {
		return x.ColumnTypeT
	}
	return ""
}

func (x *ColumnStructRule) GetDefaultValueS() string {
	if x != nil {
		return x.DefaultValueS
	}
	return ""
}

func (x *ColumnStructRule) GetDefaultValueT() string {
	if x != nil {
		return x.DefaultValueT
	}
	return ""
}

type TableAttrsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaNameS string   `protobuf:"bytes,1,opt,name=schemaNameS,proto3" json:"schemaNameS,omitempty"`
	TableNamesS []string `protobuf:"bytes,2,rep,name=tableNamesS,proto3" json:"tableNamesS,omitempty"`
	TableAttrsT string   `protobuf:"bytes,3,opt,name=tableAttrsT,proto3" json:"tableAttrsT,omitempty"`
}

func (x *TableAttrsRule) Reset() {
	*x = TableAttrsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableAttrsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableAttrsRule) ProtoMessage() {}

func (x *TableAttrsRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableAttrsRule.ProtoReflect.Descriptor instead.
func (*TableAttrsRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{76}
}

func (x *TableAttrsRule) GetSchemaNameS() string {
	if x != nil {
		return x.SchemaNameS
	}
	return ""
}

func (x *TableAttrsRule) GetTableNamesS() []string {
	if x != nil {
		return x.TableNamesS
	}
	return nil
}

func (x *TableAttrsRule) GetTableAttrsT() string {
	if x != nil {
		return x.TableAttrsT
	}
	return ""
}

type DataMigrateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNameS          string `protobuf:"bytes,1,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	EnableChunkStrategy bool   `protobuf:"varint,2,opt,name=enableChunkStrategy,proto3" json:"enableChunkStrategy,omitempty"`
	WhereRange          string `protobuf:"bytes,3,opt,name=whereRange,proto3" json:"whereRange,omitempty"`
	SqlHintS            string `protobuf:"bytes,4,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
}

func (x *DataMigrateRule) Reset() {
	*x = DataMigrateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMigrateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMigrateRule) ProtoMessage() {}

func (x *DataMigrateRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMigrateRule.ProtoReflect.Descriptor instead.
func (*DataMigrateRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{77}
}

func (x *DataMigrateRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *DataMigrateRule) GetEnableChunkStrategy() bool {
	if x != nil {
		return x.EnableChunkStrategy
	}
	return false
}

func (x *DataMigrateRule) GetWhereRange() string {
	if x != nil {
		return x.WhereRange
	}
	return ""
}

func (x *DataMigrateRule) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

type StatementMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableThread          uint64 `protobuf:"varint,1,opt,name=tableThread,proto3" json:"tableThread,omitempty"`
	BatchSize            uint64 `protobuf:"varint,2,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	ChunkSize            uint64 `protobuf:"varint,3,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	SqlThreadS           uint64 `protobuf:"varint,4,opt,name=sqlThreadS,proto3" json:"sqlThreadS,omitempty"`
	SqlHintS             string `protobuf:"bytes,5,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
	SqlThreadT           uint64 `protobuf:"varint,6,opt,name=sqlThreadT,proto3" json:"sqlThreadT,omitempty"`
	SqlHintT             string `protobuf:"bytes,7,opt,name=sqlHintT,proto3" json:"sqlHintT,omitempty"`
	CallTimeout          uint64 `protobuf:"varint,8,opt,name=callTimeout,proto3" json:"callTimeout,omitempty"`
	EnableCheckpoint     bool   `protobuf:"varint,9,opt,name=enableCheckpoint,proto3" json:"enableCheckpoint,omitempty"`
	EnableConsistentRead bool   `protobuf:"varint,10,opt,name=enableConsistentRead,proto3" json:"enableConsistentRead,omitempty"`
	EnableSafeMode       bool   `protobuf:"varint,11,opt,name=enableSafeMode,proto3" json:"enableSafeMode,omitempty"`
}

func (x *StatementMigrateParam) Reset() {
	*x = StatementMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementMigrateParam) ProtoMessage() {}

func (x *StatementMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementMigrateParam.ProtoReflect.Descriptor instead.
func (*StatementMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{78}
}

func (x *StatementMigrateParam) GetTableThread() uint64 {
	if x != nil {
		return x.TableThread
	}
	return 0
}

func (x *StatementMigrateParam) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *StatementMigrateParam) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *StatementMigrateParam) GetSqlThreadS() uint64 {
	if x != nil {
		return x.SqlThreadS
	}
	return 0
}

func (x *StatementMigrateParam) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

func (x *StatementMigrateParam) GetSqlThreadT() uint64 {
	if x != nil {
		return x.SqlThreadT
	}
	return 0
}

func (x *StatementMigrateParam) GetSqlHintT() string {
	if x != nil {
		return x.SqlHintT
	}
	return ""
}

func (x *StatementMigrateParam) GetCallTimeout() uint64 {
	if x != nil {
		return x.CallTimeout
	}
	return 0
}

func (x *StatementMigrateParam) GetEnableCheckpoint() bool {
	if x != nil {
		return x.EnableCheckpoint
	}
	return false
}

func (x *StatementMigrateParam) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

func (x *StatementMigrateParam) GetEnableSafeMode() bool {
	if x != nil {
		return x.EnableSafeMode
	}
	return false
}

type CsvMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableThread          uint64 `protobuf:"varint,1,opt,name=tableThread,proto3" json:"tableThread,omitempty"`
	BatchSize            uint64 `protobuf:"varint,2,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	Header               bool   `protobuf:"varint,3,opt,name=header,proto3" json:"header,omitempty"`
	DiskUsageFactor      string `protobuf:"bytes,4,opt,name=diskUsageFactor,proto3" json:"diskUsageFactor,omitempty"`
	Separator            string `protobuf:"bytes,5,opt,name=separator,proto3" json:"separator,omitempty"`
	Terminator           string `protobuf:"bytes,6,opt,name=terminator,proto3" json:"terminator,omitempty"`
	DataCharsetT         string `protobuf:"bytes,7,opt,name=dataCharsetT,proto3" json:"dataCharsetT,omitempty"`
	Delimiter            string `protobuf:"bytes,8,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	NullValue            string `protobuf:"bytes,9,opt,name=nullValue,proto3" json:"nullValue,omitempty"`
	EscapeBackslash      bool   `protobuf:"varint,10,opt,name=escapeBackslash,proto3" json:"escapeBackslash,omitempty"`
	ChunkSize            uint64 `protobuf:"varint,11,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	OutputDir            string `protobuf:"bytes,12,opt,name=outputDir,proto3" json:"outputDir,omitempty"`
	SqlThreadS           uint64 `protobuf:"varint,13,opt,name=sqlThreadS,proto3" json:"sqlThreadS,omitempty"`
	SqlHintS             string `protobuf:"bytes,14,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
	CallTimeout          uint64 `protobuf:"varint,15,opt,name=callTimeout,proto3" json:"callTimeout,omitempty"`
	EnableCheckpoint     bool   `protobuf:"varint,16,opt,name=enableCheckpoint,proto3" json:"enableCheckpoint,omitempty"`
	EnableConsistentRead bool   `protobuf:"varint,17,opt,name=enableConsistentRead,proto3" json:"enableConsistentRead,omitempty"`
}

func (x *CsvMigrateParam) Reset() {
	*x = CsvMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvMigrateParam) ProtoMessage() {}

func (x *CsvMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvMigrateParam.ProtoReflect.Descriptor instead.
func (*CsvMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{79}
}

func (x *CsvMigrateParam) GetTableThread() uint64 {
	if x != nil {
		return x.TableThread
	}
	return 0
}

func (x *CsvMigrateParam) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *CsvMigrateParam) GetHeader() bool {
	if x != nil {
		return x.Header
	}
	return false
}

func (x *CsvMigrateParam) GetDiskUsageFactor() string {
	if x != nil {
		return x.DiskUsageFactor
	}
	return ""
}

func (x *CsvMigrateParam) GetSeparator() string {
	if x != nil {
		return x.Separator
	}
	return ""
}

func (x *CsvMigrateParam) GetTerminator() string {
	if x != nil {
		return x.Terminator
	}
	return ""
}

func (x *CsvMigrateParam) GetDataCharsetT() string {
	if x != nil {
		return x.DataCharsetT
	}
	return ""
}

func (x *CsvMigrateParam) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *CsvMigrateParam) GetNullValue() string {
	if x != nil {
		return x.NullValue
	}
	return ""
}

func (x *CsvMigrateParam) GetEscapeBackslash() bool {
	if x != nil {
		return x.EscapeBackslash
	}
	return false
}

func (x *CsvMigrateParam) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *CsvMigrateParam) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *CsvMigrateParam) GetSqlThreadS() uint64 {
	if x != nil {
		return x.SqlThreadS
	}
	return 0
}

func (x *CsvMigrateParam) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

func (x *CsvMigrateParam) GetCallTimeout() uint64 {
	if x != nil {
		return x.CallTimeout
	}
	return 0
}

func (x *CsvMigrateParam) GetEnableCheckpoint() bool {
	if x != nil {
		return x.EnableCheckpoint
	}
	return false
}

func (x *CsvMigrateParam) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

type DataCompareRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNameS   string   `protobuf:"bytes,1,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	CompareField string   `protobuf:"bytes,2,opt,name=compareField,proto3" json:"compareField,omitempty"`
	CompareRange string   `protobuf:"bytes,3,opt,name=compareRange,proto3" json:"compareRange,omitempty"`
	IgnoreFields []string `protobuf:"bytes,4,rep,name=ignoreFields,proto3" json:"ignoreFields,omitempty"`
}

func (x *DataCompareRule) Reset() {
	*x = DataCompareRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCompareRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCompareRule) ProtoMessage() {}

func (x *DataCompareRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCompareRule.ProtoReflect.Descriptor instead.
func (*DataCompareRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{80}
}

func (x *DataCompareRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *DataCompareRule) GetCompareField() string {
	if x != nil {
		return x.CompareField
	}
	return ""
}

func (x *DataCompareRule) GetCompareRange() string {
	if x != nil {
		return x.CompareRange
	}
	return ""
}

func (x *DataCompareRule) GetIgnoreFields() []string {
	if x != nil {
		return x.IgnoreFields
	}
	return nil
}

type DataCompareParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableThread          uint64 `protobuf:"varint,1,opt,name=tableThread,proto3" json:"tableThread,omitempty"`
	BatchSize            uint64 `protobuf:"varint,2,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	SqlThread            uint64 `protobuf:"varint,3,opt,name=sqlThread,proto3" json:"sqlThread,omitempty"`
	SqlHintS             string `protobuf:"bytes,4,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
	SqlHintT             string `protobuf:"bytes,5,opt,name=sqlHintT,proto3" json:"sqlHintT,omitempty"`
	CallTimeout          uint64 `protobuf:"varint,6,opt,name=callTimeout,proto3" json:"callTimeout,omitempty"`
	EnableCheckpoint     bool   `protobuf:"varint,7,opt,name=enableCheckpoint,proto3" json:"enableCheckpoint,omitempty"`
	EnableConsistentRead bool   `protobuf:"varint,8,opt,name=enableConsistentRead,proto3" json:"enableConsistentRead,omitempty"`
	OnlyCompareRow       bool   `protobuf:"varint,9,opt,name=OnlyCompareRow,proto3" json:"OnlyCompareRow,omitempty"`
	ConsistentReadPointS string `protobuf:"bytes,10,opt,name=consistentReadPointS,proto3" json:"consistentReadPointS,omitempty"`
	ConsistentReadPointT string `protobuf:"bytes,11,opt,name=consistentReadPointT,proto3" json:"consistentReadPointT,omitempty"`
	WriteThread          uint64 `protobuf:"varint,13,opt,name=writeThread,proto3" json:"writeThread,omitempty"`
}

func (x *DataCompareParam) Reset() {
	*x = DataCompareParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCompareParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCompareParam) ProtoMessage() {}

func (x *DataCompareParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCompareParam.ProtoReflect.Descriptor instead.
func (*DataCompareParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{81}
}

func (x *DataCompareParam) GetTableThread() uint64 {
	if x != nil {
		return x.TableThread
	}
	return 0
}

func (x *DataCompareParam) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *DataCompareParam) GetSqlThread() uint64 {
	if x != nil {
		return x.SqlThread
	}
	return 0
}

func (x *DataCompareParam) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

func (x *DataCompareParam) GetSqlHintT() string {
	if x != nil {
		return x.SqlHintT
	}
	return ""
}

func (x *DataCompareParam) GetCallTimeout() uint64 {
	if x != nil {
		return x.CallTimeout
	}
	return 0
}

func (x *DataCompareParam) GetEnableCheckpoint() bool {
	if x != nil {
		return x.EnableCheckpoint
	}
	return false
}

func (x *DataCompareParam) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

func (x *DataCompareParam) GetOnlyCompareRow() bool {
	if x != nil {
		return x.OnlyCompareRow
	}
	return false
}

func (x *DataCompareParam) GetConsistentReadPointS() string {
	if x != nil {
		return x.ConsistentReadPointS
	}
	return ""
}

func (x *DataCompareParam) GetConsistentReadPointT() string {
	if x != nil {
		return x.ConsistentReadPointT
	}
	return ""
}

func (x *DataCompareParam) GetWriteThread() uint64 {
	if x != nil {
		return x.WriteThread
	}
	return 0
}

type SqlMigrateRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlQueryS        string            `protobuf:"bytes,1,opt,name=sqlQueryS,proto3" json:"sqlQueryS,omitempty"`
	SchemaNameT      string            `protobuf:"bytes,2,opt,name=schemaNameT,proto3" json:"schemaNameT,omitempty"`
	TableNameT       string            `protobuf:"bytes,3,opt,name=tableNameT,proto3" json:"tableNameT,omitempty"`
	SqlHintT         string            `protobuf:"bytes,4,opt,name=sqlHintT,proto3" json:"sqlHintT,omitempty"`
	ColumnRouteRules map[string]string `protobuf:"bytes,5,rep,name=columnRouteRules,proto3" json:"columnRouteRules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SqlMigrateRule) Reset() {
	*x = SqlMigrateRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMigrateRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMigrateRule) ProtoMessage() {}

func (x *SqlMigrateRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMigrateRule.ProtoReflect.Descriptor instead.
func (*SqlMigrateRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{82}
}

func (x *SqlMigrateRule) GetSqlQueryS() string {
	if x != nil {
		return x.SqlQueryS
	}
	return ""
}

func (x *SqlMigrateRule) GetSchemaNameT() string {
	if x != nil {
		return x.SchemaNameT
	}
	return ""
}

func (x *SqlMigrateRule) GetTableNameT() string {
	if x != nil {
		return x.TableNameT
	}
	return ""
}

func (x *SqlMigrateRule) GetSqlHintT() string {
	if x != nil {
		return x.SqlHintT
	}
	return ""
}

func (x *SqlMigrateRule) GetColumnRouteRules() map[string]string {
	if x != nil {
		return x.ColumnRouteRules
	}
	return nil
}

type SqlMigrateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize            uint64 `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	SqlThreadS           uint64 `protobuf:"varint,2,opt,name=sqlThreadS,proto3" json:"sqlThreadS,omitempty"`
	SqlThreadT           uint64 `protobuf:"varint,3,opt,name=sqlThreadT,proto3" json:"sqlThreadT,omitempty"`
	SqlHintT             string `protobuf:"bytes,4,opt,name=sqlHintT,proto3" json:"sqlHintT,omitempty"`
	CallTimeout          uint64 `protobuf:"varint,5,opt,name=callTimeout,proto3" json:"callTimeout,omitempty"`
	EnableConsistentRead bool   `protobuf:"varint,6,opt,name=enableConsistentRead,proto3" json:"enableConsistentRead,omitempty"`
	EnableSafeMode       bool   `protobuf:"varint,7,opt,name=enableSafeMode,proto3" json:"enableSafeMode,omitempty"`
}

func (x *SqlMigrateParam) Reset() {
	*x = SqlMigrateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMigrateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMigrateParam) ProtoMessage() {}

func (x *SqlMigrateParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMigrateParam.ProtoReflect.Descriptor instead.
func (*SqlMigrateParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{83}
}

func (x *SqlMigrateParam) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *SqlMigrateParam) GetSqlThreadS() uint64 {
	if x != nil {
		return x.SqlThreadS
	}
	return 0
}

func (x *SqlMigrateParam) GetSqlThreadT() uint64 {
	if x != nil {
		return x.SqlThreadT
	}
	return 0
}

func (x *SqlMigrateParam) GetSqlHintT() string {
	if x != nil {
		return x.SqlHintT
	}
	return ""
}

func (x *SqlMigrateParam) GetCallTimeout() uint64 {
	if x != nil {
		return x.CallTimeout
	}
	return 0
}

func (x *SqlMigrateParam) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

func (x *SqlMigrateParam) GetEnableSafeMode() bool {
	if x != nil {
		return x.EnableSafeMode
	}
	return false
}

type DataScanRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableNameS       string `protobuf:"bytes,1,opt,name=tableNameS,proto3" json:"tableNameS,omitempty"`
	SqlHintS         string `protobuf:"bytes,2,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
	TableSamplerateS uint64 `protobuf:"varint,3,opt,name=tableSamplerateS,proto3" json:"tableSamplerateS,omitempty"`
}

func (x *DataScanRule) Reset() {
	*x = DataScanRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataScanRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataScanRule) ProtoMessage() {}

func (x *DataScanRule) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataScanRule.ProtoReflect.Descriptor instead.
func (*DataScanRule) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{84}
}

func (x *DataScanRule) GetTableNameS() string {
	if x != nil {
		return x.TableNameS
	}
	return ""
}

func (x *DataScanRule) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

func (x *DataScanRule) GetTableSamplerateS() uint64 {
	if x != nil {
		return x.TableSamplerateS
	}
	return 0
}

type DataScanParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableThread          uint64 `protobuf:"varint,1,opt,name=tableThread,proto3" json:"tableThread,omitempty"`
	BatchSize            uint64 `protobuf:"varint,2,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	ChunkSize            uint64 `protobuf:"varint,3,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	SqlThreadS           uint64 `protobuf:"varint,4,opt,name=sqlThreadS,proto3" json:"sqlThreadS,omitempty"`
	SqlHintS             string `protobuf:"bytes,5,opt,name=sqlHintS,proto3" json:"sqlHintS,omitempty"`
	CallTimeout          uint64 `protobuf:"varint,6,opt,name=callTimeout,proto3" json:"callTimeout,omitempty"`
	EnableCheckpoint     bool   `protobuf:"varint,7,opt,name=enableCheckpoint,proto3" json:"enableCheckpoint,omitempty"`
	EnableConsistentRead bool   `protobuf:"varint,8,opt,name=enableConsistentRead,proto3" json:"enableConsistentRead,omitempty"`
	TableSamplerateS     uint64 `protobuf:"varint,9,opt,name=tableSamplerateS,proto3" json:"tableSamplerateS,omitempty"`
}

func (x *DataScanParam) Reset() {
	*x = DataScanParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dbms_master_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataScanParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataScanParam) ProtoMessage() {}

func (x *DataScanParam) ProtoReflect() protoreflect.Message {
	mi := &file_dbms_master_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataScanParam.ProtoReflect.Descriptor instead.
func (*DataScanParam) Descriptor() ([]byte, []int) {
	return file_dbms_master_proto_rawDescGZIP(), []int{85}
}

func (x *DataScanParam) GetTableThread() uint64 {
	if x != nil {
		return x.TableThread
	}
	return 0
}

func (x *DataScanParam) GetBatchSize() uint64 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *DataScanParam) GetChunkSize() uint64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *DataScanParam) GetSqlThreadS() uint64 {
	if x != nil {
		return x.SqlThreadS
	}
	return 0
}

func (x *DataScanParam) GetSqlHintS() string {
	if x != nil {
		return x.SqlHintS
	}
	return ""
}

func (x *DataScanParam) GetCallTimeout() uint64 {
	if x != nil {
		return x.CallTimeout
	}
	return 0
}

func (x *DataScanParam) GetEnableCheckpoint() bool {
	if x != nil {
		return x.EnableCheckpoint
	}
	return false
}

func (x *DataScanParam) GetEnableConsistentRead() bool {
	if x != nil {
		return x.EnableConsistentRead
	}
	return false
}

func (x *DataScanParam) GetTableSamplerateS() uint64 {
	if x != nil {
		return x.TableSamplerateS
	}
	return 0
}

var File_dbms_master_proto protoreflect.FileDescriptor

var file_dbms_master_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x62, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x45,
	0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x14,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4c, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x47, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x45, 0x0a, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x01, 0x0a,
	0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0x4e, 0x0a, 0x1f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6a, 0x0a, 0x1c, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4c,
	0x0a, 0x1d, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x03, 0x0a,
	0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x12,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x1c, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xbb, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x61,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a,
	0x12, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x4e, 0x0a, 0x1f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e,
	0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a,
	0x0a, 0x1c, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x53, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x42, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4c, 0x0a, 0x1d, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x68, 0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1b, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d,
	0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3f, 0x0a,
	0x0f, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x53,
	0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x0f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x0f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x4b, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x49,
	0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x1b, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x42, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4b, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x73,
	0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x4b, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x19,
	0x53, 0x68, 0x6f, 0x77, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x1a, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x73, 0x76,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xaf, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63,
	0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x22, 0x4c, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x1a, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x1b, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9a, 0x03, 0x0a, 0x19, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63,
	0x61, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0d,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x49, 0x0a,
	0x1a, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x49, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x17,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x47, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x12,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x64, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x12, 0x3f,
	0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x5f, 0x0a, 0x0d, 0x43, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x22, 0xee, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0f,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x66, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3f,
	0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0xca, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x22, 0xc4,
	0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x22, 0xe3, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x22, 0x86, 0x02, 0x0a, 0x10,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x22, 0x76, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73, 0x54, 0x22, 0x9f, 0x01, 0x0a,
	0x0f, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x22, 0x97,
	0x03, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e,
	0x74, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e,
	0x74, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x66, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x61, 0x66, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xd5, 0x04, 0x0a, 0x0f, 0x43, 0x73, 0x76,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x54, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x54,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x22, 0x9d, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0xdc, 0x03, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x12, 0x20, 0x0a,
	0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22,
	0xaa, 0x02, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x54, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x12, 0x57,
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x02, 0x0a,
	0x0f, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x66, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x61, 0x66, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48,
	0x69, 0x6e, 0x74, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48,
	0x69, 0x6e, 0x74, 0x53, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x22, 0xd7, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x53, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x32, 0x87, 0x21, 0x0a, 0x06, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a,
	0x01, 0x2a, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x53,
	0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x3a, 0x01, 0x2a, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x73,
	0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x95, 0x01, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x95, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x95, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x3a, 0x01, 0x2a, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x95, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x95, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x2a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x8d, 0x01, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x2a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x53, 0x68,
	0x6f, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x6d, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71,
	0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x71, 0x6c, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a,
	0x1a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x89, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x2a, 0x1d, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x71, 0x6c,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x83, 0x01, 0x0a, 0x12,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x53,
	0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x73, 0x76, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x73, 0x76,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x1a, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x89, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x2a, 0x1d, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x73, 0x76, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x73, 0x76,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x43,
	0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a,
	0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x63, 0x73, 0x76, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x8d, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x1a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x8d, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x2a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x87, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a,
	0x1a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x81, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x3a, 0x01, 0x2a, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x7b, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01,
	0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x64,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a,
	0x13, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x42, 0x0a, 0x5a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dbms_master_proto_rawDescOnce sync.Once
	file_dbms_master_proto_rawDescData = file_dbms_master_proto_rawDesc
)

func file_dbms_master_proto_rawDescGZIP() []byte {
	file_dbms_master_proto_rawDescOnce.Do(func() {
		file_dbms_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_dbms_master_proto_rawDescData)
	})
	return file_dbms_master_proto_rawDescData
}

var file_dbms_master_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_dbms_master_proto_goTypes = []interface{}{
	(*UpsertDatabaseRequest)(nil),           // 0: proto.UpsertDatabaseRequest
	(*UpsertDatabaseResponse)(nil),          // 1: proto.UpsertDatabaseResponse
	(*DeleteDatabaseRequest)(nil),           // 2: proto.DeleteDatabaseRequest
	(*DeleteDatabaseResponse)(nil),          // 3: proto.DeleteDatabaseResponse
	(*ShowDatabaseRequest)(nil),             // 4: proto.ShowDatabaseRequest
	(*ShowDatabaseResponse)(nil),            // 5: proto.ShowDatabaseResponse
	(*UpsertDatasourceRequest)(nil),         // 6: proto.UpsertDatasourceRequest
	(*UpsertDatasourceResponse)(nil),        // 7: proto.UpsertDatasourceResponse
	(*DeleteDatasourceRequest)(nil),         // 8: proto.DeleteDatasourceRequest
	(*DeleteDatasourceResponse)(nil),        // 9: proto.DeleteDatasourceResponse
	(*ShowDatasourceRequest)(nil),           // 10: proto.ShowDatasourceRequest
	(*ShowDatasourceResponse)(nil),          // 11: proto.ShowDatasourceResponse
	(*UpsertAssessMigrateTaskRequest)(nil),  // 12: proto.UpsertAssessMigrateTaskRequest
	(*UpsertAssessMigrateTaskResponse)(nil), // 13: proto.UpsertAssessMigrateTaskResponse
	(*DeleteAssessMigrateTaskRequest)(nil),  // 14: proto.DeleteAssessMigrateTaskRequest
	(*DeleteAssessMigrateTaskResponse)(nil), // 15: proto.DeleteAssessMigrateTaskResponse
	(*ShowAssessMigrateTaskRequest)(nil),    // 16: proto.ShowAssessMigrateTaskRequest
	(*ShowAssessMigrateTaskResponse)(nil),   // 17: proto.ShowAssessMigrateTaskResponse
	(*UpsertStructMigrateTaskRequest)(nil),  // 18: proto.UpsertStructMigrateTaskRequest
	(*UpsertStructMigrateTaskResponse)(nil), // 19: proto.UpsertStructMigrateTaskResponse
	(*DeleteStructMigrateTaskRequest)(nil),  // 20: proto.DeleteStructMigrateTaskRequest
	(*DeleteStructMigrateTaskResponse)(nil), // 21: proto.DeleteStructMigrateTaskResponse
	(*ShowStructMigrateTaskRequest)(nil),    // 22: proto.ShowStructMigrateTaskRequest
	(*ShowStructMigrateTaskResponse)(nil),   // 23: proto.ShowStructMigrateTaskResponse
	(*UpsertStructCompareTaskRequest)(nil),  // 24: proto.UpsertStructCompareTaskRequest
	(*UpsertStructCompareTaskResponse)(nil), // 25: proto.UpsertStructCompareTaskResponse
	(*DeleteStructCompareTaskRequest)(nil),  // 26: proto.DeleteStructCompareTaskRequest
	(*DeleteStructCompareTaskResponse)(nil), // 27: proto.DeleteStructCompareTaskResponse
	(*ShowStructCompareTaskRequest)(nil),    // 28: proto.ShowStructCompareTaskRequest
	(*ShowStructCompareTaskResponse)(nil),   // 29: proto.ShowStructCompareTaskResponse
	(*UpsertStmtMigrateTaskRequest)(nil),    // 30: proto.UpsertStmtMigrateTaskRequest
	(*UpsertStmtMigrateTaskResponse)(nil),   // 31: proto.UpsertStmtMigrateTaskResponse
	(*DeleteStmtMigrateTaskRequest)(nil),    // 32: proto.DeleteStmtMigrateTaskRequest
	(*DeleteStmtMigrateTaskResponse)(nil),   // 33: proto.DeleteStmtMigrateTaskResponse
	(*ShowStmtMigrateTaskRequest)(nil),      // 34: proto.ShowStmtMigrateTaskRequest
	(*ShowStmtMigrateTaskResponse)(nil),     // 35: proto.ShowStmtMigrateTaskResponse
	(*UpsertSqlMigrateTaskRequest)(nil),     // 36: proto.UpsertSqlMigrateTaskRequest
	(*UpsertSqlMigrateTaskResponse)(nil),    // 37: proto.UpsertSqlMigrateTaskResponse
	(*DeleteSqlMigrateTaskRequest)(nil),     // 38: proto.DeleteSqlMigrateTaskRequest
	(*DeleteSqlMigrateTaskResponse)(nil),    // 39: proto.DeleteSqlMigrateTaskResponse
	(*ShowSqlMigrateTaskRequest)(nil),       // 40: proto.ShowSqlMigrateTaskRequest
	(*ShowSqlMigrateTaskResponse)(nil),      // 41: proto.ShowSqlMigrateTaskResponse
	(*UpsertCsvMigrateTaskRequest)(nil),     // 42: proto.UpsertCsvMigrateTaskRequest
	(*UpsertCsvMigrateTaskResponse)(nil),    // 43: proto.UpsertCsvMigrateTaskResponse
	(*DeleteCsvMigrateTaskRequest)(nil),     // 44: proto.DeleteCsvMigrateTaskRequest
	(*DeleteCsvMigrateTaskResponse)(nil),    // 45: proto.DeleteCsvMigrateTaskResponse
	(*ShowCsvMigrateTaskRequest)(nil),       // 46: proto.ShowCsvMigrateTaskRequest
	(*ShowCsvMigrateTaskResponse)(nil),      // 47: proto.ShowCsvMigrateTaskResponse
	(*UpsertDataCompareTaskRequest)(nil),    // 48: proto.UpsertDataCompareTaskRequest
	(*UpsertDataCompareTaskResponse)(nil),   // 49: proto.UpsertDataCompareTaskResponse
	(*DeleteDataCompareTaskRequest)(nil),    // 50: proto.DeleteDataCompareTaskRequest
	(*DeleteDataCompareTaskResponse)(nil),   // 51: proto.DeleteDataCompareTaskResponse
	(*ShowDataCompareTaskRequest)(nil),      // 52: proto.ShowDataCompareTaskRequest
	(*ShowDataCompareTaskResponse)(nil),     // 53: proto.ShowDataCompareTaskResponse
	(*UpsertDataScanTaskRequest)(nil),       // 54: proto.UpsertDataScanTaskRequest
	(*UpsertDataScanTaskResponse)(nil),      // 55: proto.UpsertDataScanTaskResponse
	(*DeleteDataScanTaskRequest)(nil),       // 56: proto.DeleteDataScanTaskRequest
	(*DeleteDataScanTaskResponse)(nil),      // 57: proto.DeleteDataScanTaskResponse
	(*ShowDataScanTaskRequest)(nil),         // 58: proto.ShowDataScanTaskRequest
	(*ShowDataScanTaskResponse)(nil),        // 59: proto.ShowDataScanTaskResponse
	(*OperateTaskRequest)(nil),              // 60: proto.OperateTaskRequest
	(*OperateTaskResponse)(nil),             // 61: proto.OperateTaskResponse
	(*Database)(nil),                        // 62: proto.Database
	(*Datasource)(nil),                      // 63: proto.Datasource
	(*SchemaRouteRule)(nil),                 // 64: proto.SchemaRouteRule
	(*CaseFieldRule)(nil),                   // 65: proto.CaseFieldRule
	(*TableRouteRule)(nil),                  // 66: proto.TableRouteRule
	(*AssessMigrateParam)(nil),              // 67: proto.AssessMigrateParam
	(*StructMigrateParam)(nil),              // 68: proto.StructMigrateParam
	(*StructMigrateRule)(nil),               // 69: proto.StructMigrateRule
	(*StructCompareParam)(nil),              // 70: proto.StructCompareParam
	(*StructCompareRule)(nil),               // 71: proto.StructCompareRule
	(*TaskStructRule)(nil),                  // 72: proto.TaskStructRule
	(*SchemaStructRule)(nil),                // 73: proto.SchemaStructRule
	(*TableStructRule)(nil),                 // 74: proto.TableStructRule
	(*ColumnStructRule)(nil),                // 75: proto.ColumnStructRule
	(*TableAttrsRule)(nil),                  // 76: proto.TableAttrsRule
	(*DataMigrateRule)(nil),                 // 77: proto.DataMigrateRule
	(*StatementMigrateParam)(nil),           // 78: proto.StatementMigrateParam
	(*CsvMigrateParam)(nil),                 // 79: proto.CsvMigrateParam
	(*DataCompareRule)(nil),                 // 80: proto.DataCompareRule
	(*DataCompareParam)(nil),                // 81: proto.DataCompareParam
	(*SqlMigrateRule)(nil),                  // 82: proto.SqlMigrateRule
	(*SqlMigrateParam)(nil),                 // 83: proto.SqlMigrateParam
	(*DataScanRule)(nil),                    // 84: proto.DataScanRule
	(*DataScanParam)(nil),                   // 85: proto.DataScanParam
	nil,                                     // 86: proto.TableRouteRule.ColumnRouteRulesEntry
	nil,                                     // 87: proto.SqlMigrateRule.ColumnRouteRulesEntry
	(*Response)(nil),                        // 88: proto.Response
}
var file_dbms_master_proto_depIdxs = []int32{
	62,  // 0: proto.UpsertDatabaseRequest.database:type_name -> proto.Database
	88,  // 1: proto.UpsertDatabaseResponse.response:type_name -> proto.Response
	88,  // 2: proto.DeleteDatabaseResponse.response:type_name -> proto.Response
	88,  // 3: proto.ShowDatabaseResponse.response:type_name -> proto.Response
	63,  // 4: proto.UpsertDatasourceRequest.datasource:type_name -> proto.Datasource
	88,  // 5: proto.UpsertDatasourceResponse.response:type_name -> proto.Response
	88,  // 6: proto.DeleteDatasourceResponse.response:type_name -> proto.Response
	88,  // 7: proto.ShowDatasourceResponse.response:type_name -> proto.Response
	67,  // 8: proto.UpsertAssessMigrateTaskRequest.assessMigrateParam:type_name -> proto.AssessMigrateParam
	88,  // 9: proto.UpsertAssessMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 10: proto.DeleteAssessMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 11: proto.ShowAssessMigrateTaskResponse.response:type_name -> proto.Response
	65,  // 12: proto.UpsertStructMigrateTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	64,  // 13: proto.UpsertStructMigrateTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	68,  // 14: proto.UpsertStructMigrateTaskRequest.structMigrateParam:type_name -> proto.StructMigrateParam
	69,  // 15: proto.UpsertStructMigrateTaskRequest.structMigrateRule:type_name -> proto.StructMigrateRule
	88,  // 16: proto.UpsertStructMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 17: proto.DeleteStructMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 18: proto.ShowStructMigrateTaskResponse.response:type_name -> proto.Response
	65,  // 19: proto.UpsertStructCompareTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	64,  // 20: proto.UpsertStructCompareTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	70,  // 21: proto.UpsertStructCompareTaskRequest.structCompareParam:type_name -> proto.StructCompareParam
	71,  // 22: proto.UpsertStructCompareTaskRequest.structCompareRule:type_name -> proto.StructCompareRule
	88,  // 23: proto.UpsertStructCompareTaskResponse.response:type_name -> proto.Response
	88,  // 24: proto.DeleteStructCompareTaskResponse.response:type_name -> proto.Response
	88,  // 25: proto.ShowStructCompareTaskResponse.response:type_name -> proto.Response
	65,  // 26: proto.UpsertStmtMigrateTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	64,  // 27: proto.UpsertStmtMigrateTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	77,  // 28: proto.UpsertStmtMigrateTaskRequest.DataMigrateRules:type_name -> proto.DataMigrateRule
	78,  // 29: proto.UpsertStmtMigrateTaskRequest.statementMigrateParam:type_name -> proto.StatementMigrateParam
	88,  // 30: proto.UpsertStmtMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 31: proto.DeleteStmtMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 32: proto.ShowStmtMigrateTaskResponse.response:type_name -> proto.Response
	65,  // 33: proto.UpsertSqlMigrateTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	82,  // 34: proto.UpsertSqlMigrateTaskRequest.SqlMigrateRules:type_name -> proto.SqlMigrateRule
	83,  // 35: proto.UpsertSqlMigrateTaskRequest.sqlMigrateParam:type_name -> proto.SqlMigrateParam
	88,  // 36: proto.UpsertSqlMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 37: proto.DeleteSqlMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 38: proto.ShowSqlMigrateTaskResponse.response:type_name -> proto.Response
	65,  // 39: proto.UpsertCsvMigrateTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	64,  // 40: proto.UpsertCsvMigrateTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	77,  // 41: proto.UpsertCsvMigrateTaskRequest.DataMigrateRules:type_name -> proto.DataMigrateRule
	79,  // 42: proto.UpsertCsvMigrateTaskRequest.CsvMigrateParam:type_name -> proto.CsvMigrateParam
	88,  // 43: proto.UpsertCsvMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 44: proto.DeleteCsvMigrateTaskResponse.response:type_name -> proto.Response
	88,  // 45: proto.ShowCsvMigrateTaskResponse.response:type_name -> proto.Response
	65,  // 46: proto.UpsertDataCompareTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	64,  // 47: proto.UpsertDataCompareTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	80,  // 48: proto.UpsertDataCompareTaskRequest.DataCompareRules:type_name -> proto.DataCompareRule
	81,  // 49: proto.UpsertDataCompareTaskRequest.DataCompareParam:type_name -> proto.DataCompareParam
	88,  // 50: proto.UpsertDataCompareTaskResponse.response:type_name -> proto.Response
	88,  // 51: proto.DeleteDataCompareTaskResponse.response:type_name -> proto.Response
	88,  // 52: proto.ShowDataCompareTaskResponse.response:type_name -> proto.Response
	65,  // 53: proto.UpsertDataScanTaskRequest.caseFieldRule:type_name -> proto.CaseFieldRule
	64,  // 54: proto.UpsertDataScanTaskRequest.schemaRouteRule:type_name -> proto.SchemaRouteRule
	84,  // 55: proto.UpsertDataScanTaskRequest.DataScanRules:type_name -> proto.DataScanRule
	85,  // 56: proto.UpsertDataScanTaskRequest.DataScanParam:type_name -> proto.DataScanParam
	88,  // 57: proto.UpsertDataScanTaskResponse.response:type_name -> proto.Response
	88,  // 58: proto.DeleteDataScanTaskResponse.response:type_name -> proto.Response
	88,  // 59: proto.ShowDataScanTaskResponse.response:type_name -> proto.Response
	88,  // 60: proto.OperateTaskResponse.response:type_name -> proto.Response
	66,  // 61: proto.SchemaRouteRule.tableRouteRules:type_name -> proto.TableRouteRule
	86,  // 62: proto.TableRouteRule.columnRouteRules:type_name -> proto.TableRouteRule.ColumnRouteRulesEntry
	72,  // 63: proto.StructMigrateRule.taskStructRules:type_name -> proto.TaskStructRule
	73,  // 64: proto.StructMigrateRule.schemaStructRules:type_name -> proto.SchemaStructRule
	74,  // 65: proto.StructMigrateRule.tableStructRules:type_name -> proto.TableStructRule
	75,  // 66: proto.StructMigrateRule.columnStructRules:type_name -> proto.ColumnStructRule
	76,  // 67: proto.StructMigrateRule.tableAttrsRules:type_name -> proto.TableAttrsRule
	72,  // 68: proto.StructCompareRule.taskStructRules:type_name -> proto.TaskStructRule
	73,  // 69: proto.StructCompareRule.schemaStructRules:type_name -> proto.SchemaStructRule
	74,  // 70: proto.StructCompareRule.tableStructRules:type_name -> proto.TableStructRule
	75,  // 71: proto.StructCompareRule.columnStructRules:type_name -> proto.ColumnStructRule
	87,  // 72: proto.SqlMigrateRule.columnRouteRules:type_name -> proto.SqlMigrateRule.ColumnRouteRulesEntry
	0,   // 73: proto.Master.UpsertDatabase:input_type -> proto.UpsertDatabaseRequest
	2,   // 74: proto.Master.DeleteDatabase:input_type -> proto.DeleteDatabaseRequest
	4,   // 75: proto.Master.ShowDatabase:input_type -> proto.ShowDatabaseRequest
	6,   // 76: proto.Master.UpsertDatasource:input_type -> proto.UpsertDatasourceRequest
	8,   // 77: proto.Master.DeleteDatasource:input_type -> proto.DeleteDatasourceRequest
	10,  // 78: proto.Master.ShowDatasource:input_type -> proto.ShowDatasourceRequest
	12,  // 79: proto.Master.UpsertAssessMigrateTask:input_type -> proto.UpsertAssessMigrateTaskRequest
	14,  // 80: proto.Master.DeleteAssessMigrateTask:input_type -> proto.DeleteAssessMigrateTaskRequest
	16,  // 81: proto.Master.ShowAssessMigrateTask:input_type -> proto.ShowAssessMigrateTaskRequest
	18,  // 82: proto.Master.UpsertStructMigrateTask:input_type -> proto.UpsertStructMigrateTaskRequest
	20,  // 83: proto.Master.DeleteStructMigrateTask:input_type -> proto.DeleteStructMigrateTaskRequest
	22,  // 84: proto.Master.ShowStructMigrateTask:input_type -> proto.ShowStructMigrateTaskRequest
	24,  // 85: proto.Master.UpsertStructCompareTask:input_type -> proto.UpsertStructCompareTaskRequest
	26,  // 86: proto.Master.DeleteStructCompareTask:input_type -> proto.DeleteStructCompareTaskRequest
	28,  // 87: proto.Master.ShowStructCompareTask:input_type -> proto.ShowStructCompareTaskRequest
	30,  // 88: proto.Master.UpsertStmtMigrateTask:input_type -> proto.UpsertStmtMigrateTaskRequest
	32,  // 89: proto.Master.DeleteStmtMigrateTask:input_type -> proto.DeleteStmtMigrateTaskRequest
	34,  // 90: proto.Master.ShowStmtMigrateTask:input_type -> proto.ShowStmtMigrateTaskRequest
	36,  // 91: proto.Master.UpsertSqlMigrateTask:input_type -> proto.UpsertSqlMigrateTaskRequest
	38,  // 92: proto.Master.DeleteSqlMigrateTask:input_type -> proto.DeleteSqlMigrateTaskRequest
	40,  // 93: proto.Master.ShowSqlMigrateTask:input_type -> proto.ShowSqlMigrateTaskRequest
	42,  // 94: proto.Master.UpsertCsvMigrateTask:input_type -> proto.UpsertCsvMigrateTaskRequest
	44,  // 95: proto.Master.DeleteCsvMigrateTask:input_type -> proto.DeleteCsvMigrateTaskRequest
	46,  // 96: proto.Master.ShowCsvMigrateTask:input_type -> proto.ShowCsvMigrateTaskRequest
	48,  // 97: proto.Master.UpsertDataCompareTask:input_type -> proto.UpsertDataCompareTaskRequest
	50,  // 98: proto.Master.DeleteDataCompareTask:input_type -> proto.DeleteDataCompareTaskRequest
	52,  // 99: proto.Master.ShowDataCompareTask:input_type -> proto.ShowDataCompareTaskRequest
	54,  // 100: proto.Master.UpsertDataScanTask:input_type -> proto.UpsertDataScanTaskRequest
	56,  // 101: proto.Master.DeleteDataScanTask:input_type -> proto.DeleteDataScanTaskRequest
	58,  // 102: proto.Master.ShowDataScanTask:input_type -> proto.ShowDataScanTaskRequest
	60,  // 103: proto.Master.OperateTask:input_type -> proto.OperateTaskRequest
	1,   // 104: proto.Master.UpsertDatabase:output_type -> proto.UpsertDatabaseResponse
	3,   // 105: proto.Master.DeleteDatabase:output_type -> proto.DeleteDatabaseResponse
	5,   // 106: proto.Master.ShowDatabase:output_type -> proto.ShowDatabaseResponse
	7,   // 107: proto.Master.UpsertDatasource:output_type -> proto.UpsertDatasourceResponse
	9,   // 108: proto.Master.DeleteDatasource:output_type -> proto.DeleteDatasourceResponse
	11,  // 109: proto.Master.ShowDatasource:output_type -> proto.ShowDatasourceResponse
	13,  // 110: proto.Master.UpsertAssessMigrateTask:output_type -> proto.UpsertAssessMigrateTaskResponse
	15,  // 111: proto.Master.DeleteAssessMigrateTask:output_type -> proto.DeleteAssessMigrateTaskResponse
	17,  // 112: proto.Master.ShowAssessMigrateTask:output_type -> proto.ShowAssessMigrateTaskResponse
	19,  // 113: proto.Master.UpsertStructMigrateTask:output_type -> proto.UpsertStructMigrateTaskResponse
	21,  // 114: proto.Master.DeleteStructMigrateTask:output_type -> proto.DeleteStructMigrateTaskResponse
	23,  // 115: proto.Master.ShowStructMigrateTask:output_type -> proto.ShowStructMigrateTaskResponse
	25,  // 116: proto.Master.UpsertStructCompareTask:output_type -> proto.UpsertStructCompareTaskResponse
	27,  // 117: proto.Master.DeleteStructCompareTask:output_type -> proto.DeleteStructCompareTaskResponse
	29,  // 118: proto.Master.ShowStructCompareTask:output_type -> proto.ShowStructCompareTaskResponse
	31,  // 119: proto.Master.UpsertStmtMigrateTask:output_type -> proto.UpsertStmtMigrateTaskResponse
	33,  // 120: proto.Master.DeleteStmtMigrateTask:output_type -> proto.DeleteStmtMigrateTaskResponse
	35,  // 121: proto.Master.ShowStmtMigrateTask:output_type -> proto.ShowStmtMigrateTaskResponse
	37,  // 122: proto.Master.UpsertSqlMigrateTask:output_type -> proto.UpsertSqlMigrateTaskResponse
	39,  // 123: proto.Master.DeleteSqlMigrateTask:output_type -> proto.DeleteSqlMigrateTaskResponse
	41,  // 124: proto.Master.ShowSqlMigrateTask:output_type -> proto.ShowSqlMigrateTaskResponse
	43,  // 125: proto.Master.UpsertCsvMigrateTask:output_type -> proto.UpsertCsvMigrateTaskResponse
	45,  // 126: proto.Master.DeleteCsvMigrateTask:output_type -> proto.DeleteCsvMigrateTaskResponse
	47,  // 127: proto.Master.ShowCsvMigrateTask:output_type -> proto.ShowCsvMigrateTaskResponse
	49,  // 128: proto.Master.UpsertDataCompareTask:output_type -> proto.UpsertDataCompareTaskResponse
	51,  // 129: proto.Master.DeleteDataCompareTask:output_type -> proto.DeleteDataCompareTaskResponse
	53,  // 130: proto.Master.ShowDataCompareTask:output_type -> proto.ShowDataCompareTaskResponse
	55,  // 131: proto.Master.UpsertDataScanTask:output_type -> proto.UpsertDataScanTaskResponse
	57,  // 132: proto.Master.DeleteDataScanTask:output_type -> proto.DeleteDataScanTaskResponse
	59,  // 133: proto.Master.ShowDataScanTask:output_type -> proto.ShowDataScanTaskResponse
	61,  // 134: proto.Master.OperateTask:output_type -> proto.OperateTaskResponse
	104, // [104:135] is the sub-list for method output_type
	73,  // [73:104] is the sub-list for method input_type
	73,  // [73:73] is the sub-list for extension type_name
	73,  // [73:73] is the sub-list for extension extendee
	0,   // [0:73] is the sub-list for field type_name
}

func init() { file_dbms_master_proto_init() }
func file_dbms_master_proto_init() {
	if File_dbms_master_proto != nil {
		return
	}
	file_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dbms_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatasourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDatasourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatasourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDatasourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAssessMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertAssessMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssessMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAssessMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAssessMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowAssessMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStructMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStructMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStructMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStructMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStructMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStructMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStructCompareTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStructCompareTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStructCompareTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStructCompareTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStructCompareTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStructCompareTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStmtMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStmtMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStmtMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStmtMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStmtMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowStmtMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSqlMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSqlMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSqlMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSqlMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSqlMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowSqlMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertCsvMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertCsvMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCsvMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCsvMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCsvMigrateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowCsvMigrateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDataCompareTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDataCompareTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataCompareTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataCompareTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDataCompareTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDataCompareTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDataScanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDataScanTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataScanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataScanTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDataScanTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowDataScanTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datasource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaRouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseFieldRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssessMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructMigrateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructCompareParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructCompareRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnStructRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableAttrsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMigrateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCompareRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCompareParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMigrateRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMigrateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataScanRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dbms_master_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataScanParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dbms_master_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dbms_master_proto_goTypes,
		DependencyIndexes: file_dbms_master_proto_depIdxs,
		MessageInfos:      file_dbms_master_proto_msgTypes,
	}.Build()
	File_dbms_master_proto = out.File
	file_dbms_master_proto_rawDesc = nil
	file_dbms_master_proto_goTypes = nil
	file_dbms_master_proto_depIdxs = nil
}
