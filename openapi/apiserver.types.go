// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CaseFieldRule defines model for CaseFieldRule.
type CaseFieldRule struct {
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT *string `json:"caseFieldRuleT,omitempty"`
}

// ColumnStructRule defines model for ColumnStructRule.
type ColumnStructRule struct {
	ColumnNameS   *string `json:"columnNameS,omitempty"`
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// CsvMigrateParam defines model for CsvMigrateParam.
type CsvMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	DataCharsetT         *string `json:"dataCharsetT,omitempty"`
	Delimiter            *string `json:"delimiter,omitempty"`
	DiskUsageFactor      *string `json:"diskUsageFactor,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	EscapeBackslash      *bool   `json:"escapeBackslash,omitempty"`
	Header               *bool   `json:"header,omitempty"`
	NullValue            *string `json:"nullValue,omitempty"`
	OutputDir            *string `json:"outputDir,omitempty"`
	Separator            *string `json:"separator,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
	Terminator           *string `json:"terminator,omitempty"`
}

// CsvMigrateTask defines model for CsvMigrateTask.
type CsvMigrateTask struct {
	CaseFieldRule   *CaseFieldRule   `json:"caseFieldRule,omitempty"`
	Comment         *string          `json:"comment,omitempty"`
	CsvMigrateParam *CsvMigrateParam `json:"csvMigrateParam,omitempty"`
	DatasourceNameS *string          `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string          `json:"datasourceNameT,omitempty"`
	SchemaRouteRule *SchemaRouteRule `json:"schemaRouteRule,omitempty"`
	TaskName        *string          `json:"taskName,omitempty"`
}

// DataMigrateRule defines model for DataMigrateRule.
type DataMigrateRule struct {
	EnableChunkStrategy *bool   `json:"enableChunkStrategy,omitempty"`
	SqlHintS            *string `json:"sqlHintS,omitempty"`
	TableNameS          *string `json:"tableNameS,omitempty"`
	WhereRange          *string `json:"whereRange,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Host          *string `json:"host,omitempty"`
	Password      *string `json:"password,omitempty"`
	Port          *uint64 `json:"port,omitempty"`
	Schema        *string `json:"schema,omitempty"`
	SlowThreshold *uint64 `json:"slowThreshold,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Comment        *string `json:"comment,omitempty"`
	ConnectCharset *string `json:"connectCharset,omitempty"`
	ConnectParams  *string `json:"connectParams,omitempty"`
	ConnectStatus  *string `json:"connectStatus,omitempty"`
	DatasourceName *string `json:"datasourceName,omitempty"`
	DbType         *string `json:"dbType,omitempty"`
	Host           *string `json:"host,omitempty"`
	Password       *string `json:"password,omitempty"`
	PdbName        *string `json:"pdbName,omitempty"`
	Port           *uint64 `json:"port,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// NewDatasource defines model for NewDatasource.
type NewDatasource struct {
	Datasource *[]Datasource `json:"datasource,omitempty"`
}

// RequestDeleteParam defines model for RequestDeleteParam.
type RequestDeleteParam struct {
	Param *[]string `json:"param,omitempty"`
}

// RequestPostParam defines model for RequestPostParam.
type RequestPostParam struct {
	Page     *uint64 `json:"page,omitempty"`
	PageSize *uint64 `json:"pageSize,omitempty"`
	Param    *string `json:"param,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code  uint64 `json:"code"`
	Data  string `json:"data"`
	Error string `json:"error"`
}

// SchemaRouteRule defines model for SchemaRouteRule.
type SchemaRouteRule struct {
	DataMigrateRules *[]DataMigrateRule `json:"DataMigrateRules,omitempty"`
	ExcludeTableS    *[]string          `json:"excludeTableS,omitempty"`
	IncludeTableS    *[]string          `json:"includeTableS,omitempty"`
	SchemaNameS      *string            `json:"schemaNameS,omitempty"`
	SchemaNameT      *string            `json:"schemaNameT,omitempty"`
	TableRouteRules  *[]TableRouteRule  `json:"tableRouteRules,omitempty"`
}

// SchemaStructRule defines model for SchemaStructRule.
type SchemaStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
}

// SqlMigrateParam defines model for SqlMigrateParam.
type SqlMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
}

// SqlMigrateRule defines model for SqlMigrateRule.
type SqlMigrateRule struct {
	CaseFieldRuleT   *string            `json:"caseFieldRuleT,omitempty"`
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	SchemaNameT      *string            `json:"schemaNameT,omitempty"`
	SqlHintT         *string            `json:"sqlHintT,omitempty"`
	SqlQueryS        *string            `json:"sqlQueryS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// SqlMigrateTask defines model for SqlMigrateTask.
type SqlMigrateTask struct {
	CaseFieldRule   *CaseFieldRule    `json:"caseFieldRule,omitempty"`
	Comment         *string           `json:"comment,omitempty"`
	DatasourceNameS *string           `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string           `json:"datasourceNameT,omitempty"`
	SqlMigrateParam *SqlMigrateParam  `json:"sqlMigrateParam,omitempty"`
	SqlMigrateRules *[]SqlMigrateRule `json:"sqlMigrateRules,omitempty"`
	TaskName        *string           `json:"taskName,omitempty"`
}

// StatementMigrateParam defines model for StatementMigrateParam.
type StatementMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
}

// StmtMigrateTask defines model for StmtMigrateTask.
type StmtMigrateTask struct {
	CaseFieldRule         *CaseFieldRule         `json:"caseFieldRule,omitempty"`
	Comment               *string                `json:"comment,omitempty"`
	DatasourceNameS       *string                `json:"datasourceNameS,omitempty"`
	DatasourceNameT       *string                `json:"datasourceNameT,omitempty"`
	SchemaRouteRule       *SchemaRouteRule       `json:"schemaRouteRule,omitempty"`
	StatementMigrateParam *StatementMigrateParam `json:"statementMigrateParam,omitempty"`
	TaskName              *string                `json:"taskName,omitempty"`
}

// StructMigrateParam defines model for StructMigrateParam.
type StructMigrateParam struct {
	CreateIfNotExist   *bool   `json:"createIfNotExist,omitempty"`
	EnableDirectCreate *bool   `json:"enableDirectCreate,omitempty"`
	MigrateThread      *uint64 `json:"migrateThread,omitempty"`
}

// StructMigrateRule defines model for StructMigrateRule.
type StructMigrateRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules,omitempty"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules,omitempty"`
	TableAttrsRules   *[]TableAttrsRule   `json:"tableAttrsRules,omitempty"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules,omitempty"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules,omitempty"`
}

// StructMigrateTask defines model for StructMigrateTask.
type StructMigrateTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment,omitempty"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `json:"schemaRouteRule,omitempty"`
	StructMigrateParam *StructMigrateParam `json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `json:"structMigrateRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// TableAttrsRule defines model for TableAttrsRule.
type TableAttrsRule struct {
	SchemaNameS *string   `json:"schemaNameS,omitempty"`
	TableAttrsT *string   `json:"tableAttrsT,omitempty"`
	TableNamesS *[]string `json:"tableNamesS,omitempty"`
}

// TableRouteRule defines model for TableRouteRule.
type TableRouteRule struct {
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	TableNameS       *string            `json:"tableNameS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// TableStructRule defines model for TableStructRule.
type TableStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Express  *string `json:"express,omitempty"`
	Operate  *string `json:"operate,omitempty"`
	TaskName *string `json:"taskName,omitempty"`
}

// TaskStructRule defines model for TaskStructRule.
type TaskStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
}

// APIPutDatabaseJSONRequestBody defines body for APIPutDatabase for application/json ContentType.
type APIPutDatabaseJSONRequestBody = Database

// APIDeleteDatasourceJSONRequestBody defines body for APIDeleteDatasource for application/json ContentType.
type APIDeleteDatasourceJSONRequestBody = RequestDeleteParam

// APIListDatasourceJSONRequestBody defines body for APIListDatasource for application/json ContentType.
type APIListDatasourceJSONRequestBody = RequestPostParam

// APIPutDatasourceJSONRequestBody defines body for APIPutDatasource for application/json ContentType.
type APIPutDatasourceJSONRequestBody = NewDatasource

// APIPostTaskJSONRequestBody defines body for APIPostTask for application/json ContentType.
type APIPostTaskJSONRequestBody = Task

// APIDeleteCsvMigrateJSONRequestBody defines body for APIDeleteCsvMigrate for application/json ContentType.
type APIDeleteCsvMigrateJSONRequestBody = RequestDeleteParam

// APIListCsvMigrateJSONRequestBody defines body for APIListCsvMigrate for application/json ContentType.
type APIListCsvMigrateJSONRequestBody = RequestPostParam

// APIPutCsvMigrateJSONRequestBody defines body for APIPutCsvMigrate for application/json ContentType.
type APIPutCsvMigrateJSONRequestBody = CsvMigrateTask

// APIDeleteSqlMigrateJSONRequestBody defines body for APIDeleteSqlMigrate for application/json ContentType.
type APIDeleteSqlMigrateJSONRequestBody = RequestDeleteParam

// APIListSqlMigrateJSONRequestBody defines body for APIListSqlMigrate for application/json ContentType.
type APIListSqlMigrateJSONRequestBody = RequestPostParam

// APIPutSqlMigrateJSONRequestBody defines body for APIPutSqlMigrate for application/json ContentType.
type APIPutSqlMigrateJSONRequestBody = SqlMigrateTask

// APIDeleteStmtMigrateJSONRequestBody defines body for APIDeleteStmtMigrate for application/json ContentType.
type APIDeleteStmtMigrateJSONRequestBody = RequestDeleteParam

// APIListStmtMigrateJSONRequestBody defines body for APIListStmtMigrate for application/json ContentType.
type APIListStmtMigrateJSONRequestBody = RequestPostParam

// APIPutStmtMigrateJSONRequestBody defines body for APIPutStmtMigrate for application/json ContentType.
type APIPutStmtMigrateJSONRequestBody = StmtMigrateTask

// APIDeleteStructMigrateJSONRequestBody defines body for APIDeleteStructMigrate for application/json ContentType.
type APIDeleteStructMigrateJSONRequestBody = RequestDeleteParam

// APIListStructMigrateJSONRequestBody defines body for APIListStructMigrate for application/json ContentType.
type APIListStructMigrateJSONRequestBody = RequestPostParam

// APIPutStructMigrateJSONRequestBody defines body for APIPutStructMigrate for application/json ContentType.
type APIPutStructMigrateJSONRequestBody = StructMigrateTask

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
