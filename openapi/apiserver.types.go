// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CaseFieldRule defines model for CaseFieldRule.
type CaseFieldRule struct {
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT *string `json:"caseFieldRuleT,omitempty"`
}

// ColumnStructRule defines model for ColumnStructRule.
type ColumnStructRule struct {
	ColumnNameS   *string `json:"columnNameS,omitempty"`
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// CsvMigrateParam defines model for CsvMigrateParam.
type CsvMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	DataCharsetT         *string `json:"dataCharsetT,omitempty"`
	Delimiter            *string `json:"delimiter,omitempty"`
	DiskUsageFactor      *string `json:"diskUsageFactor,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	EscapeBackslash      *bool   `json:"escapeBackslash,omitempty"`
	Header               *bool   `json:"header,omitempty"`
	NullValue            *string `json:"nullValue,omitempty"`
	OutputDir            *string `json:"outputDir,omitempty"`
	Separator            *string `json:"separator,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
	Terminator           *string `json:"terminator,omitempty"`
}

// CsvMigrateTask defines model for CsvMigrateTask.
type CsvMigrateTask struct {
	CaseFieldRule   *CaseFieldRule   `json:"caseFieldRule,omitempty"`
	Comment         *string          `json:"comment,omitempty"`
	CsvMigrateParam *CsvMigrateParam `json:"csvMigrateParam,omitempty"`
	DatasourceNameS *string          `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string          `json:"datasourceNameT,omitempty"`
	SchemaRouteRule *SchemaRouteRule `json:"schemaRouteRule,omitempty"`
	TaskName        *string          `json:"taskName,omitempty"`
}

// DataMigrateRule defines model for DataMigrateRule.
type DataMigrateRule struct {
	EnableChunkStrategy *bool   `json:"enableChunkStrategy,omitempty"`
	SqlHintS            *string `json:"sqlHintS,omitempty"`
	TableNameS          *string `json:"tableNameS,omitempty"`
	WhereRange          *string `json:"whereRange,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Host          *string `json:"host,omitempty"`
	Password      *string `json:"password,omitempty"`
	Port          *uint64 `json:"port,omitempty"`
	Schema        *string `json:"schema,omitempty"`
	SlowThreshold *uint64 `json:"slowThreshold,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Comment        *string `json:"comment,omitempty"`
	ConnectCharset *string `json:"connectCharset,omitempty"`
	ConnectParams  *string `json:"connectParams,omitempty"`
	ConnectStatus  *string `json:"connectStatus,omitempty"`
	DatasourceName *string `json:"datasourceName,omitempty"`
	DbType         *string `json:"dbType,omitempty"`
	Host           *string `json:"host,omitempty"`
	Password       *string `json:"password,omitempty"`
	PdbName        *string `json:"pdbName,omitempty"`
	Port           *uint64 `json:"port,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// NewDatasource defines model for NewDatasource.
type NewDatasource struct {
	Datasource *[]Datasource `json:"datasource,omitempty"`
}

// RequestDeleteParam defines model for RequestDeleteParam.
type RequestDeleteParam struct {
	Param *[]string `json:"param,omitempty"`
}

// RequestPostParam defines model for RequestPostParam.
type RequestPostParam struct {
	Page     *uint64 `json:"page,omitempty"`
	PageSize *uint64 `json:"pageSize,omitempty"`
	Param    *string `json:"param,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code  uint64 `json:"code"`
	Data  string `json:"data"`
	Error string `json:"error"`
}

// SchemaRouteRule defines model for SchemaRouteRule.
type SchemaRouteRule struct {
	DataMigrateRules *[]DataMigrateRule `json:"DataMigrateRules,omitempty"`
	ExcludeTableS    *[]string          `json:"excludeTableS,omitempty"`
	IncludeTableS    *[]string          `json:"includeTableS,omitempty"`
	SchemaNameS      *string            `json:"schemaNameS,omitempty"`
	SchemaNameT      *string            `json:"schemaNameT,omitempty"`
	TableRouteRules  *[]TableRouteRule  `json:"tableRouteRules,omitempty"`
}

// SchemaStructRule defines model for SchemaStructRule.
type SchemaStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
}

// SqlMigrateParam defines model for SqlMigrateParam.
type SqlMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
}

// SqlMigrateRule defines model for SqlMigrateRule.
type SqlMigrateRule struct {
	CaseFieldRuleT   *string            `json:"caseFieldRuleT,omitempty"`
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	SchemaNameT      *string            `json:"schemaNameT,omitempty"`
	SqlHintT         *string            `json:"sqlHintT,omitempty"`
	SqlQueryS        *string            `json:"sqlQueryS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// SqlMigrateTask defines model for SqlMigrateTask.
type SqlMigrateTask struct {
	CaseFieldRule   *CaseFieldRule    `json:"caseFieldRule,omitempty"`
	Comment         *string           `json:"comment,omitempty"`
	DatasourceNameS *string           `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string           `json:"datasourceNameT,omitempty"`
	SqlMigrateParam *SqlMigrateParam  `json:"sqlMigrateParam,omitempty"`
	SqlMigrateRules *[]SqlMigrateRule `json:"sqlMigrateRules,omitempty"`
	TaskName        *string           `json:"taskName,omitempty"`
}

// StatementMigrateParam defines model for StatementMigrateParam.
type StatementMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
}

// StmtMigrateTask defines model for StmtMigrateTask.
type StmtMigrateTask struct {
	CaseFieldRule         *CaseFieldRule         `json:"caseFieldRule,omitempty"`
	Comment               *string                `json:"comment,omitempty"`
	DatasourceNameS       *string                `json:"datasourceNameS,omitempty"`
	DatasourceNameT       *string                `json:"datasourceNameT,omitempty"`
	SchemaRouteRule       *SchemaRouteRule       `json:"schemaRouteRule,omitempty"`
	StatementMigrateParam *StatementMigrateParam `json:"statementMigrateParam,omitempty"`
	TaskName              *string                `json:"taskName,omitempty"`
}

// StructMigrateParam defines model for StructMigrateParam.
type StructMigrateParam struct {
	CreateIfNotExist *bool   `json:"createIfNotExist,omitempty"`
	DirectWrite      *bool   `json:"directWrite,omitempty"`
	MigrateThread    *uint64 `json:"migrateThread,omitempty"`
	OutputDir        *string `json:"outputDir,omitempty"`
}

// StructMigrateRule defines model for StructMigrateRule.
type StructMigrateRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules,omitempty"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules,omitempty"`
	TableAttrsRules   *[]TableAttrsRule   `json:"tableAttrsRules,omitempty"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules,omitempty"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules,omitempty"`
}

// StructMigrateTask defines model for StructMigrateTask.
type StructMigrateTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment,omitempty"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `json:"schemaRouteRule,omitempty"`
	StructMigrateParam *StructMigrateParam `json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `json:"structMigrateRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// TableAttrsRule defines model for TableAttrsRule.
type TableAttrsRule struct {
	SchemaNameS *string   `json:"schemaNameS,omitempty"`
	TableAttrsT *string   `json:"tableAttrsT,omitempty"`
	TableNamesS *[]string `json:"tableNamesS,omitempty"`
}

// TableRouteRule defines model for TableRouteRule.
type TableRouteRule struct {
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	TableNameS       *string            `json:"tableNameS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// TableStructRule defines model for TableStructRule.
type TableStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Express  *string `json:"express,omitempty"`
	Operate  *string `json:"operate,omitempty"`
	TaskName *string `json:"taskName,omitempty"`
}

// TaskStructRule defines model for TaskStructRule.
type TaskStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
}

// APIPutDatabaseJSONRequestBody defines body for APIPutDatabase for application/json ContentType.
type APIPutDatabaseJSONRequestBody = Database

// APIDeleteDatasourceJSONRequestBody defines body for APIDeleteDatasource for application/json ContentType.
type APIDeleteDatasourceJSONRequestBody = RequestDeleteParam

// APIListDatasourceJSONRequestBody defines body for APIListDatasource for application/json ContentType.
type APIListDatasourceJSONRequestBody = RequestPostParam

// APIPutDatasourceJSONRequestBody defines body for APIPutDatasource for application/json ContentType.
type APIPutDatasourceJSONRequestBody = NewDatasource

// APIPostTaskJSONRequestBody defines body for APIPostTask for application/json ContentType.
type APIPostTaskJSONRequestBody = Task

// APIDeleteCsvMigrateJSONRequestBody defines body for APIDeleteCsvMigrate for application/json ContentType.
type APIDeleteCsvMigrateJSONRequestBody = RequestDeleteParam

// APIListCsvMigrateJSONRequestBody defines body for APIListCsvMigrate for application/json ContentType.
type APIListCsvMigrateJSONRequestBody = RequestPostParam

// APIPutCsvMigrateJSONRequestBody defines body for APIPutCsvMigrate for application/json ContentType.
type APIPutCsvMigrateJSONRequestBody = CsvMigrateTask

// APIDeleteSqlMigrateJSONRequestBody defines body for APIDeleteSqlMigrate for application/json ContentType.
type APIDeleteSqlMigrateJSONRequestBody = RequestDeleteParam

// APIListSqlMigrateJSONRequestBody defines body for APIListSqlMigrate for application/json ContentType.
type APIListSqlMigrateJSONRequestBody = RequestPostParam

// APIPutSqlMigrateJSONRequestBody defines body for APIPutSqlMigrate for application/json ContentType.
type APIPutSqlMigrateJSONRequestBody = SqlMigrateTask

// APIDeleteStmtMigrateJSONRequestBody defines body for APIDeleteStmtMigrate for application/json ContentType.
type APIDeleteStmtMigrateJSONRequestBody = RequestDeleteParam

// APIListStmtMigrateJSONRequestBody defines body for APIListStmtMigrate for application/json ContentType.
type APIListStmtMigrateJSONRequestBody = RequestPostParam

// APIPutStmtMigrateJSONRequestBody defines body for APIPutStmtMigrate for application/json ContentType.
type APIPutStmtMigrateJSONRequestBody = StmtMigrateTask

// APIDeleteStructMigrateJSONRequestBody defines body for APIDeleteStructMigrate for application/json ContentType.
type APIDeleteStructMigrateJSONRequestBody = RequestDeleteParam

// APIListStructMigrateJSONRequestBody defines body for APIListStructMigrate for application/json ContentType.
type APIListStructMigrateJSONRequestBody = RequestPostParam

// APIPutStructMigrateJSONRequestBody defines body for APIPutStructMigrate for application/json ContentType.
type APIPutStructMigrateJSONRequestBody = StructMigrateTask

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JvxMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
