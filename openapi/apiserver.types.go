// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CaseFieldRule defines model for CaseFieldRule.
type CaseFieldRule struct {
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT *string `json:"caseFieldRuleT,omitempty"`
}

// ColumnStructRule defines model for ColumnStructRule.
type ColumnStructRule struct {
	ColumnNameS   *string `json:"columnNameS,omitempty"`
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// CsvMigrateParam defines model for CsvMigrateParam.
type CsvMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	DataCharsetT         *string `json:"dataCharsetT,omitempty"`
	Delimiter            *string `json:"delimiter,omitempty"`
	DiskUsageFactor      *string `json:"diskUsageFactor,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	EscapeBackslash      *bool   `json:"escapeBackslash,omitempty"`
	Header               *bool   `json:"header,omitempty"`
	NullValue            *string `json:"nullValue,omitempty"`
	OutputDir            *string `json:"outputDir,omitempty"`
	Separator            *string `json:"separator,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
	Terminator           *string `json:"terminator,omitempty"`
}

// CsvMigrateTask defines model for CsvMigrateTask.
type CsvMigrateTask struct {
	CaseFieldRule    *CaseFieldRule     `json:"caseFieldRule,omitempty"`
	Comment          *string            `json:"comment,omitempty"`
	CsvMigrateParam  *CsvMigrateParam   `json:"csvMigrateParam,omitempty"`
	DataMigrateRules *[]DataMigrateRule `json:"dataMigrateRules,omitempty"`
	DatasourceNameS  *string            `json:"datasourceNameS,omitempty"`
	DatasourceNameT  *string            `json:"datasourceNameT,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `json:"schemaRouteRule,omitempty"`
	TaskName         *string            `json:"taskName,omitempty"`
}

// DataCompareParam defines model for DataCompareParam.
type DataCompareParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	OnlyCompareRow       *bool   `json:"onlyCompareRow,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThread            *uint64 `json:"sqlThread,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
}

// DataCompareRule defines model for DataCompareRule.
type DataCompareRule struct {
	ColumnField  *string `json:"columnField,omitempty"`
	CompareRange *string `json:"compareRange,omitempty"`
	TableNameS   *string `json:"tableNameS,omitempty"`
}

// DataCompareTask defines model for DataCompareTask.
type DataCompareTask struct {
	CaseFieldRule    *CaseFieldRule     `json:"caseFieldRule,omitempty"`
	Comment          *string            `json:"comment,omitempty"`
	DataCompareParam *DataCompareParam  `json:"dataCompareParam,omitempty"`
	DataCompareRules *[]DataCompareRule `json:"dataCompareRules,omitempty"`
	DatasourceNameS  *string            `json:"datasourceNameS,omitempty"`
	DatasourceNameT  *string            `json:"datasourceNameT,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `json:"schemaRouteRule,omitempty"`
	TaskName         *string            `json:"taskName,omitempty"`
}

// DataMigrateRule defines model for DataMigrateRule.
type DataMigrateRule struct {
	EnableChunkStrategy *bool   `json:"enableChunkStrategy,omitempty"`
	SqlHintS            *string `json:"sqlHintS,omitempty"`
	TableNameS          *string `json:"tableNameS,omitempty"`
	WhereRange          *string `json:"whereRange,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Host          *string `json:"host,omitempty"`
	Password      *string `json:"password,omitempty"`
	Port          *uint64 `json:"port,omitempty"`
	Schema        *string `json:"schema,omitempty"`
	SlowThreshold *uint64 `json:"slowThreshold,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Comment        *string `json:"comment,omitempty"`
	ConnectCharset *string `json:"connectCharset,omitempty"`
	ConnectParams  *string `json:"connectParams,omitempty"`
	ConnectStatus  *string `json:"connectStatus,omitempty"`
	DatasourceName *string `json:"datasourceName,omitempty"`
	DbType         *string `json:"dbType,omitempty"`
	Host           *string `json:"host,omitempty"`
	Password       *string `json:"password,omitempty"`
	PdbName        *string `json:"pdbName,omitempty"`
	Port           *uint64 `json:"port,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// NewDatasource defines model for NewDatasource.
type NewDatasource struct {
	Datasource *[]Datasource `json:"datasource,omitempty"`
}

// RequestDeleteParam defines model for RequestDeleteParam.
type RequestDeleteParam struct {
	Param *[]string `json:"param,omitempty"`
}

// RequestPostParam defines model for RequestPostParam.
type RequestPostParam struct {
	Page     *uint64 `json:"page,omitempty"`
	PageSize *uint64 `json:"pageSize,omitempty"`
	Param    *string `json:"param,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code  uint64 `json:"code"`
	Data  string `json:"data"`
	Error string `json:"error"`
}

// SchemaRouteRule defines model for SchemaRouteRule.
type SchemaRouteRule struct {
	ExcludeTableS   *[]string         `json:"excludeTableS,omitempty"`
	IncludeTableS   *[]string         `json:"includeTableS,omitempty"`
	SchemaNameS     *string           `json:"schemaNameS,omitempty"`
	SchemaNameT     *string           `json:"schemaNameT,omitempty"`
	TableRouteRules *[]TableRouteRule `json:"tableRouteRules,omitempty"`
}

// SchemaStructRule defines model for SchemaStructRule.
type SchemaStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
}

// SqlMigrateParam defines model for SqlMigrateParam.
type SqlMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
}

// SqlMigrateRule defines model for SqlMigrateRule.
type SqlMigrateRule struct {
	CaseFieldRuleT   *string            `json:"caseFieldRuleT,omitempty"`
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	SchemaNameT      *string            `json:"schemaNameT,omitempty"`
	SqlHintT         *string            `json:"sqlHintT,omitempty"`
	SqlQueryS        *string            `json:"sqlQueryS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// SqlMigrateTask defines model for SqlMigrateTask.
type SqlMigrateTask struct {
	CaseFieldRule   *CaseFieldRule    `json:"caseFieldRule,omitempty"`
	Comment         *string           `json:"comment,omitempty"`
	DatasourceNameS *string           `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string           `json:"datasourceNameT,omitempty"`
	SqlMigrateParam *SqlMigrateParam  `json:"sqlMigrateParam,omitempty"`
	SqlMigrateRules *[]SqlMigrateRule `json:"sqlMigrateRules,omitempty"`
	TaskName        *string           `json:"taskName,omitempty"`
}

// StatementMigrateParam defines model for StatementMigrateParam.
type StatementMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
}

// StmtMigrateTask defines model for StmtMigrateTask.
type StmtMigrateTask struct {
	DataMigrateRules      *[]DataMigrateRule     `json:"DataMigrateRules,omitempty"`
	CaseFieldRule         *CaseFieldRule         `json:"caseFieldRule,omitempty"`
	Comment               *string                `json:"comment,omitempty"`
	DatasourceNameS       *string                `json:"datasourceNameS,omitempty"`
	DatasourceNameT       *string                `json:"datasourceNameT,omitempty"`
	SchemaRouteRule       *SchemaRouteRule       `json:"schemaRouteRule,omitempty"`
	StatementMigrateParam *StatementMigrateParam `json:"statementMigrateParam,omitempty"`
	TaskName              *string                `json:"taskName,omitempty"`
}

// StructMigrateParam defines model for StructMigrateParam.
type StructMigrateParam struct {
	CreateIfNotExist   *bool   `json:"createIfNotExist,omitempty"`
	EnableDirectCreate *bool   `json:"enableDirectCreate,omitempty"`
	MigrateThread      *uint64 `json:"migrateThread,omitempty"`
}

// StructMigrateRule defines model for StructMigrateRule.
type StructMigrateRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules,omitempty"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules,omitempty"`
	TableAttrsRules   *[]TableAttrsRule   `json:"tableAttrsRules,omitempty"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules,omitempty"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules,omitempty"`
}

// StructMigrateTask defines model for StructMigrateTask.
type StructMigrateTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment,omitempty"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `json:"schemaRouteRule,omitempty"`
	StructMigrateParam *StructMigrateParam `json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `json:"structMigrateRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// TableAttrsRule defines model for TableAttrsRule.
type TableAttrsRule struct {
	SchemaNameS *string   `json:"schemaNameS,omitempty"`
	TableAttrsT *string   `json:"tableAttrsT,omitempty"`
	TableNamesS *[]string `json:"tableNamesS,omitempty"`
}

// TableRouteRule defines model for TableRouteRule.
type TableRouteRule struct {
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	TableNameS       *string            `json:"tableNameS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// TableStructRule defines model for TableStructRule.
type TableStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Express  *string `json:"express,omitempty"`
	Operate  *string `json:"operate,omitempty"`
	TaskName *string `json:"taskName,omitempty"`
}

// TaskStructRule defines model for TaskStructRule.
type TaskStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
}

// APIPutDatabaseJSONRequestBody defines body for APIPutDatabase for application/json ContentType.
type APIPutDatabaseJSONRequestBody = Database

// APIDeleteDatasourceJSONRequestBody defines body for APIDeleteDatasource for application/json ContentType.
type APIDeleteDatasourceJSONRequestBody = RequestDeleteParam

// APIListDatasourceJSONRequestBody defines body for APIListDatasource for application/json ContentType.
type APIListDatasourceJSONRequestBody = RequestPostParam

// APIPutDatasourceJSONRequestBody defines body for APIPutDatasource for application/json ContentType.
type APIPutDatasourceJSONRequestBody = NewDatasource

// APIPostTaskJSONRequestBody defines body for APIPostTask for application/json ContentType.
type APIPostTaskJSONRequestBody = Task

// APIDeleteCsvMigrateJSONRequestBody defines body for APIDeleteCsvMigrate for application/json ContentType.
type APIDeleteCsvMigrateJSONRequestBody = RequestDeleteParam

// APIListCsvMigrateJSONRequestBody defines body for APIListCsvMigrate for application/json ContentType.
type APIListCsvMigrateJSONRequestBody = RequestPostParam

// APIPutCsvMigrateJSONRequestBody defines body for APIPutCsvMigrate for application/json ContentType.
type APIPutCsvMigrateJSONRequestBody = CsvMigrateTask

// APIDeleteDataCompareJSONRequestBody defines body for APIDeleteDataCompare for application/json ContentType.
type APIDeleteDataCompareJSONRequestBody = RequestDeleteParam

// APIListDataCompareJSONRequestBody defines body for APIListDataCompare for application/json ContentType.
type APIListDataCompareJSONRequestBody = RequestPostParam

// APIPutDataCompareJSONRequestBody defines body for APIPutDataCompare for application/json ContentType.
type APIPutDataCompareJSONRequestBody = DataCompareTask

// APIDeleteSqlMigrateJSONRequestBody defines body for APIDeleteSqlMigrate for application/json ContentType.
type APIDeleteSqlMigrateJSONRequestBody = RequestDeleteParam

// APIListSqlMigrateJSONRequestBody defines body for APIListSqlMigrate for application/json ContentType.
type APIListSqlMigrateJSONRequestBody = RequestPostParam

// APIPutSqlMigrateJSONRequestBody defines body for APIPutSqlMigrate for application/json ContentType.
type APIPutSqlMigrateJSONRequestBody = SqlMigrateTask

// APIDeleteStmtMigrateJSONRequestBody defines body for APIDeleteStmtMigrate for application/json ContentType.
type APIDeleteStmtMigrateJSONRequestBody = RequestDeleteParam

// APIListStmtMigrateJSONRequestBody defines body for APIListStmtMigrate for application/json ContentType.
type APIListStmtMigrateJSONRequestBody = RequestPostParam

// APIPutStmtMigrateJSONRequestBody defines body for APIPutStmtMigrate for application/json ContentType.
type APIPutStmtMigrateJSONRequestBody = StmtMigrateTask

// APIDeleteStructMigrateJSONRequestBody defines body for APIDeleteStructMigrate for application/json ContentType.
type APIDeleteStructMigrateJSONRequestBody = RequestDeleteParam

// APIListStructMigrateJSONRequestBody defines body for APIListStructMigrate for application/json ContentType.
type APIListStructMigrateJSONRequestBody = RequestPostParam

// APIPutStructMigrateJSONRequestBody defines body for APIPutStructMigrate for application/json ContentType.
type APIPutStructMigrateJSONRequestBody = StructMigrateTask

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
