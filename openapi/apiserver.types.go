// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// ColumnStructRule defines model for ColumnStructRule.
type ColumnStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SourceColumn  *string `json:"sourceColumn,omitempty"`
	SourceSchema  *string `json:"sourceSchema,omitempty"`
	SourceTable   *string `json:"sourceTable,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Host          *string `json:"host,omitempty"`
	Password      *string `json:"password,omitempty"`
	Port          *uint64 `json:"port,omitempty"`
	Schema        *string `json:"schema,omitempty"`
	SlowThreshold *uint64 `json:"slowThreshold,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Comment        *string `json:"comment,omitempty"`
	ConnectCharset *string `json:"connectCharset,omitempty"`
	ConnectParams  *string `json:"connectParams,omitempty"`
	ConnectStatus  *string `json:"connectStatus,omitempty"`
	DatasourceName *string `json:"datasourceName,omitempty"`
	DbType         *string `json:"dbType,omitempty"`
	Host           *string `json:"host,omitempty"`
	Password       *string `json:"password,omitempty"`
	PdbName        *string `json:"pdbName,omitempty"`
	Port           *uint64 `json:"port,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// NewDatasource defines model for NewDatasource.
type NewDatasource struct {
	Datasource *[]Datasource `json:"datasource,omitempty"`
}

// RequestDeleteParam defines model for RequestDeleteParam.
type RequestDeleteParam struct {
	Param *[]string `json:"param,omitempty"`
}

// RequestPostParam defines model for RequestPostParam.
type RequestPostParam struct {
	Page     *uint64 `json:"page,omitempty"`
	PageSize *uint64 `json:"pageSize,omitempty"`
	Param    *string `json:"param,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code  uint64 `json:"code"`
	Data  string `json:"data"`
	Error string `json:"error"`
}

// Rule defines model for Rule.
type Rule struct {
	Comment          *string            `json:"comment,omitempty"`
	DatasourceNameS  *string            `json:"datasourceNameS,omitempty"`
	DatasourceNameT  *string            `json:"datasourceNameT,omitempty"`
	SchemaRouteRules *[]SchemaRouteRule `json:"schemaRouteRules,omitempty"`
	TaskRuleName     *string            `json:"taskRuleName,omitempty"`
}

// SchemaRouteRule defines model for SchemaRouteRule.
type SchemaRouteRule struct {
	CaseFieldRule      *string           `json:"caseFieldRule,omitempty"`
	SourceExcludeTable *[]string         `json:"sourceExcludeTable,omitempty"`
	SourceIncludeTable *[]string         `json:"sourceIncludeTable,omitempty"`
	SourceSchema       *string           `json:"sourceSchema,omitempty"`
	TableRouteRules    *[]TableRouteRule `json:"tableRouteRules,omitempty"`
	TargetSchema       *string           `json:"targetSchema,omitempty"`
}

// SchemaStructRule defines model for SchemaStructRule.
type SchemaStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SourceSchema  *string `json:"sourceSchema,omitempty"`
}

// StructMigrateParam defines model for StructMigrateParam.
type StructMigrateParam struct {
	CaseFieldRule *string `json:"caseFieldRule,omitempty"`
	DirectWrite   *bool   `json:"directWrite,omitempty"`
	MigrateThread *uint64 `json:"migrateThread,omitempty"`
	OutputDir     *string `json:"outputDir,omitempty"`
	TaskQueueSize *uint64 `json:"taskQueueSize,omitempty"`
}

// StructMigrateRule defines model for StructMigrateRule.
type StructMigrateRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules,omitempty"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules,omitempty"`
	TableAttrsRules   *[]TableAttrsRule   `json:"tableAttrsRules,omitempty"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules,omitempty"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules,omitempty"`
}

// StructMigrateTask defines model for StructMigrateTask.
type StructMigrateTask struct {
	StructMigrateParam *StructMigrateParam `json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `json:"structMigrateRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
	TaskRuleName       *string             `json:"taskRuleName,omitempty"`
}

// TableAttrsRule defines model for TableAttrsRule.
type TableAttrsRule struct {
	SourceSchema *string   `json:"sourceSchema,omitempty"`
	SourceTables *[]string `json:"sourceTables,omitempty"`
	TableAttrsT  *string   `json:"tableAttrsT,omitempty"`
}

// TableRouteRule defines model for TableRouteRule.
type TableRouteRule struct {
	CaseFieldRule    *string            `json:"caseFieldRule,omitempty"`
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	SourceTable      *string            `json:"sourceTable,omitempty"`
	TargetTable      *string            `json:"targetTable,omitempty"`
}

// TableStructRule defines model for TableStructRule.
type TableStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SourceSchema  *string `json:"sourceSchema,omitempty"`
	SourceTable   *string `json:"sourceTable,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Express  *string `json:"express,omitempty"`
	Operate  *string `json:"operate,omitempty"`
	TaskName *string `json:"taskName,omitempty"`
}

// TaskStructRule defines model for TaskStructRule.
type TaskStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
}

// APIPutDatabaseJSONRequestBody defines body for APIPutDatabase for application/json ContentType.
type APIPutDatabaseJSONRequestBody = Database

// APIDeleteDatasourceJSONRequestBody defines body for APIDeleteDatasource for application/json ContentType.
type APIDeleteDatasourceJSONRequestBody = RequestDeleteParam

// APIListDatasourceJSONRequestBody defines body for APIListDatasource for application/json ContentType.
type APIListDatasourceJSONRequestBody = RequestPostParam

// APIPutDatasourceJSONRequestBody defines body for APIPutDatasource for application/json ContentType.
type APIPutDatasourceJSONRequestBody = NewDatasource

// APIDeleteRuleJSONRequestBody defines body for APIDeleteRule for application/json ContentType.
type APIDeleteRuleJSONRequestBody = RequestDeleteParam

// APIListRuleJSONRequestBody defines body for APIListRule for application/json ContentType.
type APIListRuleJSONRequestBody = RequestPostParam

// APIPutRuleJSONRequestBody defines body for APIPutRule for application/json ContentType.
type APIPutRuleJSONRequestBody = Rule

// APIPostTaskJSONRequestBody defines body for APIPostTask for application/json ContentType.
type APIPostTaskJSONRequestBody = Task

// APIDeleteStructMigrateJSONRequestBody defines body for APIDeleteStructMigrate for application/json ContentType.
type APIDeleteStructMigrateJSONRequestBody = RequestDeleteParam

// APIListStructMigrateJSONRequestBody defines body for APIListStructMigrate for application/json ContentType.
type APIListStructMigrateJSONRequestBody = RequestPostParam

// APIPutStructMigrateJSONRequestBody defines body for APIPutStructMigrate for application/json ContentType.
type APIPutStructMigrateJSONRequestBody = StructMigrateTask

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jf6fpv8FAAD//3rsog/jMQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
