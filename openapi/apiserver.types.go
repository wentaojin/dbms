// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssessMigrateParam defines model for AssessMigrateParam.
type AssessMigrateParam struct {
	CallTimeout    *uint64 `json:"callTimeout,omitempty"`
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	SchemaNameS    *string `json:"schemaNameS,omitempty"`
}

// AssessMigrateTask defines model for AssessMigrateTask.
type AssessMigrateTask struct {
	AssessMigrateParam *AssessMigrateParam `json:"assessMigrateParam,omitempty"`
	Comment            *string             `json:"comment"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// CaseFieldRule defines model for CaseFieldRule.
type CaseFieldRule struct {
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT *string `json:"caseFieldRuleT,omitempty"`
}

// CdcConsumeParam defines model for CdcConsumeParam.
type CdcConsumeParam struct {
	CallTimeout           *uint64   `json:"callTimeout,omitempty"`
	EnableCheckpoint      *bool     `json:"enableCheckpoint,omitempty"`
	EnableVirtualColumn   *bool     `json:"enableVirtualColumn,omitempty"`
	IdleResolvedThreshold *uint64   `json:"idleResolvedThreshold,omitempty"`
	MessageCompression    *string   `json:"messageCompression,omitempty"`
	ServerAddress         *[]string `json:"serverAddress,omitempty"`
	SubscribeTopic        *string   `json:"subscribeTopic,omitempty"`
	TableThread           *uint64   `json:"tableThread,omitempty"`
}

// CdcConsumeTask defines model for CdcConsumeTask.
type CdcConsumeTask struct {
	CaseFieldRule   *CaseFieldRule   `json:"caseFieldRule,omitempty"`
	CdcConsumeParam *CdcConsumeParam `json:"cdcConsumeParam,omitempty"`
	Comment         *string          `json:"comment"`
	DatasourceNameS *string          `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string          `json:"datasourceNameT,omitempty"`
	SchemaRouteRule *SchemaRouteRule `json:"schemaRouteRule,omitempty"`
	TaskName        *string          `json:"taskName,omitempty"`
}

// ColumnStructRule defines model for ColumnStructRule.
type ColumnStructRule struct {
	ColumnNameS   *string `json:"columnNameS,omitempty"`
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// CsvMigrateParam defines model for CsvMigrateParam.
type CsvMigrateParam struct {
	BatchSize            *uint64            `json:"batchSize,omitempty"`
	CallTimeout          *uint64            `json:"callTimeout,omitempty"`
	ChunkSize            *uint64            `json:"chunkSize,omitempty"`
	CsvImportParams      *map[string]string `json:"csvImportParams"`
	DataCharsetT         *string            `json:"dataCharsetT,omitempty"`
	Delimiter            *string            `json:"delimiter,omitempty"`
	DiskUsageFactor      *string            `json:"diskUsageFactor,omitempty"`
	EnableCheckpoint     *bool              `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool              `json:"enableConsistentRead,omitempty"`
	EnableImportFeature  *bool              `json:"enableImportFeature,omitempty"`
	EscapeBackslash      *bool              `json:"escapeBackslash,omitempty"`
	Header               *bool              `json:"header,omitempty"`
	NullValue            *string            `json:"nullValue,omitempty"`
	OutputDir            *string            `json:"outputDir,omitempty"`
	Separator            *string            `json:"separator,omitempty"`
	SqlHintS             *string            `json:"sqlHintS,omitempty"`
	SqlThreadS           *uint64            `json:"sqlThreadS,omitempty"`
	TableThread          *uint64            `json:"tableThread,omitempty"`
	Terminator           *string            `json:"terminator,omitempty"`
	WriteThread          *uint64            `json:"writeThread,omitempty"`
}

// CsvMigrateTask defines model for CsvMigrateTask.
type CsvMigrateTask struct {
	CaseFieldRule    *CaseFieldRule     `json:"caseFieldRule,omitempty"`
	Comment          *string            `json:"comment"`
	CsvMigrateParam  *CsvMigrateParam   `json:"csvMigrateParam,omitempty"`
	DataMigrateRules *[]DataMigrateRule `json:"dataMigrateRules"`
	DatasourceNameS  *string            `json:"datasourceNameS,omitempty"`
	DatasourceNameT  *string            `json:"datasourceNameT,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `json:"schemaRouteRule,omitempty"`
	TaskName         *string            `json:"taskName,omitempty"`
}

// DataCompareParam defines model for DataCompareParam.
type DataCompareParam struct {
	BatchSize              *uint64   `json:"batchSize,omitempty"`
	CallTimeout            *uint64   `json:"callTimeout,omitempty"`
	ChunkSize              *uint64   `json:"chunkSize,omitempty"`
	ConsistentReadPointS   *string   `json:"consistentReadPointS,omitempty"`
	ConsistentReadPointT   *string   `json:"consistentReadPointT,omitempty"`
	DisableMd5Checksum     *bool     `json:"disableMd5Checksum,omitempty"`
	EnableCheckpoint       *bool     `json:"enableCheckpoint,omitempty"`
	EnableCollationSetting *bool     `json:"enableCollationSetting,omitempty"`
	EnableConsistentRead   *bool     `json:"enableConsistentRead,omitempty"`
	IgnoreConditionFields  *[]string `json:"ignoreConditionFields,omitempty"`
	OnlyCompareRow         *bool     `json:"onlyCompareRow,omitempty"`
	RepairStmtFlow         *string   `json:"repairStmtFlow,omitempty"`
	Separator              *string   `json:"separator,omitempty"`
	SqlHintS               *string   `json:"sqlHintS,omitempty"`
	SqlHintT               *string   `json:"sqlHintT,omitempty"`
	SqlThread              *uint64   `json:"sqlThread,omitempty"`
	TableThread            *uint64   `json:"tableThread,omitempty"`
	WriteThread            *uint64   `json:"writeThread,omitempty"`
}

// DataCompareRule defines model for DataCompareRule.
type DataCompareRule struct {
	CompareConditionField  *string   `json:"compareConditionField,omitempty"`
	CompareConditionRangeS *string   `json:"compareConditionRangeS,omitempty"`
	CompareConditionRangeT *string   `json:"compareConditionRangeT,omitempty"`
	IgnoreConditionFields  *[]string `json:"ignoreConditionFields,omitempty"`
	IgnoreSelectFields     *[]string `json:"ignoreSelectFields,omitempty"`
	SqlHintS               *string   `json:"sqlHintS,omitempty"`
	SqlHintT               *string   `json:"sqlHintT,omitempty"`
	TableNameS             *string   `json:"tableNameS,omitempty"`
}

// DataCompareTask defines model for DataCompareTask.
type DataCompareTask struct {
	CaseFieldRule    *CaseFieldRule     `json:"caseFieldRule,omitempty"`
	Comment          *string            `json:"comment"`
	DataCompareParam *DataCompareParam  `json:"dataCompareParam,omitempty"`
	DataCompareRules *[]DataCompareRule `json:"dataCompareRules"`
	DatasourceNameS  *string            `json:"datasourceNameS,omitempty"`
	DatasourceNameT  *string            `json:"datasourceNameT,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `json:"schemaRouteRule,omitempty"`
	TaskName         *string            `json:"taskName,omitempty"`
}

// DataMigrateRule defines model for DataMigrateRule.
type DataMigrateRule struct {
	EnableChunkStrategy *bool   `json:"enableChunkStrategy,omitempty"`
	SqlHintS            *string `json:"sqlHintS,omitempty"`
	TableNameS          *string `json:"tableNameS,omitempty"`
	WhereRange          *string `json:"whereRange,omitempty"`
}

// DataScanParam defines model for DataScanParam.
type DataScanParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	TableSamplerateS     *uint64 `json:"tableSamplerateS,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
	WriteThread          *uint64 `json:"writeThread,omitempty"`
}

// DataScanRule defines model for DataScanRule.
type DataScanRule struct {
	SqlHintS         *string `json:"sqlHintS,omitempty"`
	TableNameS       *string `json:"tableNameS,omitempty"`
	TableSamplerateS *uint64 `json:"tableSamplerateS,omitempty"`
}

// DataScanTask defines model for DataScanTask.
type DataScanTask struct {
	CaseFieldRule   *CaseFieldRule   `json:"caseFieldRule,omitempty"`
	Comment         *string          `json:"comment"`
	DataScanParam   *DataScanParam   `json:"dataScanParam,omitempty"`
	DataScanRules   *[]DataScanRule  `json:"dataScanRules"`
	DatasourceNameS *string          `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string          `json:"datasourceNameT,omitempty"`
	SchemaRouteRule *SchemaRouteRule `json:"schemaRouteRule,omitempty"`
	TaskName        *string          `json:"taskName,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Host          *string `json:"host,omitempty"`
	InitThread    *uint64 `json:"initThread,omitempty"`
	Password      *string `json:"password,omitempty"`
	Port          *uint64 `json:"port,omitempty"`
	Schema        *string `json:"schema,omitempty"`
	SlowThreshold *uint64 `json:"slowThreshold,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Comment        *string `json:"comment"`
	ConnectCharset *string `json:"connectCharset,omitempty"`
	ConnectParams  *string `json:"connectParams"`
	ConnectStatus  *string `json:"connectStatus"`
	DatasourceName *string `json:"datasourceName,omitempty"`
	DbName         *string `json:"dbName"`
	DbType         *string `json:"dbType,omitempty"`
	Host           *string `json:"host,omitempty"`
	Password       *string `json:"password,omitempty"`
	PdbName        *string `json:"pdbName"`
	Port           *uint64 `json:"port,omitempty"`
	ServiceName    *string `json:"serviceName"`
	SessionParams  *string `json:"sessionParams"`
	Username       *string `json:"username,omitempty"`
}

// NewDatasource defines model for NewDatasource.
type NewDatasource struct {
	Datasource *[]Datasource `json:"datasource,omitempty"`
}

// RequestDeleteParam defines model for RequestDeleteParam.
type RequestDeleteParam struct {
	Param *[]string `json:"param,omitempty"`
}

// RequestPostParam defines model for RequestPostParam.
type RequestPostParam struct {
	Page     *uint64 `json:"page,omitempty"`
	PageSize *uint64 `json:"pageSize,omitempty"`
	Param    *string `json:"param,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code  uint64 `json:"code"`
	Data  string `json:"data"`
	Error string `json:"error"`
}

// SchemaRouteRule defines model for SchemaRouteRule.
type SchemaRouteRule struct {
	ExcludeSequenceS *[]string         `json:"excludeSequenceS"`
	ExcludeTableS    *[]string         `json:"excludeTableS"`
	IncludeSequenceS *[]string         `json:"includeSequenceS"`
	IncludeTableS    *[]string         `json:"includeTableS"`
	SchemaNameS      *string           `json:"schemaNameS,omitempty"`
	SchemaNameT      *string           `json:"schemaNameT,omitempty"`
	TableRouteRules  *[]TableRouteRule `json:"tableRouteRules"`
}

// SchemaStructRule defines model for SchemaStructRule.
type SchemaStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
}

// SqlMigrateParam defines model for SqlMigrateParam.
type SqlMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	EnablePrepareStmt    *bool   `json:"enablePrepareStmt,omitempty"`
	EnableSafeMode       *bool   `json:"enableSafeMode,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
	WriteThread          *uint64 `json:"writeThread,omitempty"`
}

// SqlMigrateRule defines model for SqlMigrateRule.
type SqlMigrateRule struct {
	CaseFieldRuleT   *string            `json:"caseFieldRuleT,omitempty"`
	ColumnRouteRules *map[string]string `json:"columnRouteRules"`
	SchemaNameT      *string            `json:"schemaNameT,omitempty"`
	SqlHintT         *string            `json:"sqlHintT,omitempty"`
	SqlQueryS        *string            `json:"sqlQueryS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// SqlMigrateTask defines model for SqlMigrateTask.
type SqlMigrateTask struct {
	CaseFieldRule   *CaseFieldRule    `json:"caseFieldRule,omitempty"`
	Comment         *string           `json:"comment"`
	DatasourceNameS *string           `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string           `json:"datasourceNameT,omitempty"`
	SqlMigrateParam *SqlMigrateParam  `json:"sqlMigrateParam,omitempty"`
	SqlMigrateRules *[]SqlMigrateRule `json:"sqlMigrateRules"`
	TaskName        *string           `json:"taskName,omitempty"`
}

// StatementMigrateParam defines model for StatementMigrateParam.
type StatementMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	EnablePrepareStmt    *bool   `json:"enablePrepareStmt,omitempty"`
	EnableSafeMode       *bool   `json:"enableSafeMode,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
	WriteThread          *uint64 `json:"writeThread,omitempty"`
}

// StmtMigrateTask defines model for StmtMigrateTask.
type StmtMigrateTask struct {
	DataMigrateRules      *[]DataMigrateRule     `json:"DataMigrateRules"`
	CaseFieldRule         *CaseFieldRule         `json:"caseFieldRule,omitempty"`
	Comment               *string                `json:"comment"`
	DatasourceNameS       *string                `json:"datasourceNameS,omitempty"`
	DatasourceNameT       *string                `json:"datasourceNameT,omitempty"`
	SchemaRouteRule       *SchemaRouteRule       `json:"schemaRouteRule,omitempty"`
	StatementMigrateParam *StatementMigrateParam `json:"statementMigrateParam,omitempty"`
	TaskName              *string                `json:"taskName,omitempty"`
}

// StructCompareParam defines model for StructCompareParam.
type StructCompareParam struct {
	CallTimeout       *uint64 `json:"callTimeout,omitempty"`
	CompareThread     *uint64 `json:"compareThread,omitempty"`
	EnableCheckpoint  *bool   `json:"enableCheckpoint,omitempty"`
	IgnoreCaseCompare *bool   `json:"ignoreCaseCompare,omitempty"`
}

// StructCompareRule defines model for StructCompareRule.
type StructCompareRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules"`
}

// StructCompareTask defines model for StructCompareTask.
type StructCompareTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `json:"schemaRouteRule,omitempty"`
	StructCompareParam *StructCompareParam `json:"structCompareParam,omitempty"`
	StructCompareRule  *StructCompareRule  `json:"structCompareRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// StructMigrateParam defines model for StructMigrateParam.
type StructMigrateParam struct {
	CallTimeout        *uint64 `json:"callTimeout,omitempty"`
	CreateIfNotExist   *bool   `json:"createIfNotExist,omitempty"`
	EnableCheckpoint   *bool   `json:"enableCheckpoint,omitempty"`
	EnableDirectCreate *bool   `json:"enableDirectCreate,omitempty"`
	MigrateThread      *uint64 `json:"migrateThread,omitempty"`
}

// StructMigrateRule defines model for StructMigrateRule.
type StructMigrateRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules"`
	TableAttrsRules   *[]TableAttrsRule   `json:"tableAttrsRules"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules"`
}

// StructMigrateTask defines model for StructMigrateTask.
type StructMigrateTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `json:"schemaRouteRule,omitempty"`
	StructMigrateParam *StructMigrateParam `json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `json:"structMigrateRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// TableAttrsRule defines model for TableAttrsRule.
type TableAttrsRule struct {
	SchemaNameS *string   `json:"schemaNameS,omitempty"`
	TableAttrsT *string   `json:"tableAttrsT"`
	TableNamesS *[]string `json:"tableNamesS"`
}

// TableRouteRule defines model for TableRouteRule.
type TableRouteRule struct {
	ColumnRouteRules *map[string]string `json:"columnRouteRules"`
	TableNameS       *string            `json:"tableNameS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// TableStructRule defines model for TableStructRule.
type TableStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Express  *string `json:"express,omitempty"`
	HostIP   *string `json:"hostIP"`
	Operate  *string `json:"operate,omitempty"`
	TaskName *string `json:"taskName,omitempty"`
}

// TaskStructRule defines model for TaskStructRule.
type TaskStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
}

// APIPutDatabaseJSONRequestBody defines body for APIPutDatabase for application/json ContentType.
type APIPutDatabaseJSONRequestBody = Database

// APIDeleteDatasourceJSONRequestBody defines body for APIDeleteDatasource for application/json ContentType.
type APIDeleteDatasourceJSONRequestBody = RequestDeleteParam

// APIListDatasourceJSONRequestBody defines body for APIListDatasource for application/json ContentType.
type APIListDatasourceJSONRequestBody = RequestPostParam

// APIPutDatasourceJSONRequestBody defines body for APIPutDatasource for application/json ContentType.
type APIPutDatasourceJSONRequestBody = NewDatasource

// APIPostTaskJSONRequestBody defines body for APIPostTask for application/json ContentType.
type APIPostTaskJSONRequestBody = Task

// APIDeleteAssessMigrateJSONRequestBody defines body for APIDeleteAssessMigrate for application/json ContentType.
type APIDeleteAssessMigrateJSONRequestBody = RequestDeleteParam

// APIListAssessMigrateJSONRequestBody defines body for APIListAssessMigrate for application/json ContentType.
type APIListAssessMigrateJSONRequestBody = RequestPostParam

// APIPutAssessMigrateJSONRequestBody defines body for APIPutAssessMigrate for application/json ContentType.
type APIPutAssessMigrateJSONRequestBody = AssessMigrateTask

// APIDeleteCdcConsumeJSONRequestBody defines body for APIDeleteCdcConsume for application/json ContentType.
type APIDeleteCdcConsumeJSONRequestBody = RequestDeleteParam

// APIListCdcConsumeJSONRequestBody defines body for APIListCdcConsume for application/json ContentType.
type APIListCdcConsumeJSONRequestBody = RequestPostParam

// APIPutCdcConsumeJSONRequestBody defines body for APIPutCdcConsume for application/json ContentType.
type APIPutCdcConsumeJSONRequestBody = CdcConsumeTask

// APIDeleteCsvMigrateJSONRequestBody defines body for APIDeleteCsvMigrate for application/json ContentType.
type APIDeleteCsvMigrateJSONRequestBody = RequestDeleteParam

// APIListCsvMigrateJSONRequestBody defines body for APIListCsvMigrate for application/json ContentType.
type APIListCsvMigrateJSONRequestBody = RequestPostParam

// APIPutCsvMigrateJSONRequestBody defines body for APIPutCsvMigrate for application/json ContentType.
type APIPutCsvMigrateJSONRequestBody = CsvMigrateTask

// APIDeleteDataCompareJSONRequestBody defines body for APIDeleteDataCompare for application/json ContentType.
type APIDeleteDataCompareJSONRequestBody = RequestDeleteParam

// APIListDataCompareJSONRequestBody defines body for APIListDataCompare for application/json ContentType.
type APIListDataCompareJSONRequestBody = RequestPostParam

// APIPutDataCompareJSONRequestBody defines body for APIPutDataCompare for application/json ContentType.
type APIPutDataCompareJSONRequestBody = DataCompareTask

// APIDeleteDataScanJSONRequestBody defines body for APIDeleteDataScan for application/json ContentType.
type APIDeleteDataScanJSONRequestBody = RequestDeleteParam

// APIListDataScanJSONRequestBody defines body for APIListDataScan for application/json ContentType.
type APIListDataScanJSONRequestBody = RequestPostParam

// APIPutDataScanJSONRequestBody defines body for APIPutDataScan for application/json ContentType.
type APIPutDataScanJSONRequestBody = DataScanTask

// APIDeleteSqlMigrateJSONRequestBody defines body for APIDeleteSqlMigrate for application/json ContentType.
type APIDeleteSqlMigrateJSONRequestBody = RequestDeleteParam

// APIListSqlMigrateJSONRequestBody defines body for APIListSqlMigrate for application/json ContentType.
type APIListSqlMigrateJSONRequestBody = RequestPostParam

// APIPutSqlMigrateJSONRequestBody defines body for APIPutSqlMigrate for application/json ContentType.
type APIPutSqlMigrateJSONRequestBody = SqlMigrateTask

// APIDeleteStmtMigrateJSONRequestBody defines body for APIDeleteStmtMigrate for application/json ContentType.
type APIDeleteStmtMigrateJSONRequestBody = RequestDeleteParam

// APIListStmtMigrateJSONRequestBody defines body for APIListStmtMigrate for application/json ContentType.
type APIListStmtMigrateJSONRequestBody = RequestPostParam

// APIPutStmtMigrateJSONRequestBody defines body for APIPutStmtMigrate for application/json ContentType.
type APIPutStmtMigrateJSONRequestBody = StmtMigrateTask

// APIDeleteStructCompareJSONRequestBody defines body for APIDeleteStructCompare for application/json ContentType.
type APIDeleteStructCompareJSONRequestBody = RequestDeleteParam

// APIListStructCompareJSONRequestBody defines body for APIListStructCompare for application/json ContentType.
type APIListStructCompareJSONRequestBody = RequestPostParam

// APIPutStructCompareJSONRequestBody defines body for APIPutStructCompare for application/json ContentType.
type APIPutStructCompareJSONRequestBody = StructCompareTask

// APIDeleteStructMigrateJSONRequestBody defines body for APIDeleteStructMigrate for application/json ContentType.
type APIDeleteStructMigrateJSONRequestBody = RequestDeleteParam

// APIListStructMigrateJSONRequestBody defines body for APIListStructMigrate for application/json ContentType.
type APIListStructMigrateJSONRequestBody = RequestPostParam

// APIPutStructMigrateJSONRequestBody defines body for APIPutStructMigrate for application/json ContentType.
type APIPutStructMigrateJSONRequestBody = StructMigrateTask

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
