// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// AssessMigrateParam defines model for AssessMigrateParam.
type AssessMigrateParam struct {
	CallTimeout    *uint64 `json:"callTimeout,omitempty"`
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	SchemaNameS    *string `json:"schemaNameS,omitempty"`
}

// AssessMigrateTask defines model for AssessMigrateTask.
type AssessMigrateTask struct {
	AssessMigrateParam *AssessMigrateParam `json:"assessMigrateParam,omitempty"`
	Comment            *string             `json:"comment"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// CaseFieldRule defines model for CaseFieldRule.
type CaseFieldRule struct {
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT *string `json:"caseFieldRuleT,omitempty"`
}

// CdcConsumeParam defines model for CdcConsumeParam.
type CdcConsumeParam struct {
	CallTimeout           *uint64   `json:"callTimeout,omitempty"`
	EnableCheckpoint      *bool     `json:"enableCheckpoint,omitempty"`
	IdleResolvedThreshold *uint64   `json:"idleResolvedThreshold,omitempty"`
	MessageCompression    *string   `json:"messageCompression,omitempty"`
	ServerAddress         *[]string `json:"serverAddress,omitempty"`
	SubscribeTopic        *string   `json:"subscribeTopic,omitempty"`
	TableThread           *uint64   `json:"tableThread,omitempty"`
}

// CdcConsumeTask defines model for CdcConsumeTask.
type CdcConsumeTask struct {
	CaseFieldRule   *CaseFieldRule   `json:"caseFieldRule,omitempty"`
	CdcConsumeParam *CdcConsumeParam `json:"cdcConsumeParam,omitempty"`
	Comment         *string          `json:"comment"`
	DatasourceNameS *string          `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string          `json:"datasourceNameT,omitempty"`
	SchemaRouteRule *SchemaRouteRule `json:"schemaRouteRule,omitempty"`
	TaskName        *string          `json:"taskName,omitempty"`
}

// ColumnStructRule defines model for ColumnStructRule.
type ColumnStructRule struct {
	ColumnNameS   *string `json:"columnNameS,omitempty"`
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// CsvMigrateParam defines model for CsvMigrateParam.
type CsvMigrateParam struct {
	BatchSize            *uint64            `json:"batchSize,omitempty"`
	CallTimeout          *uint64            `json:"callTimeout,omitempty"`
	ChunkSize            *uint64            `json:"chunkSize,omitempty"`
	CsvImportParams      *map[string]string `json:"csvImportParams"`
	DataCharsetT         *string            `json:"dataCharsetT,omitempty"`
	Delimiter            *string            `json:"delimiter,omitempty"`
	DiskUsageFactor      *string            `json:"diskUsageFactor,omitempty"`
	EnableCheckpoint     *bool              `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool              `json:"enableConsistentRead,omitempty"`
	EnableImportFeature  *bool              `json:"enableImportFeature,omitempty"`
	EscapeBackslash      *bool              `json:"escapeBackslash,omitempty"`
	Header               *bool              `json:"header,omitempty"`
	NullValue            *string            `json:"nullValue,omitempty"`
	OutputDir            *string            `json:"outputDir,omitempty"`
	Separator            *string            `json:"separator,omitempty"`
	SqlHintS             *string            `json:"sqlHintS,omitempty"`
	SqlThreadS           *uint64            `json:"sqlThreadS,omitempty"`
	TableThread          *uint64            `json:"tableThread,omitempty"`
	Terminator           *string            `json:"terminator,omitempty"`
	WriteThread          *uint64            `json:"writeThread,omitempty"`
}

// CsvMigrateTask defines model for CsvMigrateTask.
type CsvMigrateTask struct {
	CaseFieldRule    *CaseFieldRule     `json:"caseFieldRule,omitempty"`
	Comment          *string            `json:"comment"`
	CsvMigrateParam  *CsvMigrateParam   `json:"csvMigrateParam,omitempty"`
	DataMigrateRules *[]DataMigrateRule `json:"dataMigrateRules"`
	DatasourceNameS  *string            `json:"datasourceNameS,omitempty"`
	DatasourceNameT  *string            `json:"datasourceNameT,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `json:"schemaRouteRule,omitempty"`
	TaskName         *string            `json:"taskName,omitempty"`
}

// DataCompareParam defines model for DataCompareParam.
type DataCompareParam struct {
	BatchSize              *uint64   `json:"batchSize,omitempty"`
	CallTimeout            *uint64   `json:"callTimeout,omitempty"`
	ChunkSize              *uint64   `json:"chunkSize,omitempty"`
	ConsistentReadPointS   *string   `json:"consistentReadPointS,omitempty"`
	ConsistentReadPointT   *string   `json:"consistentReadPointT,omitempty"`
	DisableMd5Checksum     *bool     `json:"disableMd5Checksum,omitempty"`
	EnableCheckpoint       *bool     `json:"enableCheckpoint,omitempty"`
	EnableCollationSetting *bool     `json:"enableCollationSetting,omitempty"`
	EnableConsistentRead   *bool     `json:"enableConsistentRead,omitempty"`
	IgnoreConditionFields  *[]string `json:"ignoreConditionFields,omitempty"`
	OnlyCompareRow         *bool     `json:"onlyCompareRow,omitempty"`
	RepairStmtFlow         *string   `json:"repairStmtFlow,omitempty"`
	Separator              *string   `json:"separator,omitempty"`
	SqlHintS               *string   `json:"sqlHintS,omitempty"`
	SqlHintT               *string   `json:"sqlHintT,omitempty"`
	SqlThread              *uint64   `json:"sqlThread,omitempty"`
	TableThread            *uint64   `json:"tableThread,omitempty"`
	WriteThread            *uint64   `json:"writeThread,omitempty"`
}

// DataCompareRule defines model for DataCompareRule.
type DataCompareRule struct {
	CompareConditionField  *string   `json:"compareConditionField,omitempty"`
	CompareConditionRangeS *string   `json:"compareConditionRangeS,omitempty"`
	CompareConditionRangeT *string   `json:"compareConditionRangeT,omitempty"`
	IgnoreConditionFields  *[]string `json:"ignoreConditionFields,omitempty"`
	IgnoreSelectFields     *[]string `json:"ignoreSelectFields,omitempty"`
	SqlHintS               *string   `json:"sqlHintS,omitempty"`
	SqlHintT               *string   `json:"sqlHintT,omitempty"`
	TableNameS             *string   `json:"tableNameS,omitempty"`
}

// DataCompareTask defines model for DataCompareTask.
type DataCompareTask struct {
	CaseFieldRule    *CaseFieldRule     `json:"caseFieldRule,omitempty"`
	Comment          *string            `json:"comment"`
	DataCompareParam *DataCompareParam  `json:"dataCompareParam,omitempty"`
	DataCompareRules *[]DataCompareRule `json:"dataCompareRules"`
	DatasourceNameS  *string            `json:"datasourceNameS,omitempty"`
	DatasourceNameT  *string            `json:"datasourceNameT,omitempty"`
	SchemaRouteRule  *SchemaRouteRule   `json:"schemaRouteRule,omitempty"`
	TaskName         *string            `json:"taskName,omitempty"`
}

// DataMigrateRule defines model for DataMigrateRule.
type DataMigrateRule struct {
	EnableChunkStrategy *bool   `json:"enableChunkStrategy,omitempty"`
	SqlHintS            *string `json:"sqlHintS,omitempty"`
	TableNameS          *string `json:"tableNameS,omitempty"`
	WhereRange          *string `json:"whereRange,omitempty"`
}

// DataScanParam defines model for DataScanParam.
type DataScanParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	TableSamplerateS     *uint64 `json:"tableSamplerateS,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
	WriteThread          *uint64 `json:"writeThread,omitempty"`
}

// DataScanRule defines model for DataScanRule.
type DataScanRule struct {
	SqlHintS         *string `json:"sqlHintS,omitempty"`
	TableNameS       *string `json:"tableNameS,omitempty"`
	TableSamplerateS *uint64 `json:"tableSamplerateS,omitempty"`
}

// DataScanTask defines model for DataScanTask.
type DataScanTask struct {
	CaseFieldRule   *CaseFieldRule   `json:"caseFieldRule,omitempty"`
	Comment         *string          `json:"comment"`
	DataScanParam   *DataScanParam   `json:"dataScanParam,omitempty"`
	DataScanRules   *[]DataScanRule  `json:"dataScanRules"`
	DatasourceNameS *string          `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string          `json:"datasourceNameT,omitempty"`
	SchemaRouteRule *SchemaRouteRule `json:"schemaRouteRule,omitempty"`
	TaskName        *string          `json:"taskName,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Host          *string `json:"host,omitempty"`
	InitThread    *uint64 `json:"initThread,omitempty"`
	Password      *string `json:"password,omitempty"`
	Port          *uint64 `json:"port,omitempty"`
	Schema        *string `json:"schema,omitempty"`
	SlowThreshold *uint64 `json:"slowThreshold,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Comment        *string `json:"comment"`
	ConnectCharset *string `json:"connectCharset,omitempty"`
	ConnectParams  *string `json:"connectParams"`
	ConnectStatus  *string `json:"connectStatus"`
	DatasourceName *string `json:"datasourceName,omitempty"`
	DbName         *string `json:"dbName"`
	DbType         *string `json:"dbType,omitempty"`
	Host           *string `json:"host,omitempty"`
	Password       *string `json:"password,omitempty"`
	PdbName        *string `json:"pdbName"`
	Port           *uint64 `json:"port,omitempty"`
	ServiceName    *string `json:"serviceName"`
	SessionParams  *string `json:"sessionParams"`
	Username       *string `json:"username,omitempty"`
}

// NewDatasource defines model for NewDatasource.
type NewDatasource struct {
	Datasource *[]Datasource `json:"datasource,omitempty"`
}

// RequestDeleteParam defines model for RequestDeleteParam.
type RequestDeleteParam struct {
	Param *[]string `json:"param,omitempty"`
}

// RequestPostParam defines model for RequestPostParam.
type RequestPostParam struct {
	Page     *uint64 `json:"page,omitempty"`
	PageSize *uint64 `json:"pageSize,omitempty"`
	Param    *string `json:"param,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code  uint64 `json:"code"`
	Data  string `json:"data"`
	Error string `json:"error"`
}

// SchemaRouteRule defines model for SchemaRouteRule.
type SchemaRouteRule struct {
	ExcludeSequenceS *[]string         `json:"excludeSequenceS"`
	ExcludeTableS    *[]string         `json:"excludeTableS"`
	IncludeSequenceS *[]string         `json:"includeSequenceS"`
	IncludeTableS    *[]string         `json:"includeTableS"`
	SchemaNameS      *string           `json:"schemaNameS,omitempty"`
	SchemaNameT      *string           `json:"schemaNameT,omitempty"`
	TableRouteRules  *[]TableRouteRule `json:"tableRouteRules"`
}

// SchemaStructRule defines model for SchemaStructRule.
type SchemaStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
}

// SqlMigrateParam defines model for SqlMigrateParam.
type SqlMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	EnablePrepareStmt    *bool   `json:"enablePrepareStmt,omitempty"`
	EnableSafeMode       *bool   `json:"enableSafeMode,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
	WriteThread          *uint64 `json:"writeThread,omitempty"`
}

// SqlMigrateRule defines model for SqlMigrateRule.
type SqlMigrateRule struct {
	CaseFieldRuleT   *string            `json:"caseFieldRuleT,omitempty"`
	ColumnRouteRules *map[string]string `json:"columnRouteRules"`
	SchemaNameT      *string            `json:"schemaNameT,omitempty"`
	SqlHintT         *string            `json:"sqlHintT,omitempty"`
	SqlQueryS        *string            `json:"sqlQueryS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// SqlMigrateTask defines model for SqlMigrateTask.
type SqlMigrateTask struct {
	CaseFieldRule   *CaseFieldRule    `json:"caseFieldRule,omitempty"`
	Comment         *string           `json:"comment"`
	DatasourceNameS *string           `json:"datasourceNameS,omitempty"`
	DatasourceNameT *string           `json:"datasourceNameT,omitempty"`
	SqlMigrateParam *SqlMigrateParam  `json:"sqlMigrateParam,omitempty"`
	SqlMigrateRules *[]SqlMigrateRule `json:"sqlMigrateRules"`
	TaskName        *string           `json:"taskName,omitempty"`
}

// StatementMigrateParam defines model for StatementMigrateParam.
type StatementMigrateParam struct {
	BatchSize            *uint64 `json:"batchSize,omitempty"`
	CallTimeout          *uint64 `json:"callTimeout,omitempty"`
	ChunkSize            *uint64 `json:"chunkSize,omitempty"`
	EnableCheckpoint     *bool   `json:"enableCheckpoint,omitempty"`
	EnableConsistentRead *bool   `json:"enableConsistentRead,omitempty"`
	EnablePrepareStmt    *bool   `json:"enablePrepareStmt,omitempty"`
	EnableSafeMode       *bool   `json:"enableSafeMode,omitempty"`
	SqlHintS             *string `json:"sqlHintS,omitempty"`
	SqlHintT             *string `json:"sqlHintT,omitempty"`
	SqlThreadS           *uint64 `json:"sqlThreadS,omitempty"`
	SqlThreadT           *uint64 `json:"sqlThreadT,omitempty"`
	TableThread          *uint64 `json:"tableThread,omitempty"`
	WriteThread          *uint64 `json:"writeThread,omitempty"`
}

// StmtMigrateTask defines model for StmtMigrateTask.
type StmtMigrateTask struct {
	DataMigrateRules      *[]DataMigrateRule     `json:"DataMigrateRules"`
	CaseFieldRule         *CaseFieldRule         `json:"caseFieldRule,omitempty"`
	Comment               *string                `json:"comment"`
	DatasourceNameS       *string                `json:"datasourceNameS,omitempty"`
	DatasourceNameT       *string                `json:"datasourceNameT,omitempty"`
	SchemaRouteRule       *SchemaRouteRule       `json:"schemaRouteRule,omitempty"`
	StatementMigrateParam *StatementMigrateParam `json:"statementMigrateParam,omitempty"`
	TaskName              *string                `json:"taskName,omitempty"`
}

// StructCompareParam defines model for StructCompareParam.
type StructCompareParam struct {
	CallTimeout       *uint64 `json:"callTimeout,omitempty"`
	CompareThread     *uint64 `json:"compareThread,omitempty"`
	EnableCheckpoint  *bool   `json:"enableCheckpoint,omitempty"`
	IgnoreCaseCompare *bool   `json:"ignoreCaseCompare,omitempty"`
}

// StructCompareRule defines model for StructCompareRule.
type StructCompareRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules"`
}

// StructCompareTask defines model for StructCompareTask.
type StructCompareTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `json:"schemaRouteRule,omitempty"`
	StructCompareParam *StructCompareParam `json:"structCompareParam,omitempty"`
	StructCompareRule  *StructCompareRule  `json:"structCompareRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// StructMigrateParam defines model for StructMigrateParam.
type StructMigrateParam struct {
	CallTimeout        *uint64 `json:"callTimeout,omitempty"`
	CreateIfNotExist   *bool   `json:"createIfNotExist,omitempty"`
	EnableCheckpoint   *bool   `json:"enableCheckpoint,omitempty"`
	EnableDirectCreate *bool   `json:"enableDirectCreate,omitempty"`
	MigrateThread      *uint64 `json:"migrateThread,omitempty"`
}

// StructMigrateRule defines model for StructMigrateRule.
type StructMigrateRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules"`
	TableAttrsRules   *[]TableAttrsRule   `json:"tableAttrsRules"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules"`
}

// StructMigrateTask defines model for StructMigrateTask.
type StructMigrateTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRule    *SchemaRouteRule    `json:"schemaRouteRule,omitempty"`
	StructMigrateParam *StructMigrateParam `json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `json:"structMigrateRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// TableAttrsRule defines model for TableAttrsRule.
type TableAttrsRule struct {
	SchemaNameS *string   `json:"schemaNameS,omitempty"`
	TableAttrsT *string   `json:"tableAttrsT"`
	TableNamesS *[]string `json:"tableNamesS"`
}

// TableRouteRule defines model for TableRouteRule.
type TableRouteRule struct {
	ColumnRouteRules *map[string]string `json:"columnRouteRules"`
	TableNameS       *string            `json:"tableNameS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// TableStructRule defines model for TableStructRule.
type TableStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Express  *string `json:"express,omitempty"`
	HostIP   *string `json:"hostIP"`
	Operate  *string `json:"operate,omitempty"`
	TaskName *string `json:"taskName,omitempty"`
}

// TaskStructRule defines model for TaskStructRule.
type TaskStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS"`
	ColumnTypeT   *string `json:"columnTypeT"`
	DefaultValueS *string `json:"defaultValueS"`
	DefaultValueT *string `json:"defaultValueT"`
}

// APIPutDatabaseJSONRequestBody defines body for APIPutDatabase for application/json ContentType.
type APIPutDatabaseJSONRequestBody = Database

// APIDeleteDatasourceJSONRequestBody defines body for APIDeleteDatasource for application/json ContentType.
type APIDeleteDatasourceJSONRequestBody = RequestDeleteParam

// APIListDatasourceJSONRequestBody defines body for APIListDatasource for application/json ContentType.
type APIListDatasourceJSONRequestBody = RequestPostParam

// APIPutDatasourceJSONRequestBody defines body for APIPutDatasource for application/json ContentType.
type APIPutDatasourceJSONRequestBody = NewDatasource

// APIPostTaskJSONRequestBody defines body for APIPostTask for application/json ContentType.
type APIPostTaskJSONRequestBody = Task

// APIDeleteAssessMigrateJSONRequestBody defines body for APIDeleteAssessMigrate for application/json ContentType.
type APIDeleteAssessMigrateJSONRequestBody = RequestDeleteParam

// APIListAssessMigrateJSONRequestBody defines body for APIListAssessMigrate for application/json ContentType.
type APIListAssessMigrateJSONRequestBody = RequestPostParam

// APIPutAssessMigrateJSONRequestBody defines body for APIPutAssessMigrate for application/json ContentType.
type APIPutAssessMigrateJSONRequestBody = AssessMigrateTask

// APIDeleteCdcConsumeJSONRequestBody defines body for APIDeleteCdcConsume for application/json ContentType.
type APIDeleteCdcConsumeJSONRequestBody = RequestDeleteParam

// APIListCdcConsumeJSONRequestBody defines body for APIListCdcConsume for application/json ContentType.
type APIListCdcConsumeJSONRequestBody = RequestPostParam

// APIPutCdcConsumeJSONRequestBody defines body for APIPutCdcConsume for application/json ContentType.
type APIPutCdcConsumeJSONRequestBody = CdcConsumeTask

// APIDeleteCsvMigrateJSONRequestBody defines body for APIDeleteCsvMigrate for application/json ContentType.
type APIDeleteCsvMigrateJSONRequestBody = RequestDeleteParam

// APIListCsvMigrateJSONRequestBody defines body for APIListCsvMigrate for application/json ContentType.
type APIListCsvMigrateJSONRequestBody = RequestPostParam

// APIPutCsvMigrateJSONRequestBody defines body for APIPutCsvMigrate for application/json ContentType.
type APIPutCsvMigrateJSONRequestBody = CsvMigrateTask

// APIDeleteDataCompareJSONRequestBody defines body for APIDeleteDataCompare for application/json ContentType.
type APIDeleteDataCompareJSONRequestBody = RequestDeleteParam

// APIListDataCompareJSONRequestBody defines body for APIListDataCompare for application/json ContentType.
type APIListDataCompareJSONRequestBody = RequestPostParam

// APIPutDataCompareJSONRequestBody defines body for APIPutDataCompare for application/json ContentType.
type APIPutDataCompareJSONRequestBody = DataCompareTask

// APIDeleteDataScanJSONRequestBody defines body for APIDeleteDataScan for application/json ContentType.
type APIDeleteDataScanJSONRequestBody = RequestDeleteParam

// APIListDataScanJSONRequestBody defines body for APIListDataScan for application/json ContentType.
type APIListDataScanJSONRequestBody = RequestPostParam

// APIPutDataScanJSONRequestBody defines body for APIPutDataScan for application/json ContentType.
type APIPutDataScanJSONRequestBody = DataScanTask

// APIDeleteSqlMigrateJSONRequestBody defines body for APIDeleteSqlMigrate for application/json ContentType.
type APIDeleteSqlMigrateJSONRequestBody = RequestDeleteParam

// APIListSqlMigrateJSONRequestBody defines body for APIListSqlMigrate for application/json ContentType.
type APIListSqlMigrateJSONRequestBody = RequestPostParam

// APIPutSqlMigrateJSONRequestBody defines body for APIPutSqlMigrate for application/json ContentType.
type APIPutSqlMigrateJSONRequestBody = SqlMigrateTask

// APIDeleteStmtMigrateJSONRequestBody defines body for APIDeleteStmtMigrate for application/json ContentType.
type APIDeleteStmtMigrateJSONRequestBody = RequestDeleteParam

// APIListStmtMigrateJSONRequestBody defines body for APIListStmtMigrate for application/json ContentType.
type APIListStmtMigrateJSONRequestBody = RequestPostParam

// APIPutStmtMigrateJSONRequestBody defines body for APIPutStmtMigrate for application/json ContentType.
type APIPutStmtMigrateJSONRequestBody = StmtMigrateTask

// APIDeleteStructCompareJSONRequestBody defines body for APIDeleteStructCompare for application/json ContentType.
type APIDeleteStructCompareJSONRequestBody = RequestDeleteParam

// APIListStructCompareJSONRequestBody defines body for APIListStructCompare for application/json ContentType.
type APIListStructCompareJSONRequestBody = RequestPostParam

// APIPutStructCompareJSONRequestBody defines body for APIPutStructCompare for application/json ContentType.
type APIPutStructCompareJSONRequestBody = StructCompareTask

// APIDeleteStructMigrateJSONRequestBody defines body for APIDeleteStructMigrate for application/json ContentType.
type APIDeleteStructMigrateJSONRequestBody = RequestDeleteParam

// APIListStructMigrateJSONRequestBody defines body for APIListStructMigrate for application/json ContentType.
type APIListStructMigrateJSONRequestBody = RequestPostParam

// APIPutStructMigrateJSONRequestBody defines body for APIPutStructMigrate for application/json ContentType.
type APIPutStructMigrateJSONRequestBody = StructMigrateTask

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
