// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CaseFieldRule defines model for CaseFieldRule.
type CaseFieldRule struct {
	CaseFieldRuleS *string `json:"caseFieldRuleS,omitempty"`
	CaseFieldRuleT *string `json:"caseFieldRuleT,omitempty"`
}

// ColumnStructRule defines model for ColumnStructRule.
type ColumnStructRule struct {
	ColumnNameS   *string `json:"columnNameS,omitempty"`
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Host          *string `json:"host,omitempty"`
	Password      *string `json:"password,omitempty"`
	Port          *uint64 `json:"port,omitempty"`
	Schema        *string `json:"schema,omitempty"`
	SlowThreshold *uint64 `json:"slowThreshold,omitempty"`
	Username      *string `json:"username,omitempty"`
}

// Datasource defines model for Datasource.
type Datasource struct {
	Comment        *string `json:"comment,omitempty"`
	ConnectCharset *string `json:"connectCharset,omitempty"`
	ConnectParams  *string `json:"connectParams,omitempty"`
	ConnectStatus  *string `json:"connectStatus,omitempty"`
	DatasourceName *string `json:"datasourceName,omitempty"`
	DbType         *string `json:"dbType,omitempty"`
	Host           *string `json:"host,omitempty"`
	Password       *string `json:"password,omitempty"`
	PdbName        *string `json:"pdbName,omitempty"`
	Port           *uint64 `json:"port,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// NewDatasource defines model for NewDatasource.
type NewDatasource struct {
	Datasource *[]Datasource `json:"datasource,omitempty"`
}

// RequestDeleteParam defines model for RequestDeleteParam.
type RequestDeleteParam struct {
	Param *[]string `json:"param,omitempty"`
}

// RequestPostParam defines model for RequestPostParam.
type RequestPostParam struct {
	Page     *uint64 `json:"page,omitempty"`
	PageSize *uint64 `json:"pageSize,omitempty"`
	Param    *string `json:"param,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Code  uint64 `json:"code"`
	Data  string `json:"data"`
	Error string `json:"error"`
}

// SchemaRouteRule defines model for SchemaRouteRule.
type SchemaRouteRule struct {
	ExcludeTableS   *[]string         `json:"excludeTableS,omitempty"`
	IncludeTableS   *[]string         `json:"includeTableS,omitempty"`
	SchemaNameS     *string           `json:"schemaNameS,omitempty"`
	SchemaNameT     *string           `json:"schemaNameT,omitempty"`
	TableRouteRules *[]TableRouteRule `json:"tableRouteRules,omitempty"`
}

// SchemaStructRule defines model for SchemaStructRule.
type SchemaStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
}

// StructMigrateParam defines model for StructMigrateParam.
type StructMigrateParam struct {
	CreateIfNotExist *bool   `json:"createIfNotExist,omitempty"`
	DirectWrite      *bool   `json:"directWrite,omitempty"`
	MigrateThread    *uint64 `json:"migrateThread,omitempty"`
	OutputDir        *string `json:"outputDir,omitempty"`
	TaskQueueSize    *uint64 `json:"taskQueueSize,omitempty"`
}

// StructMigrateRule defines model for StructMigrateRule.
type StructMigrateRule struct {
	ColumnStructRules *[]ColumnStructRule `json:"columnStructRules,omitempty"`
	SchemaStructRules *[]SchemaStructRule `json:"schemaStructRules,omitempty"`
	TableAttrsRules   *[]TableAttrsRule   `json:"tableAttrsRules,omitempty"`
	TableStructRules  *[]TableStructRule  `json:"tableStructRules,omitempty"`
	TaskStructRules   *[]TaskStructRule   `json:"taskStructRules,omitempty"`
}

// StructMigrateTask defines model for StructMigrateTask.
type StructMigrateTask struct {
	CaseFieldRule      *CaseFieldRule      `json:"caseFieldRule,omitempty"`
	Comment            *string             `json:"comment,omitempty"`
	DatasourceNameS    *string             `json:"datasourceNameS,omitempty"`
	DatasourceNameT    *string             `json:"datasourceNameT,omitempty"`
	SchemaRouteRules   *[]SchemaRouteRule  `json:"schemaRouteRules,omitempty"`
	StructMigrateParam *StructMigrateParam `json:"structMigrateParam,omitempty"`
	StructMigrateRule  *StructMigrateRule  `json:"structMigrateRule,omitempty"`
	TaskName           *string             `json:"taskName,omitempty"`
}

// TableAttrsRule defines model for TableAttrsRule.
type TableAttrsRule struct {
	SchemaNameS *string   `json:"schemaNameS,omitempty"`
	TableAttrsT *string   `json:"tableAttrsT,omitempty"`
	TableNamesS *[]string `json:"tableNamesS,omitempty"`
}

// TableRouteRule defines model for TableRouteRule.
type TableRouteRule struct {
	ColumnRouteRules *map[string]string `json:"columnRouteRules,omitempty"`
	TableNameS       *string            `json:"tableNameS,omitempty"`
	TableNameT       *string            `json:"tableNameT,omitempty"`
}

// TableStructRule defines model for TableStructRule.
type TableStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
	SchemaNameS   *string `json:"schemaNameS,omitempty"`
	TableNameS    *string `json:"tableNameS,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Express  *string `json:"express,omitempty"`
	Operate  *string `json:"operate,omitempty"`
	TaskName *string `json:"taskName,omitempty"`
}

// TaskStructRule defines model for TaskStructRule.
type TaskStructRule struct {
	ColumnTypeS   *string `json:"columnTypeS,omitempty"`
	ColumnTypeT   *string `json:"columnTypeT,omitempty"`
	DefaultValueS *string `json:"defaultValueS,omitempty"`
	DefaultValueT *string `json:"defaultValueT,omitempty"`
}

// APIPutDatabaseJSONRequestBody defines body for APIPutDatabase for application/json ContentType.
type APIPutDatabaseJSONRequestBody = Database

// APIDeleteDatasourceJSONRequestBody defines body for APIDeleteDatasource for application/json ContentType.
type APIDeleteDatasourceJSONRequestBody = RequestDeleteParam

// APIListDatasourceJSONRequestBody defines body for APIListDatasource for application/json ContentType.
type APIListDatasourceJSONRequestBody = RequestPostParam

// APIPutDatasourceJSONRequestBody defines body for APIPutDatasource for application/json ContentType.
type APIPutDatasourceJSONRequestBody = NewDatasource

// APIPostTaskJSONRequestBody defines body for APIPostTask for application/json ContentType.
type APIPostTaskJSONRequestBody = Task

// APIDeleteStructMigrateJSONRequestBody defines body for APIDeleteStructMigrate for application/json ContentType.
type APIDeleteStructMigrateJSONRequestBody = RequestDeleteParam

// APIListStructMigrateJSONRequestBody defines body for APIListStructMigrate for application/json ContentType.
type APIListStructMigrateJSONRequestBody = RequestPostParam

// APIPutStructMigrateJSONRequestBody defines body for APIPutStructMigrate for application/json ContentType.
type APIPutStructMigrateJSONRequestBody = StructMigrateTask

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OT75+a3R//PinwAAAP//kNvpaIErAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
