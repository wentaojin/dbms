// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /database)
	APIDeleteDatabase(c *gin.Context)

	// (GET /database)
	APIListDatabase(c *gin.Context)

	// (PUT /database)
	APIPutDatabase(c *gin.Context)

	// (DELETE /datasource)
	APIDeleteDatasource(c *gin.Context)

	// (POST /datasource)
	APIListDatasource(c *gin.Context)

	// (PUT /datasource)
	APIPutDatasource(c *gin.Context)

	// (DELETE /rule)
	APIDeleteTaskMigrateRule(c *gin.Context)

	// (POST /rule)
	APIListTaskMigrateRule(c *gin.Context)

	// (PUT /rule)
	APIPutTaskMigrateRule(c *gin.Context)

	// (DELETE /task)
	APIDeleteTask(c *gin.Context)

	// (POST /task)
	APIKillTask(c *gin.Context)

	// (PUT /task)
	APIPutTask(c *gin.Context)

	// (DELETE /task/structMigrateTask)
	APIDeleteStructMigrateTask(c *gin.Context)

	// (POST /task/structMigrateTask)
	APIListStructMigrateTask(c *gin.Context)

	// (PUT /task/structMigrateTask)
	APIPutStructMigrateTask(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// APIDeleteDatabase operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteDatabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteDatabase(c)
}

// APIListDatabase operation middleware
func (siw *ServerInterfaceWrapper) APIListDatabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListDatabase(c)
}

// APIPutDatabase operation middleware
func (siw *ServerInterfaceWrapper) APIPutDatabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutDatabase(c)
}

// APIDeleteDatasource operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteDatasource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteDatasource(c)
}

// APIListDatasource operation middleware
func (siw *ServerInterfaceWrapper) APIListDatasource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListDatasource(c)
}

// APIPutDatasource operation middleware
func (siw *ServerInterfaceWrapper) APIPutDatasource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutDatasource(c)
}

// APIDeleteTaskMigrateRule operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteTaskMigrateRule(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteTaskMigrateRule(c)
}

// APIListTaskMigrateRule operation middleware
func (siw *ServerInterfaceWrapper) APIListTaskMigrateRule(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListTaskMigrateRule(c)
}

// APIPutTaskMigrateRule operation middleware
func (siw *ServerInterfaceWrapper) APIPutTaskMigrateRule(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutTaskMigrateRule(c)
}

// APIDeleteTask operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteTask(c)
}

// APIKillTask operation middleware
func (siw *ServerInterfaceWrapper) APIKillTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIKillTask(c)
}

// APIPutTask operation middleware
func (siw *ServerInterfaceWrapper) APIPutTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutTask(c)
}

// APIDeleteStructMigrateTask operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteStructMigrateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteStructMigrateTask(c)
}

// APIListStructMigrateTask operation middleware
func (siw *ServerInterfaceWrapper) APIListStructMigrateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListStructMigrateTask(c)
}

// APIPutStructMigrateTask operation middleware
func (siw *ServerInterfaceWrapper) APIPutStructMigrateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutStructMigrateTask(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/database", wrapper.APIDeleteDatabase)
	router.GET(options.BaseURL+"/database", wrapper.APIListDatabase)
	router.PUT(options.BaseURL+"/database", wrapper.APIPutDatabase)
	router.DELETE(options.BaseURL+"/datasource", wrapper.APIDeleteDatasource)
	router.POST(options.BaseURL+"/datasource", wrapper.APIListDatasource)
	router.PUT(options.BaseURL+"/datasource", wrapper.APIPutDatasource)
	router.DELETE(options.BaseURL+"/rule", wrapper.APIDeleteTaskMigrateRule)
	router.POST(options.BaseURL+"/rule", wrapper.APIListTaskMigrateRule)
	router.PUT(options.BaseURL+"/rule", wrapper.APIPutTaskMigrateRule)
	router.DELETE(options.BaseURL+"/task", wrapper.APIDeleteTask)
	router.POST(options.BaseURL+"/task", wrapper.APIKillTask)
	router.PUT(options.BaseURL+"/task", wrapper.APIPutTask)
	router.DELETE(options.BaseURL+"/task/structMigrateTask", wrapper.APIDeleteStructMigrateTask)
	router.POST(options.BaseURL+"/task/structMigrateTask", wrapper.APIListStructMigrateTask)
	router.PUT(options.BaseURL+"/task/structMigrateTask", wrapper.APIPutStructMigrateTask)
}
