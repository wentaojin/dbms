// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /database)
	APIDeleteDatabase(c *gin.Context)

	// (GET /database)
	APIListDatabase(c *gin.Context)

	// (PUT /database)
	APIPutDatabase(c *gin.Context)

	// (DELETE /datasource)
	APIDeleteDatasource(c *gin.Context)

	// (POST /datasource)
	APIListDatasource(c *gin.Context)

	// (PUT /datasource)
	APIPutDatasource(c *gin.Context)

	// (POST /task)
	APIPostTask(c *gin.Context)

	// (DELETE /task/csvMigrate)
	APIDeleteCsvMigrate(c *gin.Context)

	// (POST /task/csvMigrate)
	APIListCsvMigrate(c *gin.Context)

	// (PUT /task/csvMigrate)
	APIPutCsvMigrate(c *gin.Context)

	// (DELETE /task/dataCompare)
	APIDeleteDataCompare(c *gin.Context)

	// (POST /task/dataCompare)
	APIListDataCompare(c *gin.Context)

	// (PUT /task/dataCompare)
	APIPutDataCompare(c *gin.Context)

	// (DELETE /task/sqlMigrate)
	APIDeleteSqlMigrate(c *gin.Context)

	// (POST /task/sqlMigrate)
	APIListSqlMigrate(c *gin.Context)

	// (PUT /task/sqlMigrate)
	APIPutSqlMigrate(c *gin.Context)

	// (DELETE /task/stmtMigrate)
	APIDeleteStmtMigrate(c *gin.Context)

	// (POST /task/stmtMigrate)
	APIListStmtMigrate(c *gin.Context)

	// (PUT /task/stmtMigrate)
	APIPutStmtMigrate(c *gin.Context)

	// (DELETE /task/structMigrate)
	APIDeleteStructMigrate(c *gin.Context)

	// (POST /task/structMigrate)
	APIListStructMigrate(c *gin.Context)

	// (PUT /task/structMigrate)
	APIPutStructMigrate(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// APIDeleteDatabase operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteDatabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteDatabase(c)
}

// APIListDatabase operation middleware
func (siw *ServerInterfaceWrapper) APIListDatabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListDatabase(c)
}

// APIPutDatabase operation middleware
func (siw *ServerInterfaceWrapper) APIPutDatabase(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutDatabase(c)
}

// APIDeleteDatasource operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteDatasource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteDatasource(c)
}

// APIListDatasource operation middleware
func (siw *ServerInterfaceWrapper) APIListDatasource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListDatasource(c)
}

// APIPutDatasource operation middleware
func (siw *ServerInterfaceWrapper) APIPutDatasource(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutDatasource(c)
}

// APIPostTask operation middleware
func (siw *ServerInterfaceWrapper) APIPostTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPostTask(c)
}

// APIDeleteCsvMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteCsvMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteCsvMigrate(c)
}

// APIListCsvMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIListCsvMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListCsvMigrate(c)
}

// APIPutCsvMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIPutCsvMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutCsvMigrate(c)
}

// APIDeleteDataCompare operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteDataCompare(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteDataCompare(c)
}

// APIListDataCompare operation middleware
func (siw *ServerInterfaceWrapper) APIListDataCompare(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListDataCompare(c)
}

// APIPutDataCompare operation middleware
func (siw *ServerInterfaceWrapper) APIPutDataCompare(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutDataCompare(c)
}

// APIDeleteSqlMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteSqlMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteSqlMigrate(c)
}

// APIListSqlMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIListSqlMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListSqlMigrate(c)
}

// APIPutSqlMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIPutSqlMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutSqlMigrate(c)
}

// APIDeleteStmtMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteStmtMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteStmtMigrate(c)
}

// APIListStmtMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIListStmtMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListStmtMigrate(c)
}

// APIPutStmtMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIPutStmtMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutStmtMigrate(c)
}

// APIDeleteStructMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIDeleteStructMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIDeleteStructMigrate(c)
}

// APIListStructMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIListStructMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIListStructMigrate(c)
}

// APIPutStructMigrate operation middleware
func (siw *ServerInterfaceWrapper) APIPutStructMigrate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.APIPutStructMigrate(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/database", wrapper.APIDeleteDatabase)
	router.GET(options.BaseURL+"/database", wrapper.APIListDatabase)
	router.PUT(options.BaseURL+"/database", wrapper.APIPutDatabase)
	router.DELETE(options.BaseURL+"/datasource", wrapper.APIDeleteDatasource)
	router.POST(options.BaseURL+"/datasource", wrapper.APIListDatasource)
	router.PUT(options.BaseURL+"/datasource", wrapper.APIPutDatasource)
	router.POST(options.BaseURL+"/task", wrapper.APIPostTask)
	router.DELETE(options.BaseURL+"/task/csvMigrate", wrapper.APIDeleteCsvMigrate)
	router.POST(options.BaseURL+"/task/csvMigrate", wrapper.APIListCsvMigrate)
	router.PUT(options.BaseURL+"/task/csvMigrate", wrapper.APIPutCsvMigrate)
	router.DELETE(options.BaseURL+"/task/dataCompare", wrapper.APIDeleteDataCompare)
	router.POST(options.BaseURL+"/task/dataCompare", wrapper.APIListDataCompare)
	router.PUT(options.BaseURL+"/task/dataCompare", wrapper.APIPutDataCompare)
	router.DELETE(options.BaseURL+"/task/sqlMigrate", wrapper.APIDeleteSqlMigrate)
	router.POST(options.BaseURL+"/task/sqlMigrate", wrapper.APIListSqlMigrate)
	router.PUT(options.BaseURL+"/task/sqlMigrate", wrapper.APIPutSqlMigrate)
	router.DELETE(options.BaseURL+"/task/stmtMigrate", wrapper.APIDeleteStmtMigrate)
	router.POST(options.BaseURL+"/task/stmtMigrate", wrapper.APIListStmtMigrate)
	router.PUT(options.BaseURL+"/task/stmtMigrate", wrapper.APIPutStmtMigrate)
	router.DELETE(options.BaseURL+"/task/structMigrate", wrapper.APIDeleteStructMigrate)
	router.POST(options.BaseURL+"/task/structMigrate", wrapper.APIListStructMigrate)
	router.PUT(options.BaseURL+"/task/structMigrate", wrapper.APIPutStructMigrate)
}
